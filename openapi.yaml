openapi: 3.0.3
info:
  title: Canvastack POSMID API
  description: |-
    API Specification for the Canvastack Point of Sale Multi-tenant ID (POSMID) system.
    This API is designed to be backend-agnostic, following a decoupled, API-First approach.
  version: 1.0.0

servers:
  - url: http://localhost:9000/api/v1
    description: Local Development Server

paths:
  /register:
    post:
      tags: [Authentication]
      summary: Register a new Tenant and User
      description: "Public endpoint - no authentication required. Creates new tenant and admin user."
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: Registration successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '422':
          description: Validation error

  /login:
    post:
      tags: [Authentication]
      summary: Log in a user
      description: "Public endpoint - no authentication required. Returns Bearer token for authenticated requests."
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Unauthorized

  /logout:
    post:
      tags: [Authentication]
      summary: Log out the current user
      operationId: logoutUser
      security: [{ bearerAuth: [] }]
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Logged out successfully

  /user:
    get:
      tags: [Authentication]
      summary: Get current authenticated user's information
      description: "Requires valid Bearer token authentication."
      operationId: getCurrentUser
      security: [{ bearerAuth: [] }]
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  # Tenants management (HQ/Admin scope)
  /tenants:
    get:
      tags: [Tenants]
      summary: List tenants (visibility per policy)
      description: "Requires authentication. Visibility: Super Admin/HQ users with 'tenants.view' can see all tenants, others see only their own tenant."
      operationId: listTenants
      security: [{ bearerAuth: [] }]
      parameters:
        - in: query
          name: per_page
          schema: { type: integer }
        - in: query
          name: page
          schema: { type: integer }
      responses:
        '200':
          description: Paginated tenants
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/Tenant' }
                  current_page: { type: integer }
                  last_page: { type: integer }
                  per_page: { type: integer }
                  total: { type: integer }
    post:
      tags: [Tenants]
      summary: Create a tenant
      operationId: createTenant
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TenantCreateRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tenant'

  /tenants/{tenantId}:
    get:
      tags: [Tenants]
      summary: Get tenant by ID
      operationId: getTenant
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Tenant' }
    patch:
      tags: [Tenants]
      summary: Update tenant
      operationId: updateTenant
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TenantUpdateRequest'
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Tenant' }
    delete:
      tags: [Tenants]
      summary: Delete tenant
      operationId: deleteTenant
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
      responses:
        '200':
          description: Deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }

  /tenants/{tenantId}/status:
    post:
      tags: [Tenants]
      summary: Set tenant status
      operationId: setTenantStatus
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [status]
              properties:
                status:
                  type: string
                  enum: [active, inactive, pending, banned]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Tenant' }

  /tenants/{tenantId}/auto-activation/request:
    post:
      tags: [Tenants]
      summary: Request auto-activation for tenant users
      security: [{ bearerAuth: [] }]
      parameters: [ { $ref: '#/components/parameters/TenantId' } ]
      responses:
        '200':
          description: Submitted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }

  /tenants/{tenantId}/auto-activation/approve:
    post:
      tags: [Tenants]
      summary: Approve auto-activation
      security: [{ bearerAuth: [] }]
      parameters: [ { $ref: '#/components/parameters/TenantId' } ]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Tenant' }

  /tenants/{tenantId}/auto-activation/reject:
    post:
      tags: [Tenants]
      summary: Reject auto-activation
      security: [{ bearerAuth: [] }]
      parameters: [ { $ref: '#/components/parameters/TenantId' } ]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Tenant' }

  /tenants/{tenantId}/users/{userId}/status:
    post:
      tags: [Tenants]
      summary: Set status of a tenant user
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/UserId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [status]
              properties:
                status:
                  type: string
                  enum: [active, inactive, pending, banned]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }

  # Tenant-scoped routes (team context)
  /tenants/{tenantId}/dashboard:
    get:
      tags: [Dashboard]
      summary: Get dashboard summary for a tenant
      operationId: getDashboard
      security: [{ bearerAuth: [] }]
      parameters: [ { $ref: '#/components/parameters/TenantId' } ]
      responses:
        '200':
          description: Dashboard summary
          content:
            application/json:
              schema:
                type: object
                properties:
                  today_revenue: { type: number, format: double }
                  today_transactions: { type: integer }
                  low_stock_products: { type: integer }
                  low_stock_alerts:
                    type: array
                    items:
                      type: object
                      properties:
                        id: { type: string, format: uuid }
                        name: { type: string }
                        stock: { type: integer }
                        sku: { type: string }

  /tenants/{tenantId}/public/settings:
    get:
      tags: [Public]
      summary: Get public tenant settings
      description: Public endpoint - returns tenant.settings.public as-is.
      operationId: getPublicSettings
      parameters:
        - $ref: '#/components/parameters/TenantId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/PublicSettings' }

  /tenants/{tenantId}/public/products:
    get:
      tags: [Public]
      summary: List published products (public)
      description: Returns only published products; default minStock=1; optional search by q.
      operationId: listPublicProducts
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - in: query
          name: q
          schema: { type: string }
        - in: query
          name: minStock
          schema: { type: integer, minimum: 0 }
          description: Minimum stock to include (default 1)
        - in: query
          name: limit
          schema: { type: integer, minimum: 1, maximum: 100 }
        - in: query
          name: page
          schema: { type: integer, minimum: 1 }
      responses:
        '200':
          description: Paginated published products
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/PublicProduct' }
                  current_page: { type: integer }
                  last_page: { type: integer }
                  per_page: { type: integer }
                  total: { type: integer }

  /tenants/{tenantId}/public/products/{productId}:
    get:
      tags: [Public]
      summary: Get a published product by ID (public)
      operationId: getPublicProduct
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/ProductId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/PublicProduct' }
        '404':
          description: Not found

  /tenants/{tenantId}/products:
    get:
      tags: [Products]
      summary: List all products for a tenant
      description: "Requires authentication and 'products.view' permission within the tenant scope. Supports advanced filtering by date ranges, status, category, price range, and stock level."
      operationId: listProducts
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - in: query
          name: per_page
          schema: { type: integer, minimum: 1, maximum: 100 }
        - in: query
          name: page
          schema: { type: integer, minimum: 1 }
        - in: query
          name: search
          description: "Search in product name, SKU, or description"
          schema: { type: string }
        - in: query
          name: category_id
          description: "Filter by category UUID"
          schema: { type: string, format: uuid }
        - in: query
          name: sort_by
          description: "Sort field"
          schema: { type: string, enum: [name, sku, price, stock, created_at, updated_at] }
        - in: query
          name: sort_order
          description: "Sort direction"
          schema: { type: string, enum: [asc, desc], default: desc }
        - in: query
          name: stock_filter
          description: "Filter by stock level"
          schema: { type: string, enum: [all, in_stock, low_stock, out_of_stock], default: all }
        - in: query
          name: min_price
          description: "Minimum price filter"
          schema: { type: number, format: float }
        - in: query
          name: max_price
          description: "Maximum price filter"
          schema: { type: number, format: float }
        - in: query
          name: created_from
          description: "Filter products created from this date (YYYY-MM-DD)"
          schema: { type: string, format: date }
        - in: query
          name: created_to
          description: "Filter products created until this date (YYYY-MM-DD)"
          schema: { type: string, format: date }
        - in: query
          name: updated_from
          description: "Filter products updated from this date (YYYY-MM-DD)"
          schema: { type: string, format: date }
        - in: query
          name: updated_to
          description: "Filter products updated until this date (YYYY-MM-DD)"
          schema: { type: string, format: date }
        - in: query
          name: statuses
          description: "Filter by multiple statuses (comma-separated: active,draft,discontinued)"
          schema: { type: string }
        - in: query
          name: include_archived
          description: "Phase 11: Include archived (soft-deleted) products in results"
          schema: { type: boolean, default: false }
        - in: query
          name: only_archived
          description: "Phase 11: Show only archived (soft-deleted) products"
          schema: { type: boolean, default: false }
      responses:
        '200':
          description: A paginated list of products
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/Product' }
                  current_page: { type: integer }
                  last_page: { type: integer }
                  per_page: { type: integer }
                  total: { type: integer }
    post:
      tags: [Products]
      summary: Create a new product
      description: "Requires authentication and 'products.create' permission within the tenant scope."
      operationId: createProduct
      security: [{ bearerAuth: [] }]
      parameters: [ { $ref: '#/components/parameters/TenantId' } ]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/ProductRequest' }
      responses:
        '201':
          description: Product created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Product' }

  /tenants/{tenantId}/products/{productId}:
    get:
      tags: [Products]
      summary: Get a single product by ID
      operationId: getProductById
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/ProductId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Product' }
    put:
      tags: [Products]
      summary: Update an existing product
      operationId: updateProduct
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/ProductId'
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/ProductRequest' }
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Product' }
    delete:
      tags: [Products]
      summary: Delete a product
      operationId: deleteProduct
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/ProductId'
      responses:
        '204':
          description: Deleted

  # Phase 11: Archive & Soft Delete
  /tenants/{tenantId}/products/{productId}/archive:
    patch:
      tags: [Products]
      summary: Archive a product (soft delete)
      description: "Phase 11: Requires authentication and 'products.delete' permission. Soft deletes the product by setting deleted_at timestamp. Product will be excluded from default queries but can be restored."
      operationId: archiveProduct
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/ProductId'
      responses:
        '200':
          description: Product archived successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string, example: 'Product archived successfully' }
                  data: { $ref: '#/components/schemas/Product' }
        '403':
          description: Forbidden - missing products.delete permission
        '404':
          description: Product not found or not in tenant scope

  /tenants/{tenantId}/products/{productId}/restore:
    patch:
      tags: [Products]
      summary: Restore an archived product
      description: "Phase 11: Requires authentication and 'products.restore' permission. Restores a soft-deleted product by clearing deleted_at timestamp. Product will be visible in default queries again."
      operationId: restoreProduct
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/ProductId'
      responses:
        '200':
          description: Product restored successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string, example: 'Product restored successfully' }
                  data: { $ref: '#/components/schemas/Product' }
        '403':
          description: Forbidden - missing products.restore permission
        '404':
          description: Product not found in archived products or not in tenant scope

  /tenants/{tenantId}/products/{productId}/permanent:
    delete:
      tags: [Products]
      summary: Permanently delete an archived product
      description: "Phase 11: Requires authentication and 'products.delete.permanent' permission (admin-only). Permanently removes an archived product from the database. This action cannot be undone. Only archived products can be permanently deleted."
      operationId: forceDeleteProduct
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/ProductId'
      responses:
        '200':
          description: Product permanently deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string, example: 'Product permanently deleted' }
        '403':
          description: Forbidden - missing products.delete.permanent permission
        '404':
          description: Product not found in archived products or not in tenant scope

  /tenants/{tenantId}/products/bulk:
    post:
      tags: [Products]
      summary: Bulk delete products
      description: "Requires authentication and 'products.delete' permission within the tenant scope. Deletes multiple products in one operation."
      operationId: bulkDeleteProducts
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [ids]
              properties:
                ids:
                  type: array
                  items: { type: string, format: uuid }
                  minItems: 1
                  description: Array of product IDs to delete
      responses:
        '200':
          description: Bulk delete completed
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  deleted_count: { type: integer }
                  requested_count: { type: integer }
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        id: { type: string, format: uuid }
                        message: { type: string }
        '403':
          description: Forbidden - missing products.delete permission
        '422':
          description: Validation error

  /tenants/{tenantId}/products/bulk/status:
    patch:
      tags: [Products]
      summary: Bulk update product status
      description: "Requires authentication and 'products.update' permission within the tenant scope. Updates status for multiple products."
      operationId: bulkUpdateProductStatus
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [ids, status]
              properties:
                ids:
                  type: array
                  items: { type: string, format: uuid }
                  minItems: 1
                  description: Array of product IDs to update
                status:
                  type: string
                  enum: [active, inactive, discontinued]
                  description: New status for all selected products
      responses:
        '200':
          description: Bulk status update completed
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  updated_count: { type: integer }
                  requested_count: { type: integer }
                  status: { type: string }
        '403':
          description: Forbidden - missing products.update permission
        '422':
          description: Validation error

  /tenants/{tenantId}/products/bulk/category:
    patch:
      tags: [Products]
      summary: Bulk update product category
      description: "Requires authentication and 'products.update' permission within the tenant scope. Assigns category to multiple products."
      operationId: bulkUpdateProductCategory
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [ids, category_id]
              properties:
                ids:
                  type: array
                  items: { type: string, format: uuid }
                  minItems: 1
                  description: Array of product IDs to update
                category_id:
                  type: string
                  format: uuid
                  description: Category ID to assign (must belong to the same tenant)
      responses:
        '200':
          description: Bulk category update completed
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  updated_count: { type: integer }
                  requested_count: { type: integer }
                  category_id: { type: string, format: uuid }
        '403':
          description: Forbidden - missing products.update permission
        '404':
          description: Category not found or does not belong to this tenant
        '422':
          description: Validation error

  /tenants/{tenantId}/products/bulk/price:
    patch:
      tags: [Products]
      summary: Bulk update product prices
      description: "Requires authentication and 'products.update' permission within the tenant scope. Updates prices for multiple products using percentage or fixed adjustments."
      operationId: bulkUpdateProductPrice
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [ids, type, operation, value]
              properties:
                ids:
                  type: array
                  items: { type: string, format: uuid }
                  minItems: 1
                  description: Array of product IDs to update
                type:
                  type: string
                  enum: [percentage, fixed]
                  description: Type of price adjustment
                operation:
                  type: string
                  enum: [increase, decrease, set]
                  description: Operation to perform (increase/decrease/set price)
                value:
                  type: number
                  format: float
                  minimum: 0
                  description: Amount or percentage value for the adjustment
      responses:
        '200':
          description: Bulk price update completed
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  updated_count: { type: integer }
                  requested_count: { type: integer }
                  type: { type: string }
                  operation: { type: string }
                  value: { type: number }
        '403':
          description: Forbidden - missing products.update permission
        '422':
          description: Validation error

  /tenants/{tenantId}/products/{productId}/history:
    get:
      tags: [Products]
      summary: Get complete change history for a product
      description: "Requires authentication and 'products.view' permission. Returns all activity logs for the product including create, update, and delete operations with before/after values. Supports pagination and date range filtering."
      operationId: getProductHistory
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - in: path
          name: productId
          required: true
          schema: { type: string, format: uuid }
          description: Product ID
        - in: query
          name: page
          schema: 
            type: integer
            default: 1
            minimum: 1
          description: Page number for pagination
        - in: query
          name: per_page
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 100
          description: Number of items per page (max 100)
        - in: query
          name: event
          schema:
            type: string
            enum: [created, updated, deleted, restored, archived, price_changed, stock_adjusted, variant_added, variant_updated, variant_deleted]
          description: Filter activities by event type
          example: "updated"
        - in: query
          name: date_from
          schema:
            type: string
            format: date-time
          description: Filter activities from this date (ISO 8601 format)
          example: "2025-09-08T00:00:00Z"
        - in: query
          name: date_to
          schema:
            type: string
            format: date-time
          description: Filter activities up to this date (ISO 8601 format)
          example: "2025-10-08T23:59:59Z"
      responses:
        '200':
          description: Product change history retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id: { type: integer }
                        event: 
                          type: string
                          enum: [created, updated, deleted, restored, archived, price_changed, stock_adjusted, variant_added, variant_updated, variant_deleted]
                          description: Activity event type from Spatie Activity Log
                        description: 
                          type: string
                          nullable: true
                          description: Human-readable description of the activity
                        properties:
                          type: object
                          description: Full properties object from activity log
                        changes:
                          type: object
                          description: Extracted change details
                          properties:
                            old: 
                              type: object
                              nullable: true
                              description: Old values before change
                            attributes: 
                              type: object
                              nullable: true
                              description: New values after change
                        causer:
                          type: object
                          nullable: true
                          description: User who performed the action
                          properties:
                            id: { type: string, format: uuid }
                            name: { type: string }
                            email: { type: string }
                        created_at: { type: string, format: date-time }
                  pagination:
                    type: object
                    properties:
                      current_page: { type: integer }
                      last_page: { type: integer }
                      per_page: { type: integer }
                      total: { type: integer }
                  meta:
                    type: object
                    properties:
                      product_id: { type: string, format: uuid }
                      product_name: { type: string }
        '403':
          description: Forbidden - missing products.view permission
        '404':
          description: Product not found or doesn't belong to tenant

  /tenants/{tenantId}/products/{productId}/history/price:
    get:
      tags: [Products]
      summary: Get price change history for a product
      description: "Requires authentication and 'products.view' permission. Returns detailed price/cost history with change amounts and percentages."
      operationId: getProductPriceHistory
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - in: path
          name: productId
          required: true
          schema: { type: string, format: uuid }
          description: Product ID
      responses:
        '200':
          description: Price history retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id: { type: string, format: uuid }
                        old_price: { type: number, format: float }
                        new_price: { type: number, format: float }
                        price_change: { type: number, format: float }
                        price_change_percentage: { type: number, format: float }
                        old_cost_price: { type: number, format: float, nullable: true }
                        new_cost_price: { type: number, format: float, nullable: true }
                        cost_change: { type: number, format: float, nullable: true }
                        cost_change_percentage: { type: number, format: float, nullable: true }
                        changed_by:
                          type: object
                          nullable: true
                          properties:
                            id: { type: string, format: uuid }
                            name: { type: string }
                            email: { type: string }
                        changed_at: { type: string, format: date-time }
                  pagination:
                    type: object
                    properties:
                      current_page: { type: integer }
                      last_page: { type: integer }
                      per_page: { type: integer }
                      total: { type: integer }
                  meta:
                    type: object
                    properties:
                      product_id: { type: string, format: uuid }
                      product_name: { type: string }
                      current_price: { type: number, format: float }
                      current_cost_price: { type: number, format: float, nullable: true }
        '403':
          description: Forbidden - missing products.view permission
        '404':
          description: Product not found or doesn't belong to tenant

  /tenants/{tenantId}/products/{productId}/history/stock:
    get:
      tags: [Products]
      summary: Get stock movement history for a product
      description: "Requires authentication and 'products.view' permission. Returns inventory movement history with change direction and references."
      operationId: getProductStockHistory
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - in: path
          name: productId
          required: true
          schema: { type: string, format: uuid }
          description: Product ID
      responses:
        '200':
          description: Stock history retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id: { type: string, format: uuid }
                        old_stock: { type: integer }
                        new_stock: { type: integer }
                        stock_change: { type: integer }
                        change_direction: { type: string, enum: [increase, decrease, no_change] }
                        change_type: { type: string, enum: [adjustment, sale, purchase, return], nullable: true }
                        reference_id: { type: string, format: uuid, nullable: true }
                        notes: { type: string, nullable: true }
                        changed_by:
                          type: object
                          nullable: true
                          properties:
                            id: { type: string, format: uuid }
                            name: { type: string }
                            email: { type: string }
                        changed_at: { type: string, format: date-time }
                  pagination:
                    type: object
                    properties:
                      current_page: { type: integer }
                      last_page: { type: integer }
                      per_page: { type: integer }
                      total: { type: integer }
                  meta:
                    type: object
                    properties:
                      product_id: { type: string, format: uuid }
                      product_name: { type: string }
                      current_stock: { type: integer }
        '403':
          description: Forbidden - missing products.view permission
        '404':
          description: Product not found or doesn't belong to tenant

  # Product Analytics Endpoints
  /tenants/{tenantId}/products/{productId}/analytics/sales:
    get:
      tags: [Product Analytics]
      summary: Get sales metrics and trends for a product
      description: "Requires authentication and 'products.view' permission. Returns sales data including total revenue, quantity sold, and time-series trends."
      operationId: getProductSalesMetrics
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - in: path
          name: productId
          required: true
          schema: { type: string, format: uuid }
          description: Product ID
        - in: query
          name: period_start
          schema: { type: string, format: date }
          description: Start date for analytics period (YYYY-MM-DD)
        - in: query
          name: period_end
          schema: { type: string, format: date }
          description: End date for analytics period (YYYY-MM-DD)
      responses:
        '200':
          description: Sales metrics retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data:
                    $ref: '#/components/schemas/ProductSalesMetrics'
        '403':
          description: Forbidden - missing products.view permission
        '404':
          description: Product not found

  /tenants/{tenantId}/products/{productId}/analytics/stock:
    get:
      tags: [Product Analytics]
      summary: Get stock metrics and movements for a product
      description: "Requires authentication and 'products.view' permission. Returns stock level metrics and time-series movement data."
      operationId: getProductStockMetrics
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - in: path
          name: productId
          required: true
          schema: { type: string, format: uuid }
          description: Product ID
        - in: query
          name: period_start
          schema: { type: string, format: date }
          description: Start date for analytics period (YYYY-MM-DD)
        - in: query
          name: period_end
          schema: { type: string, format: date }
          description: End date for analytics period (YYYY-MM-DD)
      responses:
        '200':
          description: Stock metrics retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data:
                    $ref: '#/components/schemas/ProductStockMetrics'
        '403':
          description: Forbidden - missing products.view permission
        '404':
          description: Product not found

  /tenants/{tenantId}/products/{productId}/analytics/profit:
    get:
      tags: [Product Analytics]
      summary: Get profit analysis for a product
      description: "Requires authentication and 'products.view' permission. Returns profit metrics including gross profit, margin, and time-series trends."
      operationId: getProductProfitMetrics
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - in: path
          name: productId
          required: true
          schema: { type: string, format: uuid }
          description: Product ID
        - in: query
          name: period_start
          schema: { type: string, format: date }
          description: Start date for analytics period (YYYY-MM-DD)
        - in: query
          name: period_end
          schema: { type: string, format: date }
          description: End date for analytics period (YYYY-MM-DD)
      responses:
        '200':
          description: Profit metrics retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data:
                    $ref: '#/components/schemas/ProductProfitMetrics'
        '403':
          description: Forbidden - missing products.view permission
        '404':
          description: Product not found

  /tenants/{tenantId}/products/{productId}/analytics/variants:
    get:
      tags: [Product Analytics]
      summary: Get variant performance comparison for a product
      description: "Requires authentication and 'products.view' permission. Returns performance metrics for all variants of the product."
      operationId: getProductVariantPerformance
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - in: path
          name: productId
          required: true
          schema: { type: string, format: uuid }
          description: Product ID
        - in: query
          name: period_start
          schema: { type: string, format: date }
          description: Start date for analytics period (YYYY-MM-DD)
        - in: query
          name: period_end
          schema: { type: string, format: date }
          description: End date for analytics period (YYYY-MM-DD)
        - in: query
          name: limit
          schema: { type: integer, minimum: 1, maximum: 100, default: 10 }
          description: Maximum number of variants to return
      responses:
        '200':
          description: Variant performance retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/VariantPerformance'
        '403':
          description: Forbidden - missing products.view permission
        '404':
          description: Product not found

  /tenants/{tenantId}/products/{productId}/analytics/overview:
    get:
      tags: [Product Analytics]
      summary: Get combined analytics overview for a product
      description: "Requires authentication and 'products.view' permission. Returns all analytics data in a single response (most efficient endpoint)."
      operationId: getProductAnalyticsOverview
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - in: path
          name: productId
          required: true
          schema: { type: string, format: uuid }
          description: Product ID
        - in: query
          name: period_start
          schema: { type: string, format: date }
          description: Start date for analytics period (YYYY-MM-DD)
        - in: query
          name: period_end
          schema: { type: string, format: date }
          description: End date for analytics period (YYYY-MM-DD)
        - in: query
          name: limit
          schema: { type: integer, minimum: 1, maximum: 100, default: 10 }
          description: Maximum number of variants to return in variant performance
      responses:
        '200':
          description: Analytics overview retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data:
                    $ref: '#/components/schemas/ProductAnalyticsOverview'
        '403':
          description: Forbidden - missing products.view permission
        '404':
          description: Product not found

  /tenants/{tenantId}/products/{productId}/analytics/export/csv:
    get:
      tags: [Product Analytics]
      summary: Export product analytics to CSV
      description: "Requires authentication and 'products.view' permission. Downloads analytics data as CSV file."
      operationId: exportProductAnalyticsCsv
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - in: path
          name: productId
          required: true
          schema: { type: string, format: uuid }
          description: Product ID
        - in: query
          name: period_start
          schema: { type: string, format: date }
          description: Start date for analytics period (YYYY-MM-DD)
        - in: query
          name: period_end
          schema: { type: string, format: date }
          description: End date for analytics period (YYYY-MM-DD)
      responses:
        '200':
          description: CSV file download
          content:
            text/csv:
              schema:
                type: string
                format: binary
        '403':
          description: Forbidden - missing products.view permission
        '404':
          description: Product not found

  /tenants/{tenantId}/products/{productId}/analytics/export/pdf:
    get:
      tags: [Product Analytics]
      summary: Export product analytics to PDF
      description: "Requires authentication and 'products.view' permission. Downloads analytics report as PDF file."
      operationId: exportProductAnalyticsPdf
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - in: path
          name: productId
          required: true
          schema: { type: string, format: uuid }
          description: Product ID
        - in: query
          name: period_start
          schema: { type: string, format: date }
          description: Start date for analytics period (YYYY-MM-DD)
        - in: query
          name: period_end
          schema: { type: string, format: date }
          description: End date for analytics period (YYYY-MM-DD)
      responses:
        '200':
          description: PDF file download
          content:
            application/pdf:
              schema:
                type: string
                format: binary
        '403':
          description: Forbidden - missing products.view permission
        '404':
          description: Product not found

  # Phase 8E: Product Duplication
  /tenants/{tenantId}/products/{productId}/duplicate:
    post:
      tags: [Products]
      summary: Duplicate a product
      description: "Requires authentication and 'products.create' permission. Creates a copy of an existing product with new UUID, modified SKU (adds -COPY suffix with counter), name with ' (Copy)' suffix, and draft status. All images are also duplicated with new UUIDs."
      operationId: duplicateProduct
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/ProductId'
      responses:
        '201':
          description: Product duplicated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Product duplicated successfully"
                  data:
                    $ref: '#/components/schemas/Product'
        '403':
          description: Forbidden - missing products.create permission
        '404':
          description: Product not found or not in tenant scope

  # Phase 7: Multi-Image Gallery
  /tenants/{tenantId}/products/{productId}/images:
    get:
      tags: [Products]
      summary: List all images for a product
      description: "Requires authentication and 'products.view' permission. Returns all images ordered by sort_order."
      operationId: listProductImages
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/ProductId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/ProductImage' }
                  total: { type: integer }
                  max_images: { type: integer, default: 10 }
        '403':
          description: Forbidden - missing products.view permission
        '404':
          description: Product not found
    post:
      tags: [Products]
      summary: Upload multiple images for a product
      description: "Requires authentication and 'products.update' permission. Supports up to 10 images per product. Auto-generates thumbnails."
      operationId: uploadProductImages
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/ProductId'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required: [images]
              properties:
                images:
                  type: array
                  items:
                    type: string
                    format: binary
                  description: Array of image files (max 10 total per product, 2MB each)
      responses:
        '201':
          description: Images uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/ProductImage' }
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        file: { type: string }
                        error: { type: string }
                  total_images: { type: integer }
        '403':
          description: Forbidden - missing products.update permission
        '422':
          description: Validation error or max image limit reached

  /tenants/{tenantId}/products/{productId}/images/{imageId}:
    delete:
      tags: [Products]
      summary: Delete a product image
      description: "Requires authentication and 'products.update' permission. If deleted image was primary, first remaining image becomes primary."
      operationId: deleteProductImage
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/ProductId'
        - in: path
          name: imageId
          required: true
          schema: { type: string, format: uuid }
          description: Image ID
      responses:
        '200':
          description: Image deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
        '403':
          description: Forbidden - missing products.update permission
        '404':
          description: Image not found

  /tenants/{tenantId}/products/{productId}/images/{imageId}/primary:
    patch:
      tags: [Products]
      summary: Set an image as primary
      description: "Requires authentication and 'products.update' permission. Unsets all other images as primary."
      operationId: setProductImagePrimary
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/ProductId'
        - in: path
          name: imageId
          required: true
          schema: { type: string, format: uuid }
          description: Image ID
      responses:
        '200':
          description: Primary image updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
                  data: { $ref: '#/components/schemas/ProductImage' }
        '403':
          description: Forbidden - missing products.update permission
        '404':
          description: Image not found

  /tenants/{tenantId}/products/{productId}/images/reorder:
    patch:
      tags: [Products]
      summary: Reorder product images
      description: "Requires authentication and 'products.update' permission. Updates sort_order for all images."
      operationId: reorderProductImages
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/ProductId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [order]
              properties:
                order:
                  type: array
                  items: { type: string, format: uuid }
                  description: Array of image IDs in desired order
      responses:
        '200':
          description: Images reordered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/ProductImage' }
        '403':
          description: Forbidden - missing products.update permission
        '422':
          description: Validation error

  /tenants/{tenantId}/categories:
    get:
      tags: [Products]
      summary: List all categories for a tenant
      description: "Requires authentication and 'products.view' permission within the tenant scope."
      operationId: listCategories
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - in: query
          name: per_page
          schema: { type: integer, minimum: 1, maximum: 100 }
        - in: query
          name: page
          schema: { type: integer, minimum: 1 }
      responses:
        '200':
          description: A paginated list of categories
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/Category' }
                  current_page: { type: integer }
                  last_page: { type: integer }
                  per_page: { type: integer }
                  total: { type: integer }
    post:
      tags: [Products]
      summary: Create a new category
      operationId: createCategory
      security: [{ bearerAuth: [] }]
      parameters: [ { $ref: '#/components/parameters/TenantId' } ]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/CategoryRequest' }
      responses:
        '201':
          description: Category created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Category' }

  /tenants/{tenantId}/categories/{categoryId}:
    get:
      tags: [Products]
      summary: Get a category by ID
      operationId: getCategoryById
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/CategoryId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Category' }
    put:
      tags: [Products]
      summary: Update a category
      operationId: updateCategory
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/CategoryId'
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/CategoryRequest' }
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Category' }
    delete:
      tags: [Products]
      summary: Delete a category
      operationId: deleteCategory
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/CategoryId'
      responses:
        '204':
          description: Deleted

  # Phase 9: Supplier Management
  /tenants/{tenantId}/suppliers:
    get:
      tags: [Suppliers]
      summary: List all suppliers for a tenant
      description: "Requires authentication and 'products.view' permission. Supports search and filtering."
      operationId: listSuppliers
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - in: query
          name: per_page
          schema: { type: integer, minimum: 1, maximum: 100, default: 15 }
        - in: query
          name: page
          schema: { type: integer, minimum: 1 }
        - in: query
          name: search
          description: "Search in supplier name, contact person, email"
          schema: { type: string }
        - in: query
          name: status
          description: "Filter by status"
          schema: { type: string, enum: [active, inactive] }
      responses:
        '200':
          description: A paginated list of suppliers
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/Supplier' }
                  current_page: { type: integer }
                  last_page: { type: integer }
                  per_page: { type: integer }
                  total: { type: integer }
    post:
      tags: [Suppliers]
      summary: Create a new supplier
      description: "Requires authentication and 'products.update' permission."
      operationId: createSupplier
      security: [{ bearerAuth: [] }]
      parameters: [ { $ref: '#/components/parameters/TenantId' } ]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/SupplierRequest' }
      responses:
        '201':
          description: Supplier created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Supplier' }

  /tenants/{tenantId}/suppliers/{supplierId}:
    get:
      tags: [Suppliers]
      summary: Get a supplier by ID
      operationId: getSupplierById
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/SupplierId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Supplier' }
    patch:
      tags: [Suppliers]
      summary: Update a supplier
      operationId: updateSupplier
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/SupplierId'
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/SupplierRequest' }
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Supplier' }
    delete:
      tags: [Suppliers]
      summary: Delete a supplier
      description: "Cannot delete if supplier has associated products."
      operationId: deleteSupplier
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/SupplierId'
      responses:
        '204':
          description: Deleted
        '422':
          description: Cannot delete - has associated products

  /tenants/{tenantId}/suppliers/{supplierId}/products:
    get:
      tags: [Suppliers]
      summary: List products by supplier
      operationId: listProductsBySupplier
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/SupplierId'
        - in: query
          name: per_page
          schema: { type: integer, minimum: 1, maximum: 100, default: 15 }
        - in: query
          name: page
          schema: { type: integer, minimum: 1 }
      responses:
        '200':
          description: A paginated list of products
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/Product' }
                  current_page: { type: integer }
                  last_page: { type: integer }
                  per_page: { type: integer }
                  total: { type: integer }

  /tenants/{tenantId}/suppliers/{supplierId}/upload-image:
    post:
      tags: [Suppliers]
      summary: Upload supplier image/photo
      description: "Upload image for supplier with auto-generated thumbnail. Requires authentication and 'products.update' permission."
      operationId: uploadSupplierImage
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/SupplierId'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - image
              properties:
                image:
                  type: string
                  format: binary
                  description: "Image file (max 5MB, formats: jpg, png, gif, webp)"
      responses:
        '200':
          description: Image uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Image uploaded successfully."
                  image_url:
                    type: string
                    description: Full image URL
                  image_thumb_url:
                    type: string
                    description: Thumbnail URL (300x300)
        '422':
          description: Validation error (file too large or invalid format)
        '500':
          description: Upload failed

  /tenants/{tenantId}/suppliers/{supplierId}/image:
    delete:
      tags: [Suppliers]
      summary: Delete supplier image
      description: "Delete supplier image and thumbnail. Requires authentication and 'products.update' permission."
      operationId: deleteSupplierImage
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/SupplierId'
      responses:
        '200':
          description: Image deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Image deleted successfully."
        '500':
          description: Deletion failed

  # Phase 9: Product Tags Management
  /tenants/{tenantId}/tags:
    get:
      tags: [Product Tags]
      summary: List all product tags for a tenant
      description: "Requires authentication and 'products.view' permission. Supports search."
      operationId: listProductTags
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - in: query
          name: per_page
          schema: { type: integer, minimum: 1, maximum: 100, default: 15 }
        - in: query
          name: page
          schema: { type: integer, minimum: 1 }
        - in: query
          name: search
          description: "Search in tag name"
          schema: { type: string }
      responses:
        '200':
          description: A paginated list of tags
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/ProductTag' }
                  current_page: { type: integer }
                  last_page: { type: integer }
                  per_page: { type: integer }
                  total: { type: integer }
    post:
      tags: [Product Tags]
      summary: Create a new product tag
      description: "Requires authentication and 'products.update' permission."
      operationId: createProductTag
      security: [{ bearerAuth: [] }]
      parameters: [ { $ref: '#/components/parameters/TenantId' } ]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/ProductTagRequest' }
      responses:
        '201':
          description: Tag created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ProductTag' }

  /tenants/{tenantId}/tags/popular:
    get:
      tags: [Product Tags]
      summary: Get most popular tags
      description: "Returns tags ordered by usage count."
      operationId: getPopularTags
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - in: query
          name: limit
          schema: { type: integer, minimum: 1, maximum: 50, default: 10 }
      responses:
        '200':
          description: List of popular tags
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/ProductTag' }

  /tenants/{tenantId}/tags/{tagId}:
    get:
      tags: [Product Tags]
      summary: Get a tag by ID
      operationId: getProductTagById
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/TagId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ProductTag' }
    patch:
      tags: [Product Tags]
      summary: Update a tag
      operationId: updateProductTag
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/TagId'
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/ProductTagRequest' }
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ProductTag' }
    delete:
      tags: [Product Tags]
      summary: Delete a tag
      description: "Removes tag and detaches from all products."
      operationId: deleteProductTag
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/TagId'
      responses:
        '204':
          description: Deleted

  /tenants/{tenantId}/tags/bulk-attach:
    post:
      tags: [Product Tags]
      summary: Attach tags to multiple products
      description: "Bulk operation to attach tags to products."
      operationId: bulkAttachTags
      security: [{ bearerAuth: [] }]
      parameters: [ { $ref: '#/components/parameters/TenantId' } ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [product_ids, tag_ids]
              properties:
                product_ids:
                  type: array
                  items: { type: string, format: uuid }
                  minItems: 1
                tag_ids:
                  type: array
                  items: { type: string, format: uuid }
                  minItems: 1
      responses:
        '200':
          description: Tags attached
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
                  attached_count: { type: integer }

  /tenants/{tenantId}/tags/bulk-detach:
    post:
      tags: [Product Tags]
      summary: Detach tags from multiple products
      description: "Bulk operation to detach tags from products."
      operationId: bulkDetachTags
      security: [{ bearerAuth: [] }]
      parameters: [ { $ref: '#/components/parameters/TenantId' } ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [product_ids, tag_ids]
              properties:
                product_ids:
                  type: array
                  items: { type: string, format: uuid }
                  minItems: 1
                tag_ids:
                  type: array
                  items: { type: string, format: uuid }
                  minItems: 1
      responses:
        '200':
          description: Tags detached
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
                  detached_count: { type: integer }

  # Phase 9: SKU Generation
  /tenants/{tenantId}/sku-patterns:
    get:
      tags: [SKU Generation]
      summary: List predefined SKU patterns
      description: "Returns available SKU generation patterns with placeholders."
      operationId: listSkuPatterns
      security: [{ bearerAuth: [] }]
      parameters: [ { $ref: '#/components/parameters/TenantId' } ]
      responses:
        '200':
          description: List of SKU patterns
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/SkuPattern' }

  /tenants/{tenantId}/generate-sku:
    post:
      tags: [SKU Generation]
      summary: Generate a new SKU
      description: "Generates and saves SKU using pattern. Increments sequence."
      operationId: generateSku
      security: [{ bearerAuth: [] }]
      parameters: [ { $ref: '#/components/parameters/TenantId' } ]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/SkuGenerateRequest' }
      responses:
        '200':
          description: SKU generated
          content:
            application/json:
              schema:
                type: object
                properties:
                  sku: { type: string, example: 'ELEC-0001' }
                  pattern: { type: string }
                  sequence_number: { type: integer }

  /tenants/{tenantId}/preview-sku:
    post:
      tags: [SKU Generation]
      summary: Preview SKU without saving
      description: "Generates SKU preview without incrementing sequence."
      operationId: previewSku
      security: [{ bearerAuth: [] }]
      parameters: [ { $ref: '#/components/parameters/TenantId' } ]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/SkuGenerateRequest' }
      responses:
        '200':
          description: SKU preview
          content:
            application/json:
              schema:
                type: object
                properties:
                  sku: { type: string, example: 'ELEC-0001' }
                  pattern: { type: string }
                  next_sequence_number: { type: integer }

  /tenants/{tenantId}/validate-sku:
    get:
      tags: [SKU Generation]
      summary: Validate SKU availability
      description: "Check if SKU is unique and available."
      operationId: validateSku
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - in: query
          name: sku
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Validation result
          content:
            application/json:
              schema:
                type: object
                properties:
                  is_available: { type: boolean }
                  sku: { type: string }

  # Phase 10: Tenant-Wide Analytics & Reporting
  # Provides business intelligence and insights across all products
  # All endpoints require 'products.view' permission and enforce tenant isolation
  
  /tenants/{tenantId}/analytics/overview:
    get:
      tags: [Tenant Analytics]
      summary: Get tenant-wide analytics overview
      description: "Requires authentication and 'products.view' permission. Returns comprehensive dashboard data including total revenue, products count, average profit margin, and total views."
      operationId: getTenantAnalyticsOverview
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - in: query
          name: period_start
          schema: { type: string, format: date }
          description: "Start date for analytics period (YYYY-MM-DD)"
        - in: query
          name: period_end
          schema: { type: string, format: date }
          description: "End date for analytics period (YYYY-MM-DD)"
      responses:
        '200':
          description: Analytics overview retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data:
                    type: object
                    properties:
                      total_revenue:
                        type: number
                        format: float
                        description: "Total revenue from all products"
                      products_count:
                        type: integer
                        description: "Total number of active products"
                      average_profit_margin:
                        type: number
                        format: float
                        description: "Average profit margin percentage"
                      total_views:
                        type: integer
                        description: "Total product page views"
                      period_start: { type: string, format: date }
                      period_end: { type: string, format: date }
        '403':
          description: Forbidden - missing products.view permission

  /tenants/{tenantId}/analytics/top-products:
    get:
      tags: [Tenant Analytics]
      summary: Get top performing products
      description: "Requires authentication and 'products.view' permission. Returns top products by selected metric (revenue, quantity, profit, or views)."
      operationId: getTenantTopProducts
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - in: query
          name: metric
          schema:
            type: string
            enum: [revenue, quantity, profit, views]
            default: revenue
          description: "Metric to rank products by"
        - in: query
          name: limit
          schema: { type: integer, minimum: 1, maximum: 50, default: 10 }
          description: "Number of top products to return"
        - in: query
          name: period_start
          schema: { type: string, format: date }
        - in: query
          name: period_end
          schema: { type: string, format: date }
      responses:
        '200':
          description: Top products retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        product_id: { type: string, format: uuid }
                        product_name: { type: string }
                        sku: { type: string }
                        metric_value: { type: number, format: float }
                        revenue: { type: number, format: float }
                        quantity_sold: { type: integer }
                        profit: { type: number, format: float }
                        profit_margin: { type: number, format: float }
                        views: { type: integer }
        '403':
          description: Forbidden - missing products.view permission

  /tenants/{tenantId}/analytics/revenue-breakdown:
    get:
      tags: [Tenant Analytics]
      summary: Get revenue breakdown by product
      description: "Requires authentication and 'products.view' permission. Returns revenue distribution across products for pie/donut charts."
      operationId: getTenantRevenueBreakdown
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - in: query
          name: limit
          schema: { type: integer, minimum: 1, maximum: 50, default: 10 }
        - in: query
          name: period_start
          schema: { type: string, format: date }
        - in: query
          name: period_end
          schema: { type: string, format: date }
      responses:
        '200':
          description: Revenue breakdown retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        product_id: { type: string, format: uuid }
                        product_name: { type: string }
                        revenue: { type: number, format: float }
                        percentage: { type: number, format: float }
        '403':
          description: Forbidden - missing products.view permission

  /tenants/{tenantId}/analytics/profit-analysis:
    get:
      tags: [Tenant Analytics]
      summary: Get profit analysis by product
      description: "Requires authentication and 'products.view' permission. Returns profit margins and analysis for products."
      operationId: getTenantProfitAnalysis
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - in: query
          name: limit
          schema: { type: integer, minimum: 1, maximum: 50, default: 10 }
        - in: query
          name: period_start
          schema: { type: string, format: date }
        - in: query
          name: period_end
          schema: { type: string, format: date }
      responses:
        '200':
          description: Profit analysis retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        product_id: { type: string, format: uuid }
                        product_name: { type: string }
                        revenue: { type: number, format: float }
                        cost: { type: number, format: float }
                        profit: { type: number, format: float }
                        profit_margin: { type: number, format: float }
                        quantity_sold: { type: integer }
        '403':
          description: Forbidden - missing products.view permission

  /tenants/{tenantId}/analytics/category-performance:
    get:
      tags: [Tenant Analytics]
      summary: Get performance breakdown by category
      description: "Requires authentication and 'products.view' permission. Returns aggregated metrics per product category."
      operationId: getTenantCategoryPerformance
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - in: query
          name: period_start
          schema: { type: string, format: date }
        - in: query
          name: period_end
          schema: { type: string, format: date }
      responses:
        '200':
          description: Category performance retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        category_id: { type: string, format: uuid }
                        category_name: { type: string }
                        products_count: { type: integer }
                        total_revenue: { type: number, format: float }
                        total_profit: { type: number, format: float }
                        average_profit_margin: { type: number, format: float }
                        total_quantity_sold: { type: integer }
        '403':
          description: Forbidden - missing products.view permission

  /tenants/{tenantId}/analytics/most-viewed:
    get:
      tags: [Tenant Analytics]
      summary: Get most viewed products
      description: "Requires authentication and 'products.view' permission. Returns products sorted by view count."
      operationId: getTenantMostViewedProducts
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - in: query
          name: limit
          schema: { type: integer, minimum: 1, maximum: 50, default: 10 }
        - in: query
          name: period_start
          schema: { type: string, format: date }
        - in: query
          name: period_end
          schema: { type: string, format: date }
      responses:
        '200':
          description: Most viewed products retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        product_id: { type: string, format: uuid }
                        product_name: { type: string }
                        sku: { type: string }
                        view_count: { type: integer }
                        unique_viewers: { type: integer }
                        last_viewed_at: { type: string, format: date-time }
        '403':
          description: Forbidden - missing products.view permission

  /tenants/{tenantId}/analytics/search-terms:
    get:
      tags: [Tenant Analytics]
      summary: Get popular search terms
      description: "Requires authentication and 'products.view' permission. Returns most frequently searched terms."
      operationId: getTenantSearchTerms
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - in: query
          name: limit
          schema: { type: integer, minimum: 1, maximum: 50, default: 10 }
        - in: query
          name: period_start
          schema: { type: string, format: date }
        - in: query
          name: period_end
          schema: { type: string, format: date }
      responses:
        '200':
          description: Search terms retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        search_term: { type: string }
                        search_count: { type: integer }
                        average_results: { type: number, format: float }
                        zero_results_count: { type: integer }
        '403':
          description: Forbidden - missing products.view permission

  /tenants/{tenantId}/analytics/search-trends:
    get:
      tags: [Tenant Analytics]
      summary: Get search trends over time
      description: "Requires authentication and 'products.view' permission. Returns search activity aggregated by time period."
      operationId: getTenantSearchTrends
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - in: query
          name: group_by
          schema:
            type: string
            enum: [hour, day, week, month]
            default: day
        - in: query
          name: period_start
          schema: { type: string, format: date }
        - in: query
          name: period_end
          schema: { type: string, format: date }
      responses:
        '200':
          description: Search trends retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        period: { type: string }
                        search_count: { type: integer }
                        unique_terms: { type: integer }
                        zero_results_percentage: { type: number, format: float }
        '403':
          description: Forbidden - missing products.view permission

  /tenants/{tenantId}/analytics/search-stats:
    get:
      tags: [Tenant Analytics]
      summary: Get search statistics summary
      description: "Requires authentication and 'products.view' permission. Returns aggregated search metrics."
      operationId: getTenantSearchStats
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - in: query
          name: period_start
          schema: { type: string, format: date }
        - in: query
          name: period_end
          schema: { type: string, format: date }
      responses:
        '200':
          description: Search stats retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data:
                    type: object
                    properties:
                      total_searches: { type: integer }
                      unique_terms: { type: integer }
                      average_results_per_search: { type: number, format: float }
                      zero_results_count: { type: integer }
                      zero_results_percentage: { type: number, format: float }
        '403':
          description: Forbidden - missing products.view permission

  /tenants/{tenantId}/analytics/zero-result-searches:
    get:
      tags: [Tenant Analytics]
      summary: Get searches with zero results
      description: "Requires authentication and 'products.view' permission. Returns search terms that returned no products (useful for product gap analysis)."
      operationId: getTenantZeroResultSearches
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - in: query
          name: limit
          schema: { type: integer, minimum: 1, maximum: 50, default: 10 }
        - in: query
          name: period_start
          schema: { type: string, format: date }
        - in: query
          name: period_end
          schema: { type: string, format: date }
      responses:
        '200':
          description: Zero result searches retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        search_term: { type: string }
                        search_count: { type: integer }
                        last_searched_at: { type: string, format: date-time }
        '403':
          description: Forbidden - missing products.view permission

  /tenants/{tenantId}/analytics/track-search:
    post:
      tags: [Tenant Analytics]
      summary: Track a product search query
      description: "Public/authenticated endpoint. Logs search queries for analytics. Can be called without authentication for anonymous tracking."
      operationId: trackProductSearch
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [search_term, results_count]
              properties:
                search_term:
                  type: string
                  maxLength: 255
                  description: "The search query entered by user"
                results_count:
                  type: integer
                  minimum: 0
                  description: "Number of products returned"
      responses:
        '201':
          description: Search tracked successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  message: { type: string }
        '422':
          description: Validation error

  # Product View Tracking Endpoints
  /tenants/{tenantId}/products/{productId}/track-view:
    post:
      tags: [Tenant Analytics]
      summary: Track a product page view
      description: "Public/authenticated endpoint. Logs product views for analytics. Can be called without authentication for anonymous tracking."
      operationId: trackProductView
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/ProductId'
      responses:
        '201':
          description: View tracked successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  message: { type: string }
        '404':
          description: Product not found

  /tenants/{tenantId}/products/{productId}/view-stats:
    get:
      tags: [Tenant Analytics]
      summary: Get view statistics for a product
      description: "Requires authentication and 'products.view' permission. Returns view metrics for a specific product."
      operationId: getProductViewStats
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/ProductId'
        - in: query
          name: period_start
          schema: { type: string, format: date }
        - in: query
          name: period_end
          schema: { type: string, format: date }
      responses:
        '200':
          description: View stats retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data:
                    type: object
                    properties:
                      total_views: { type: integer }
                      unique_viewers: { type: integer }
                      authenticated_views: { type: integer }
                      anonymous_views: { type: integer }
                      average_views_per_day: { type: number, format: float }
        '403':
          description: Forbidden - missing products.view permission
        '404':
          description: Product not found

  /tenants/{tenantId}/products/{productId}/view-trends:
    get:
      tags: [Tenant Analytics]
      summary: Get view trends over time for a product
      description: "Requires authentication and 'products.view' permission. Returns view activity aggregated by time period."
      operationId: getProductViewTrends
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/ProductId'
        - in: query
          name: group_by
          schema:
            type: string
            enum: [hour, day, week, month]
            default: day
        - in: query
          name: period_start
          schema: { type: string, format: date }
        - in: query
          name: period_end
          schema: { type: string, format: date }
      responses:
        '200':
          description: View trends retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        period: { type: string }
                        view_count: { type: integer }
                        unique_viewers: { type: integer }
        '403':
          description: Forbidden - missing products.view permission
        '404':
          description: Product not found

  /tenants/{tenantId}/roles:
    get:
      tags: [Roles & Permissions]
      summary: List roles for a tenant (including global)
      operationId: listRoles
      security: [{ bearerAuth: [] }]
      parameters: [ { $ref: '#/components/parameters/TenantId' } ]
      responses:
        '200':
          description: A list of roles
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Role' }
    post:
      tags: [Roles & Permissions]
      summary: Create a role
      operationId: createRole
      security: [{ bearerAuth: [] }]
      parameters: [ { $ref: '#/components/parameters/TenantId' } ]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/RoleRequest' }
      responses:
        '201':
          description: Role created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Role' }

  /tenants/{tenantId}/roles/{roleId}:
    get:
      tags: [Roles & Permissions]
      summary: Get role by ID
      operationId: getRoleById
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/RoleId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Role' }
    put:
      tags: [Roles & Permissions]
      summary: Update role
      operationId: updateRole
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/RoleId'
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/RoleRequest' }
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Role' }
    delete:
      tags: [Roles & Permissions]
      summary: Delete role
      operationId: deleteRole
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/RoleId'
      responses:
        '204':
          description: Deleted

  /tenants/{tenantId}/permissions:
    get:
      tags: [Roles & Permissions]
      summary: List available permissions (API guard)
      operationId: listPermissions
      security: [{ bearerAuth: [] }]
      parameters: [ { $ref: '#/components/parameters/TenantId' } ]
      responses:
        '200':
          description: A list of permissions
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Permission' }

  /tenants/{tenantId}/orders:
    get:
      tags: [Sales]
      summary: List orders for a tenant
      description: "Requires authentication and 'orders.view' permission within the tenant scope."
      operationId: listOrders
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - in: query
          name: per_page
          schema: { type: integer, minimum: 1, maximum: 100 }
        - in: query
          name: page
          schema: { type: integer, minimum: 1 }
      responses:
        '200':
          description: A paginated list of orders
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/Order' }
                  current_page: { type: integer }
                  last_page: { type: integer }
                  per_page: { type: integer }
                  total: { type: integer }
    post:
      tags: [Sales]
      summary: Create an order
      description: "Requires authentication and 'orders.create' permission within the tenant scope. Validates stock availability before order creation."
      operationId: createOrder
      security: [{ bearerAuth: [] }]
      parameters: [ { $ref: '#/components/parameters/TenantId' } ]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/OrderRequest' }
      responses:
        '201':
          description: Order created successfully
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Order' }

  /tenants/{tenantId}/orders/{orderId}:
    get:
      tags: [Sales]
      summary: Get order by ID
      operationId: getOrderById
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/OrderId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Order' }
    put:
      tags: [Sales]
      summary: Update order
      operationId: updateOrder
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/OrderId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                payment_method:
                  type: string
                  enum: [cash, card, qris]
                amount_paid:
                  type: number
                  format: float
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Order' }
    delete:
      tags: [Sales]
      summary: Delete order
      operationId: deleteOrder
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/OrderId'
      responses:
        '204':
          description: Deleted

  /tenants/{tenantId}/customers:
    get:
      tags: [Customers]
      summary: List customers for a tenant
      description: "Requires authentication and 'customers.view' permission within the tenant scope. Supports search with 'q' parameter."
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - in: query
          name: q
          schema: { type: string }
          description: Search by name, email, or phone
        - in: query
          name: page
          schema: { type: integer, minimum: 1 }
        - in: query
          name: per_page
          schema: { type: integer, minimum: 1, maximum: 100 }
      responses:
        '200':
          description: A paginated list of customers
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/Customer' }
                  current_page: { type: integer }
                  last_page: { type: integer }
                  per_page: { type: integer }
                  total: { type: integer }
    post:
      tags: [Customers]
      summary: Create a customer
      security: [{ bearerAuth: [] }]
      parameters: [ { $ref: '#/components/parameters/TenantId' } ]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/CustomerRequest' }
      responses:
        '201':
          description: Customer created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Customer' }

  /tenants/{tenantId}/customers/search:
    post:
      tags: [Customers]
      summary: Search customers with POST (avoids URL query exposure)
      security: [{ bearerAuth: [] }]
      parameters: [ { $ref: '#/components/parameters/TenantId' } ]
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                q: { type: string }
                page: { type: integer, minimum: 1 }
                per_page: { type: integer, minimum: 1, maximum: 100 }
      responses:
        '200':
          description: A paginated list of customers
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/Customer' }
                  current_page: { type: integer }
                  last_page: { type: integer }
                  per_page: { type: integer }
                  total: { type: integer }

  /tenants/{tenantId}/customers/{id}:
    get:
      tags: [Customers]
      summary: Get customer by ID
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Customer' }
    patch:
      tags: [Customers]
      summary: Update customer
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/CustomerRequest' }
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Customer' }
    delete:
      tags: [Customers]
      summary: Delete customer
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      responses:
        '204':
          description: Deleted

  /tenants/{tenantId}/users:
    get:
      tags: [Users]
      summary: List users within a tenant
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - in: query
          name: q
          schema: { type: string }
          description: Search by name or email
        - in: query
          name: per_page
          schema: { type: integer }
      responses:
        '200':
          description: Paginated users
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/User' }
                  current_page: { type: integer }
                  last_page: { type: integer }
                  per_page: { type: integer }
                  total: { type: integer }
    post:
      tags: [Users]
      summary: Create a user in tenant
      security: [{ bearerAuth: [] }]
      parameters: [ { $ref: '#/components/parameters/TenantId' } ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name, email, password]
              properties:
                name: { type: string }
                email: { type: string, format: email }
                password: { type: string, format: password }
                display_name: { type: string, nullable: true }
                status: { type: string, enum: [active, inactive, pending, banned], nullable: true }
                photo: { type: string, nullable: true }
                phone_number: { type: string, nullable: true }
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/User' }

  /tenants/{tenantId}/users/{userId}:
    get:
      tags: [Users]
      summary: Get user by ID
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/UserId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/User' }
    patch:
      tags: [Users]
      summary: Update user
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/UserId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name: { type: string }
                display_name: { type: string, nullable: true }
                email: { type: string, format: email }
                status: { type: string, enum: [active, inactive, pending, banned], nullable: true }
                photo: { type: string, nullable: true }
                phone_number: { type: string, nullable: true }
                password: { type: string, format: password, nullable: true }
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema: { $ref: '#/components/schemas/User' }
    delete:
      tags: [Users]
      summary: Delete user
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/UserId'
      responses:
        '200':
          description: Deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }

  /tenants/{tenantId}/uploads/user-photo:
    post:
      tags: [Users]
      summary: Upload a user photo (creates a thumbnail)
      security: [{ bearerAuth: [] }]
      parameters: [ { $ref: '#/components/parameters/TenantId' } ]
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required: [file]
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '201':
          description: Uploaded
          content:
            application/json:
              schema:
                type: object
                properties:
                  url: { type: string }
                  thumb_url: { type: string, nullable: true }
                  path: { type: string }

  /tenants/{tenantId}/users/{userId}/roles:
    post:
      tags: [Users]
      summary: Update user roles within tenant scope
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/UserId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                roles:
                  type: array
                  items: { type: string }
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }

  /tenants/{tenantId}/settings:
    get:
      tags: [Settings]
      summary: Get tenant settings
      security: [{ bearerAuth: [] }]
      parameters: [ { $ref: '#/components/parameters/TenantId' } ]
      responses:
        '200':
          description: Settings
          content:
            application/json:
              schema: { $ref: '#/components/schemas/TenantSettings' }
    patch:
      tags: [Settings]
      summary: Update tenant settings
      security: [{ bearerAuth: [] }]
      parameters: [ { $ref: '#/components/parameters/TenantId' } ]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/TenantSettingsUpdate' }
      responses:
        '200':
          description: Updated settings
          content:
            application/json:
              schema: { $ref: '#/components/schemas/TenantSettings' }

  /tenants/{tenantId}/stock-adjustments:
    post:
      tags: [Inventory]
      summary: Create a new stock adjustment
      operationId: createStockAdjustment
      security: [{ bearerAuth: [] }]
      parameters: [ { $ref: '#/components/parameters/TenantId' } ]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/StockAdjustmentRequest' }
      responses:
        '201':
          description: Stock adjustment recorded
          content:
            application/json:
              schema: { $ref: '#/components/schemas/StockAdjustment' }

  /tenants/{tenantId}/stock-adjustments/reasons:
    get:
      tags: [Inventory]
      summary: Get predefined stock adjustment reasons
      description: "Returns list of standard reasons for stock adjustments. Requires products.view permission."
      operationId: getAdjustmentReasons
      security: [{ bearerAuth: [] }]
      parameters: [ { $ref: '#/components/parameters/TenantId' } ]
      responses:
        '200':
          description: List of adjustment reasons
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/AdjustmentReason' }
                  meta:
                    type: object
                    properties:
                      total: { type: integer }
                      types: { type: array, items: { type: string } }

  /tenants/{tenantId}/stock-alerts:
    get:
      tags: [Inventory]
      summary: List all stock alerts for tenant
      description: "Returns paginated list of stock alerts with filtering options. Requires products.view permission."
      operationId: listStockAlerts
      security: [{ bearerAuth: [] }]
      parameters:
        - { $ref: '#/components/parameters/TenantId' }
        - name: status
          in: query
          schema:
            type: string
            enum: [pending, acknowledged, resolved, dismissed]
          description: Filter by alert status
        - name: severity
          in: query
          schema:
            type: string
            enum: [low, critical, out_of_stock]
          description: Filter by severity level
        - name: product_id
          in: query
          schema:
            type: string
            format: uuid
          description: Filter by specific product
        - name: actionable_only
          in: query
          schema:
            type: boolean
          description: Show only actionable alerts (pending + acknowledged)
        - name: per_page
          in: query
          schema:
            type: integer
            default: 20
            maximum: 100
        - name: sort_by
          in: query
          schema:
            type: string
            enum: [created_at, current_stock, severity, status]
            default: created_at
        - name: sort_order
          in: query
          schema:
            type: string
            enum: [asc, desc]
            default: desc
      responses:
        '200':
          description: List of stock alerts
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/StockAlert' }
                  pagination: { $ref: '#/components/schemas/Pagination' }

  /tenants/{tenantId}/stock-alerts/stats:
    get:
      tags: [Inventory]
      summary: Get stock alert statistics
      description: "Returns counts and metrics for dashboard display. Requires products.view permission."
      operationId: getStockAlertStats
      security: [{ bearerAuth: [] }]
      parameters: [ { $ref: '#/components/parameters/TenantId' } ]
      responses:
        '200':
          description: Alert statistics
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { $ref: '#/components/schemas/StockAlertStats' }

  /tenants/{tenantId}/stock-alerts/low-stock-products:
    get:
      tags: [Inventory]
      summary: Get products with low stock levels
      description: "Returns paginated list of products with low stock. Requires products.view permission."
      operationId: getLowStockProducts
      security: [{ bearerAuth: [] }]
      parameters:
        - { $ref: '#/components/parameters/TenantId' }
        - name: severity
          in: query
          schema:
            type: string
            enum: [critical, out_of_stock]
          description: Filter by severity level
        - name: per_page
          in: query
          schema:
            type: integer
            default: 20
            maximum: 100
        - name: sort_by
          in: query
          schema:
            type: string
            enum: [stock, name, reorder_point, updated_at]
            default: stock
        - name: sort_order
          in: query
          schema:
            type: string
            enum: [asc, desc]
            default: asc
      responses:
        '200':
          description: List of low stock products
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/LowStockProduct' }
                  pagination: { $ref: '#/components/schemas/Pagination' }
                  summary: { $ref: '#/components/schemas/LowStockSummary' }

  /tenants/{tenantId}/stock-alerts/{alertId}/acknowledge:
    post:
      tags: [Inventory]
      summary: Acknowledge a stock alert
      description: "Marks alert as seen/acknowledged. Requires products.view permission."
      operationId: acknowledgeStockAlert
      security: [{ bearerAuth: [] }]
      parameters:
        - { $ref: '#/components/parameters/TenantId' }
        - { $ref: '#/components/parameters/AlertId' }
      responses:
        '200':
          description: Alert acknowledged successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
                  data: { $ref: '#/components/schemas/StockAlertAction' }

  /tenants/{tenantId}/stock-alerts/{alertId}/resolve:
    post:
      tags: [Inventory]
      summary: Resolve a stock alert
      description: "Marks alert as resolved (stock replenished). Requires inventory.adjust permission."
      operationId: resolveStockAlert
      security: [{ bearerAuth: [] }]
      parameters:
        - { $ref: '#/components/parameters/TenantId' }
        - { $ref: '#/components/parameters/AlertId' }
      responses:
        '200':
          description: Alert resolved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
                  data: { $ref: '#/components/schemas/StockAlertAction' }

  /tenants/{tenantId}/stock-alerts/{alertId}/dismiss:
    post:
      tags: [Inventory]
      summary: Dismiss a stock alert
      description: "Marks alert as dismissed (false positive). Requires products.view permission."
      operationId: dismissStockAlert
      security: [{ bearerAuth: [] }]
      parameters:
        - { $ref: '#/components/parameters/TenantId' }
        - { $ref: '#/components/parameters/AlertId' }
      responses:
        '200':
          description: Alert dismissed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
                  data:
                    type: object
                    properties:
                      id: { type: string, format: uuid }
                      status: { type: string }
                      updated_at: { type: string, format: date-time }

  # ========== PRODUCT VARIANTS ==========
  /tenants/{tenantId}/products/{productId}/variants:
    get:
      tags: [Product Variants]
      summary: List variants for a product
      operationId: listProductVariants
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/ProductId'
        - in: query
          name: per_page
          schema:
            type: integer
            default: 50
            minimum: 1
            maximum: 500
        - in: query
          name: search
          schema:
            type: string
          description: Search in SKU and name
        - in: query
          name: is_active
          schema:
            type: boolean
        - in: query
          name: sort_by
          schema:
            type: string
            default: sort_order
            enum: [sort_order, sku, name, price, stock, created_at]
        - in: query
          name: sort_order
          schema:
            type: string
            default: asc
            enum: [asc, desc]
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ProductVariant'
                  current_page:
                    type: integer
                  last_page:
                    type: integer
                  per_page:
                    type: integer
                  total:
                    type: integer
        '403':
          description: Forbidden - Insufficient permissions
        '404':
          description: Product not found

    post:
      tags: [Product Variants]
      summary: Create a new variant
      operationId: createProductVariant
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/ProductId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductVariantInput'
      responses:
        '201':
          description: Variant created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  data:
                    $ref: '#/components/schemas/ProductVariant'
        '422':
          description: Validation error

  /tenants/{tenantId}/products/{productId}/variants/bulk:
    post:
      tags: [Product Variants]
      summary: Create multiple variants
      description: Create up to 500 variants at once
      operationId: bulkCreateProductVariants
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/ProductId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                variants:
                  type: array
                  minItems: 1
                  maxItems: 500
                  items:
                    $ref: '#/components/schemas/ProductVariantInput'
      responses:
        '201':
          description: Variants created
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  success_count:
                    type: integer
                  error_count:
                    type: integer
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        index:
                          type: integer
                        sku:
                          type: string
                        message:
                          type: string

    patch:
      tags: [Product Variants]
      summary: Update multiple variants
      operationId: bulkUpdateProductVariants
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/ProductId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                variant_ids:
                  type: array
                  items:
                    type: string
                    format: uuid
                updates:
                  type: object
      responses:
        '200':
          description: Variants updated

    delete:
      tags: [Product Variants]
      summary: Delete multiple variants
      operationId: bulkDeleteProductVariants
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/ProductId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                variant_ids:
                  type: array
                  items:
                    type: string
                    format: uuid
      responses:
        '200':
          description: Variants deleted

  /tenants/{tenantId}/products/{productId}/variants/{variantId}:
    get:
      tags: [Product Variants]
      summary: Get a single variant
      operationId: getProductVariant
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/ProductId'
        - $ref: '#/components/parameters/VariantId'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ProductVariant'

    patch:
      tags: [Product Variants]
      summary: Update a variant
      operationId: updateProductVariant
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/ProductId'
        - $ref: '#/components/parameters/VariantId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductVariantInput'
      responses:
        '200':
          description: Variant updated

    delete:
      tags: [Product Variants]
      summary: Delete a variant (soft delete)
      operationId: deleteProductVariant
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/ProductId'
        - $ref: '#/components/parameters/VariantId'
      responses:
        '200':
          description: Variant deleted

  # ========== VARIANT ANALYTICS ==========
  /tenants/{tenantId}/products/{productId}/variants/analytics:
    get:
      tags: [Product Variants, Analytics]
      summary: Get analytics for all variants of a product
      description: |
        Returns aggregated analytics data for all variants of a specific product.
        Supports filtering by period type (daily, weekly, monthly) and date range.
        **Required Permission:** `products.view`
      operationId: getProductVariantsAnalytics
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/ProductId'
        - in: query
          name: period_type
          schema:
            type: string
            enum: [daily, weekly, monthly]
            default: daily
          description: Type of period aggregation
        - in: query
          name: period_start
          schema:
            type: string
            format: date
          description: Start date for analytics range (YYYY-MM-DD)
        - in: query
          name: period_end
          schema:
            type: string
            format: date
          description: End date for analytics range (YYYY-MM-DD)
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  product:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                      name:
                        type: string
                      variant_count:
                        type: integer
                  period_type:
                    type: string
                    enum: [daily, weekly, monthly]
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        variant:
                          $ref: '#/components/schemas/ProductVariant'
                        analytics:
                          type: array
                          items:
                            $ref: '#/components/schemas/VariantAnalytics'
                        summary:
                          type: object
                          properties:
                            total_revenue:
                              type: number
                              format: float
                            total_orders:
                              type: integer
                            total_quantity_sold:
                              type: integer
                            total_profit:
                              type: number
                              format: float
                  overall_summary:
                    type: object
                    properties:
                      total_revenue:
                        type: number
                        format: float
                      total_orders:
                        type: integer
                      total_quantity_sold:
                        type: integer
                      total_profit:
                        type: number
                        format: float
                      avg_conversion_rate:
                        type: number
                        format: float
        '403':
          description: Forbidden - Insufficient permissions
        '404':
          description: Product not found

  /tenants/{tenantId}/products/{productId}/variants/{variantId}/analytics:
    get:
      tags: [Product Variants, Analytics]
      summary: Get analytics for a specific variant
      description: |
        Returns time-series analytics data for a single product variant.
        Includes revenue, orders, stock movements, and performance metrics.
        **Required Permission:** `products.view`
      operationId: getProductVariantAnalytics
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/ProductId'
        - $ref: '#/components/parameters/VariantId'
        - in: query
          name: period_type
          schema:
            type: string
            enum: [daily, weekly, monthly]
            default: daily
          description: Type of period aggregation
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 365
            default: 30
          description: Number of periods to return
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  variant:
                    $ref: '#/components/schemas/ProductVariant'
                  analytics:
                    type: array
                    items:
                      $ref: '#/components/schemas/VariantAnalytics'
                  summary:
                    type: object
                    properties:
                      total_revenue:
                        type: number
                        format: float
                      total_orders:
                        type: integer
                      total_quantity_sold:
                        type: integer
                      total_profit:
                        type: number
                        format: fopenapi: 3.0.3
info:
  title: Canvastack POSMID API
  description: |-
    API Specification for the Canvastack Point of Sale Multi-tenant ID (POSMID) system.
    This API is designed to be backend-agnostic, following a decoupled, API-First approach.
  version: 1.0.0

servers:
  - url: http://localhost:9000/api/v1
    description: Local Development Server

paths:
  /register:
    post:
      tags: [Authentication]
      summary: Register a new Tenant and User
      description: "Public endpoint - no authentication required. Creates new tenant and admin user."
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: Registration successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '422':
          description: Validation error

  /login:
    post:
      tags: [Authentication]
      summary: Log in a user
      description: "Public endpoint - no authentication required. Returns Bearer token for authenticated requests."
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Unauthorized

  /logout:
    post:
      tags: [Authentication]
      summary: Log out the current user
      operationId: logoutUser
      security: [{ bearerAuth: [] }]
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Logged out successfully

  /user:
    get:
      tags: [Authentication]
      summary: Get current authenticated user's information
      description: "Requires valid Bearer token authentication."
      operationId: getCurrentUser
      security: [{ bearerAuth: [] }]
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  # Tenants management (HQ/Admin scope)
  /tenants:
    get:
      tags: [Tenants]
      summary: List tenants (visibility per policy)
      description: "Requires authentication. Visibility: Super Admin/HQ users with 'tenants.view' can see all tenants, others see only their own tenant."
      operationId: listTenants
      security: [{ bearerAuth: [] }]
      parameters:
        - in: query
          name: per_page
          schema: { type: integer }
        - in: query
          name: page
          schema: { type: integer }
      responses:
        '200':
          description: Paginated tenants
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/Tenant' }
                  current_page: { type: integer }
                  last_page: { type: integer }
                  per_page: { type: integer }
                  total: { type: integer }
    post:
      tags: [Tenants]
      summary: Create a tenant
      operationId: createTenant
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TenantCreateRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tenant'

  /tenants/{tenantId}:
    get:
      tags: [Tenants]
      summary: Get tenant by ID
      operationId: getTenant
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Tenant' }
    patch:
      tags: [Tenants]
      summary: Update tenant
      operationId: updateTenant
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TenantUpdateRequest'
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Tenant' }
    delete:
      tags: [Tenants]
      summary: Delete tenant
      operationId: deleteTenant
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
      responses:
        '200':
          description: Deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }

  /tenants/{tenantId}/status:
    post:
      tags: [Tenants]
      summary: Set tenant status
      operationId: setTenantStatus
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [status]
              properties:
                status:
                  type: string
                  enum: [active, inactive, pending, banned]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Tenant' }

  /tenants/{tenantId}/auto-activation/request:
    post:
      tags: [Tenants]
      summary: Request auto-activation for tenant users
      security: [{ bearerAuth: [] }]
      parameters: [ { $ref: '#/components/parameters/TenantId' } ]
      responses:
        '200':
          description: Submitted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }

  /tenants/{tenantId}/auto-activation/approve:
    post:
      tags: [Tenants]
      summary: Approve auto-activation
      security: [{ bearerAuth: [] }]
      parameters: [ { $ref: '#/components/parameters/TenantId' } ]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Tenant' }

  /tenants/{tenantId}/auto-activation/reject:
    post:
      tags: [Tenants]
      summary: Reject auto-activation
      security: [{ bearerAuth: [] }]
      parameters: [ { $ref: '#/components/parameters/TenantId' } ]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Tenant' }

  /tenants/{tenantId}/users/{userId}/status:
    post:
      tags: [Tenants]
      summary: Set status of a tenant user
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/UserId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [status]
              properties:
                status:
                  type: string
                  enum: [active, inactive, pending, banned]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }

  # Tenant-scoped routes (team context)
  /tenants/{tenantId}/dashboard:
    get:
      tags: [Dashboard]
      summary: Get dashboard summary for a tenant
      operationId: getDashboard
      security: [{ bearerAuth: [] }]
      parameters: [ { $ref: '#/components/parameters/TenantId' } ]
      responses:
        '200':
          description: Dashboard summary
          content:
            application/json:
              schema:
                type: object
                properties:
                  today_revenue: { type: number, format: double }
                  today_transactions: { type: integer }
                  low_stock_products: { type: integer }
                  low_stock_alerts:
                    type: array
                    items:
                      type: object
                      properties:
                        id: { type: string, format: uuid }
                        name: { type: string }
                        stock: { type: integer }
                        sku: { type: string }

  /tenants/{tenantId}/public/settings:
    get:
      tags: [Public]
      summary: Get public tenant settings
      description: Public endpoint - returns tenant.settings.public as-is.
      operationId: getPublicSettings
      parameters:
        - $ref: '#/components/parameters/TenantId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/PublicSettings' }

  /tenants/{tenantId}/public/products:
    get:
      tags: [Public]
      summary: List published products (public)
      description: Returns only published products; default minStock=1; optional search by q.
      operationId: listPublicProducts
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - in: query
          name: q
          schema: { type: string }
        - in: query
          name: minStock
          schema: { type: integer, minimum: 0 }
          description: Minimum stock to include (default 1)
        - in: query
          name: limit
          schema: { type: integer, minimum: 1, maximum: 100 }
        - in: query
          name: page
          schema: { type: integer, minimum: 1 }
      responses:
        '200':
          description: Paginated published products
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/PublicProduct' }
                  current_page: { type: integer }
                  last_page: { type: integer }
                  per_page: { type: integer }
                  total: { type: integer }

  /tenants/{tenantId}/public/products/{productId}:
    get:
      tags: [Public]
      summary: Get a published product by ID (public)
      operationId: getPublicProduct
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/ProductId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/PublicProduct' }
        '404':
          description: Not found

  /tenants/{tenantId}/products:
    get:
      tags: [Products]
      summary: List all products for a tenant
      description: "Requires authentication and 'products.view' permission within the tenant scope. Supports advanced filtering by date ranges, status, category, price range, and stock level."
      operationId: listProducts
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - in: query
          name: per_page
          schema: { type: integer, minimum: 1, maximum: 100 }
        - in: query
          name: page
          schema: { type: integer, minimum: 1 }
        - in: query
          name: search
          description: "Search in product name, SKU, or description"
          schema: { type: string }
        - in: query
          name: category_id
          description: "Filter by category UUID"
          schema: { type: string, format: uuid }
        - in: query
          name: sort_by
          description: "Sort field"
          schema: { type: string, enum: [name, sku, price, stock, created_at, updated_at] }
        - in: query
          name: sort_order
          description: "Sort direction"
          schema: { type: string, enum: [asc, desc], default: desc }
        - in: query
          name: stock_filter
          description: "Filter by stock level"
          schema: { type: string, enum: [all, in_stock, low_stock, out_of_stock], default: all }
        - in: query
          name: min_price
          description: "Minimum price filter"
          schema: { type: number, format: float }
        - in: query
          name: max_price
          description: "Maximum price filter"
          schema: { type: number, format: float }
        - in: query
          name: created_from
          description: "Filter products created from this date (YYYY-MM-DD)"
          schema: { type: string, format: date }
        - in: query
          name: created_to
          description: "Filter products created until this date (YYYY-MM-DD)"
          schema: { type: string, format: date }
        - in: query
          name: updated_from
          description: "Filter products updated from this date (YYYY-MM-DD)"
          schema: { type: string, format: date }
        - in: query
          name: updated_to
          description: "Filter products updated until this date (YYYY-MM-DD)"
          schema: { type: string, format: date }
        - in: query
          name: statuses
          description: "Filter by multiple statuses (comma-separated: active,draft,discontinued)"
          schema: { type: string }
        - in: query
          name: include_archived
          description: "Phase 11: Include archived (soft-deleted) products in results"
          schema: { type: boolean, default: false }
        - in: query
          name: only_archived
          description: "Phase 11: Show only archived (soft-deleted) products"
          schema: { type: boolean, default: false }
      responses:
        '200':
          description: A paginated list of products
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/Product' }
                  current_page: { type: integer }
                  last_page: { type: integer }
                  per_page: { type: integer }
                  total: { type: integer }
    post:
      tags: [Products]
      summary: Create a new product
      description: "Requires authentication and 'products.create' permission within the tenant scope."
      operationId: createProduct
      security: [{ bearerAuth: [] }]
      parameters: [ { $ref: '#/components/parameters/TenantId' } ]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/ProductRequest' }
      responses:
        '201':
          description: Product created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Product' }

  /tenants/{tenantId}/products/{productId}:
    get:
      tags: [Products]
      summary: Get a single product by ID
      operationId: getProductById
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/ProductId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Product' }
    put:
      tags: [Products]
      summary: Update an existing product
      operationId: updateProduct
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/ProductId'
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/ProductRequest' }
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Product' }
    delete:
      tags: [Products]
      summary: Delete a product
      operationId: deleteProduct
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/ProductId'
      responses:
        '204':
          description: Deleted

  # Phase 11: Archive & Soft Delete
  /tenants/{tenantId}/products/{productId}/archive:
    patch:
      tags: [Products]
      summary: Archive a product (soft delete)
      description: "Phase 11: Requires authentication and 'products.delete' permission. Soft deletes the product by setting deleted_at timestamp. Product will be excluded from default queries but can be restored."
      operationId: archiveProduct
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/ProductId'
      responses:
        '200':
          description: Product archived successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string, example: 'Product archived successfully' }
                  data: { $ref: '#/components/schemas/Product' }
        '403':
          description: Forbidden - missing products.delete permission
        '404':
          description: Product not found or not in tenant scope

  /tenants/{tenantId}/products/{productId}/restore:
    patch:
      tags: [Products]
      summary: Restore an archived product
      description: "Phase 11: Requires authentication and 'products.restore' permission. Restores a soft-deleted product by clearing deleted_at timestamp. Product will be visible in default queries again."
      operationId: restoreProduct
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/ProductId'
      responses:
        '200':
          description: Product restored successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string, example: 'Product restored successfully' }
                  data: { $ref: '#/components/schemas/Product' }
        '403':
          description: Forbidden - missing products.restore permission
        '404':
          description: Product not found in archived products or not in tenant scope

  /tenants/{tenantId}/products/{productId}/permanent:
    delete:
      tags: [Products]
      summary: Permanently delete an archived product
      description: "Phase 11: Requires authentication and 'products.delete.permanent' permission (admin-only). Permanently removes an archived product from the database. This action cannot be undone. Only archived products can be permanently deleted."
      operationId: forceDeleteProduct
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/ProductId'
      responses:
        '200':
          description: Product permanently deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string, example: 'Product permanently deleted' }
        '403':
          description: Forbidden - missing products.delete.permanent permission
        '404':
          description: Product not found in archived products or not in tenant scope

  /tenants/{tenantId}/products/bulk:
    post:
      tags: [Products]
      summary: Bulk delete products
      description: "Requires authentication and 'products.delete' permission within the tenant scope. Deletes multiple products in one operation."
      operationId: bulkDeleteProducts
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [ids]
              properties:
                ids:
                  type: array
                  items: { type: string, format: uuid }
                  minItems: 1
                  description: Array of product IDs to delete
      responses:
        '200':
          description: Bulk delete completed
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  deleted_count: { type: integer }
                  requested_count: { type: integer }
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        id: { type: string, format: uuid }
                        message: { type: string }
        '403':
          description: Forbidden - missing products.delete permission
        '422':
          description: Validation error

  /tenants/{tenantId}/products/bulk/status:
    patch:
      tags: [Products]
      summary: Bulk update product status
      description: "Requires authentication and 'products.update' permission within the tenant scope. Updates status for multiple products."
      operationId: bulkUpdateProductStatus
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [ids, status]
              properties:
                ids:
                  type: array
                  items: { type: string, format: uuid }
                  minItems: 1
                  description: Array of product IDs to update
                status:
                  type: string
                  enum: [active, inactive, discontinued]
                  description: New status for all selected products
      responses:
        '200':
          description: Bulk status update completed
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  updated_count: { type: integer }
                  requested_count: { type: integer }
                  status: { type: string }
        '403':
          description: Forbidden - missing products.update permission
        '422':
          description: Validation error

  /tenants/{tenantId}/products/bulk/category:
    patch:
      tags: [Products]
      summary: Bulk update product category
      description: "Requires authentication and 'products.update' permission within the tenant scope. Assigns category to multiple products."
      operationId: bulkUpdateProductCategory
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [ids, category_id]
              properties:
                ids:
                  type: array
                  items: { type: string, format: uuid }
                  minItems: 1
                  description: Array of product IDs to update
                category_id:
                  type: string
                  format: uuid
                  description: Category ID to assign (must belong to the same tenant)
      responses:
        '200':
          description: Bulk category update completed
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  updated_count: { type: integer }
                  requested_count: { type: integer }
                  category_id: { type: string, format: uuid }
        '403':
          description: Forbidden - missing products.update permission
        '404':
          description: Category not found or does not belong to this tenant
        '422':
          description: Validation error

  /tenants/{tenantId}/products/bulk/price:
    patch:
      tags: [Products]
      summary: Bulk update product prices
      description: "Requires authentication and 'products.update' permission within the tenant scope. Updates prices for multiple products using percentage or fixed adjustments."
      operationId: bulkUpdateProductPrice
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [ids, type, operation, value]
              properties:
                ids:
                  type: array
                  items: { type: string, format: uuid }
                  minItems: 1
                  description: Array of product IDs to update
                type:
                  type: string
                  enum: [percentage, fixed]
                  description: Type of price adjustment
                operation:
                  type: string
                  enum: [increase, decrease, set]
                  description: Operation to perform (increase/decrease/set price)
                value:
                  type: number
                  format: float
                  minimum: 0
                  description: Amount or percentage value for the adjustment
      responses:
        '200':
          description: Bulk price update completed
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  updated_count: { type: integer }
                  requested_count: { type: integer }
                  type: { type: string }
                  operation: { type: string }
                  value: { type: number }
        '403':
          description: Forbidden - missing products.update permission
        '422':
          description: Validation error

  /tenants/{tenantId}/products/{productId}/history:
    get:
      tags: [Products]
      summary: Get complete change history for a product
      description: "Requires authentication and 'products.view' permission. Returns all activity logs for the product including create, update, and delete operations with before/after values. Supports pagination and date range filtering."
      operationId: getProductHistory
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - in: path
          name: productId
          required: true
          schema: { type: string, format: uuid }
          description: Product ID
        - in: query
          name: page
          schema: 
            type: integer
            default: 1
            minimum: 1
          description: Page number for pagination
        - in: query
          name: per_page
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 100
          description: Number of items per page (max 100)
        - in: query
          name: event
          schema:
            type: string
            enum: [created, updated, deleted, restored, archived, price_changed, stock_adjusted, variant_added, variant_updated, variant_deleted]
          description: Filter activities by event type
          example: "updated"
        - in: query
          name: date_from
          schema:
            type: string
            format: date-time
          description: Filter activities from this date (ISO 8601 format)
          example: "2025-09-08T00:00:00Z"
        - in: query
          name: date_to
          schema:
            type: string
            format: date-time
          description: Filter activities up to this date (ISO 8601 format)
          example: "2025-10-08T23:59:59Z"
      responses:
        '200':
          description: Product change history retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id: { type: integer }
                        event: 
                          type: string
                          enum: [created, updated, deleted, restored, archived, price_changed, stock_adjusted, variant_added, variant_updated, variant_deleted]
                          description: Activity event type from Spatie Activity Log
                        description: 
                          type: string
                          nullable: true
                          description: Human-readable description of the activity
                        properties:
                          type: object
                          description: Full properties object from activity log
                        changes:
                          type: object
                          description: Extracted change details
                          properties:
                            old: 
                              type: object
                              nullable: true
                              description: Old values before change
                            attributes: 
                              type: object
                              nullable: true
                              description: New values after change
                        causer:
                          type: object
                          nullable: true
                          description: User who performed the action
                          properties:
                            id: { type: string, format: uuid }
                            name: { type: string }
                            email: { type: string }
                        created_at: { type: string, format: date-time }
                  pagination:
                    type: object
                    properties:
                      current_page: { type: integer }
                      last_page: { type: integer }
                      per_page: { type: integer }
                      total: { type: integer }
                  meta:
                    type: object
                    properties:
                      product_id: { type: string, format: uuid }
                      product_name: { type: string }
        '403':
          description: Forbidden - missing products.view permission
        '404':
          description: Product not found or doesn't belong to tenant

  /tenants/{tenantId}/products/{productId}/history/price:
    get:
      tags: [Products]
      summary: Get price change history for a product
      description: "Requires authentication and 'products.view' permission. Returns detailed price/cost history with change amounts and percentages."
      operationId: getProductPriceHistory
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - in: path
          name: productId
          required: true
          schema: { type: string, format: uuid }
          description: Product ID
      responses:
        '200':
          description: Price history retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id: { type: string, format: uuid }
                        old_price: { type: number, format: float }
                        new_price: { type: number, format: float }
                        price_change: { type: number, format: float }
                        price_change_percentage: { type: number, format: float }
                        old_cost_price: { type: number, format: float, nullable: true }
                        new_cost_price: { type: number, format: float, nullable: true }
                        cost_change: { type: number, format: float, nullable: true }
                        cost_change_percentage: { type: number, format: float, nullable: true }
                        changed_by:
                          type: object
                          nullable: true
                          properties:
                            id: { type: string, format: uuid }
                            name: { type: string }
                            email: { type: string }
                        changed_at: { type: string, format: date-time }
                  pagination:
                    type: object
                    properties:
                      current_page: { type: integer }
                      last_page: { type: integer }
                      per_page: { type: integer }
                      total: { type: integer }
                  meta:
                    type: object
                    properties:
                      product_id: { type: string, format: uuid }
                      product_name: { type: string }
                      current_price: { type: number, format: float }
                      current_cost_price: { type: number, format: float, nullable: true }
        '403':
          description: Forbidden - missing products.view permission
        '404':
          description: Product not found or doesn't belong to tenant

  /tenants/{tenantId}/products/{productId}/history/stock:
    get:
      tags: [Products]
      summary: Get stock movement history for a product
      description: "Requires authentication and 'products.view' permission. Returns inventory movement history with change direction and references."
      operationId: getProductStockHistory
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - in: path
          name: productId
          required: true
          schema: { type: string, format: uuid }
          description: Product ID
      responses:
        '200':
          description: Stock history retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id: { type: string, format: uuid }
                        old_stock: { type: integer }
                        new_stock: { type: integer }
                        stock_change: { type: integer }
                        change_direction: { type: string, enum: [increase, decrease, no_change] }
                        change_type: { type: string, enum: [adjustment, sale, purchase, return], nullable: true }
                        reference_id: { type: string, format: uuid, nullable: true }
                        notes: { type: string, nullable: true }
                        changed_by:
                          type: object
                          nullable: true
                          properties:
                            id: { type: string, format: uuid }
                            name: { type: string }
                            email: { type: string }
                        changed_at: { type: string, format: date-time }
                  pagination:
                    type: object
                    properties:
                      current_page: { type: integer }
                      last_page: { type: integer }
                      per_page: { type: integer }
                      total: { type: integer }
                  meta:
                    type: object
                    properties:
                      product_id: { type: string, format: uuid }
                      product_name: { type: string }
                      current_stock: { type: integer }
        '403':
          description: Forbidden - missing products.view permission
        '404':
          description: Product not found or doesn't belong to tenant

  # Product Analytics Endpoints
  /tenants/{tenantId}/products/{productId}/analytics/sales:
    get:
      tags: [Product Analytics]
      summary: Get sales metrics and trends for a product
      description: "Requires authentication and 'products.view' permission. Returns sales data including total revenue, quantity sold, and time-series trends."
      operationId: getProductSalesMetrics
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - in: path
          name: productId
          required: true
          schema: { type: string, format: uuid }
          description: Product ID
        - in: query
          name: period_start
          schema: { type: string, format: date }
          description: Start date for analytics period (YYYY-MM-DD)
        - in: query
          name: period_end
          schema: { type: string, format: date }
          description: End date for analytics period (YYYY-MM-DD)
      responses:
        '200':
          description: Sales metrics retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data:
                    $ref: '#/components/schemas/ProductSalesMetrics'
        '403':
          description: Forbidden - missing products.view permission
        '404':
          description: Product not found

  /tenants/{tenantId}/products/{productId}/analytics/stock:
    get:
      tags: [Product Analytics]
      summary: Get stock metrics and movements for a product
      description: "Requires authentication and 'products.view' permission. Returns stock level metrics and time-series movement data."
      operationId: getProductStockMetrics
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - in: path
          name: productId
          required: true
          schema: { type: string, format: uuid }
          description: Product ID
        - in: query
          name: period_start
          schema: { type: string, format: date }
          description: Start date for analytics period (YYYY-MM-DD)
        - in: query
          name: period_end
          schema: { type: string, format: date }
          description: End date for analytics period (YYYY-MM-DD)
      responses:
        '200':
          description: Stock metrics retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data:
                    $ref: '#/components/schemas/ProductStockMetrics'
        '403':
          description: Forbidden - missing products.view permission
        '404':
          description: Product not found

  /tenants/{tenantId}/products/{productId}/analytics/profit:
    get:
      tags: [Product Analytics]
      summary: Get profit analysis for a product
      description: "Requires authentication and 'products.view' permission. Returns profit metrics including gross profit, margin, and time-series trends."
      operationId: getProductProfitMetrics
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - in: path
          name: productId
          required: true
          schema: { type: string, format: uuid }
          description: Product ID
        - in: query
          name: period_start
          schema: { type: string, format: date }
          description: Start date for analytics period (YYYY-MM-DD)
        - in: query
          name: period_end
          schema: { type: string, format: date }
          description: End date for analytics period (YYYY-MM-DD)
      responses:
        '200':
          description: Profit metrics retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data:
                    $ref: '#/components/schemas/ProductProfitMetrics'
        '403':
          description: Forbidden - missing products.view permission
        '404':
          description: Product not found

  /tenants/{tenantId}/products/{productId}/analytics/variants:
    get:
      tags: [Product Analytics]
      summary: Get variant performance comparison for a product
      description: "Requires authentication and 'products.view' permission. Returns performance metrics for all variants of the product."
      operationId: getProductVariantPerformance
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - in: path
          name: productId
          required: true
          schema: { type: string, format: uuid }
          description: Product ID
        - in: query
          name: period_start
          schema: { type: string, format: date }
          description: Start date for analytics period (YYYY-MM-DD)
        - in: query
          name: period_end
          schema: { type: string, format: date }
          description: End date for analytics period (YYYY-MM-DD)
        - in: query
          name: limit
          schema: { type: integer, minimum: 1, maximum: 100, default: 10 }
          description: Maximum number of variants to return
      responses:
        '200':
          description: Variant performance retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/VariantPerformance'
        '403':
          description: Forbidden - missing products.view permission
        '404':
          description: Product not found

  /tenants/{tenantId}/products/{productId}/analytics/overview:
    get:
      tags: [Product Analytics]
      summary: Get combined analytics overview for a product
      description: "Requires authentication and 'products.view' permission. Returns all analytics data in a single response (most efficient endpoint)."
      operationId: getProductAnalyticsOverview
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - in: path
          name: productId
          required: true
          schema: { type: string, format: uuid }
          description: Product ID
        - in: query
          name: period_start
          schema: { type: string, format: date }
          description: Start date for analytics period (YYYY-MM-DD)
        - in: query
          name: period_end
          schema: { type: string, format: date }
          description: End date for analytics period (YYYY-MM-DD)
        - in: query
          name: limit
          schema: { type: integer, minimum: 1, maximum: 100, default: 10 }
          description: Maximum number of variants to return in variant performance
      responses:
        '200':
          description: Analytics overview retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data:
                    $ref: '#/components/schemas/ProductAnalyticsOverview'
        '403':
          description: Forbidden - missing products.view permission
        '404':
          description: Product not found

  /tenants/{tenantId}/products/{productId}/analytics/export/csv:
    get:
      tags: [Product Analytics]
      summary: Export product analytics to CSV
      description: "Requires authentication and 'products.view' permission. Downloads analytics data as CSV file."
      operationId: exportProductAnalyticsCsv
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - in: path
          name: productId
          required: true
          schema: { type: string, format: uuid }
          description: Product ID
        - in: query
          name: period_start
          schema: { type: string, format: date }
          description: Start date for analytics period (YYYY-MM-DD)
        - in: query
          name: period_end
          schema: { type: string, format: date }
          description: End date for analytics period (YYYY-MM-DD)
      responses:
        '200':
          description: CSV file download
          content:
            text/csv:
              schema:
                type: string
                format: binary
        '403':
          description: Forbidden - missing products.view permission
        '404':
          description: Product not found

  /tenants/{tenantId}/products/{productId}/analytics/export/pdf:
    get:
      tags: [Product Analytics]
      summary: Export product analytics to PDF
      description: "Requires authentication and 'products.view' permission. Downloads analytics report as PDF file."
      operationId: exportProductAnalyticsPdf
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - in: path
          name: productId
          required: true
          schema: { type: string, format: uuid }
          description: Product ID
        - in: query
          name: period_start
          schema: { type: string, format: date }
          description: Start date for analytics period (YYYY-MM-DD)
        - in: query
          name: period_end
          schema: { type: string, format: date }
          description: End date for analytics period (YYYY-MM-DD)
      responses:
        '200':
          description: PDF file download
          content:
            application/pdf:
              schema:
                type: string
                format: binary
        '403':
          description: Forbidden - missing products.view permission
        '404':
          description: Product not found

  # Phase 8E: Product Duplication
  /tenants/{tenantId}/products/{productId}/duplicate:
    post:
      tags: [Products]
      summary: Duplicate a product
      description: "Requires authentication and 'products.create' permission. Creates a copy of an existing product with new UUID, modified SKU (adds -COPY suffix with counter), name with ' (Copy)' suffix, and draft status. All images are also duplicated with new UUIDs."
      operationId: duplicateProduct
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/ProductId'
      responses:
        '201':
          description: Product duplicated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Product duplicated successfully"
                  data:
                    $ref: '#/components/schemas/Product'
        '403':
          description: Forbidden - missing products.create permission
        '404':
          description: Product not found or not in tenant scope

  # Phase 7: Multi-Image Gallery
  /tenants/{tenantId}/products/{productId}/images:
    get:
      tags: [Products]
      summary: List all images for a product
      description: "Requires authentication and 'products.view' permission. Returns all images ordered by sort_order."
      operationId: listProductImages
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/ProductId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/ProductImage' }
                  total: { type: integer }
                  max_images: { type: integer, default: 10 }
        '403':
          description: Forbidden - missing products.view permission
        '404':
          description: Product not found
    post:
      tags: [Products]
      summary: Upload multiple images for a product
      description: "Requires authentication and 'products.update' permission. Supports up to 10 images per product. Auto-generates thumbnails."
      operationId: uploadProductImages
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/ProductId'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required: [images]
              properties:
                images:
                  type: array
                  items:
                    type: string
                    format: binary
                  description: Array of image files (max 10 total per product, 2MB each)
      responses:
        '201':
          description: Images uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/ProductImage' }
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        file: { type: string }
                        error: { type: string }
                  total_images: { type: integer }
        '403':
          description: Forbidden - missing products.update permission
        '422':
          description: Validation error or max image limit reached

  /tenants/{tenantId}/products/{productId}/images/{imageId}:
    delete:
      tags: [Products]
      summary: Delete a product image
      description: "Requires authentication and 'products.update' permission. If deleted image was primary, first remaining image becomes primary."
      operationId: deleteProductImage
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/ProductId'
        - in: path
          name: imageId
          required: true
          schema: { type: string, format: uuid }
          description: Image ID
      responses:
        '200':
          description: Image deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
        '403':
          description: Forbidden - missing products.update permission
        '404':
          description: Image not found

  /tenants/{tenantId}/products/{productId}/images/{imageId}/primary:
    patch:
      tags: [Products]
      summary: Set an image as primary
      description: "Requires authentication and 'products.update' permission. Unsets all other images as primary."
      operationId: setProductImagePrimary
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/ProductId'
        - in: path
          name: imageId
          required: true
          schema: { type: string, format: uuid }
          description: Image ID
      responses:
        '200':
          description: Primary image updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
                  data: { $ref: '#/components/schemas/ProductImage' }
        '403':
          description: Forbidden - missing products.update permission
        '404':
          description: Image not found

  /tenants/{tenantId}/products/{productId}/images/reorder:
    patch:
      tags: [Products]
      summary: Reorder product images
      description: "Requires authentication and 'products.update' permission. Updates sort_order for all images."
      operationId: reorderProductImages
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/ProductId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [order]
              properties:
                order:
                  type: array
                  items: { type: string, format: uuid }
                  description: Array of image IDs in desired order
      responses:
        '200':
          description: Images reordered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/ProductImage' }
        '403':
          description: Forbidden - missing products.update permission
        '422':
          description: Validation error

  /tenants/{tenantId}/categories:
    get:
      tags: [Products]
      summary: List all categories for a tenant
      description: "Requires authentication and 'products.view' permission within the tenant scope."
      operationId: listCategories
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - in: query
          name: per_page
          schema: { type: integer, minimum: 1, maximum: 100 }
        - in: query
          name: page
          schema: { type: integer, minimum: 1 }
      responses:
        '200':
          description: A paginated list of categories
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/Category' }
                  current_page: { type: integer }
                  last_page: { type: integer }
                  per_page: { type: integer }
                  total: { type: integer }
    post:
      tags: [Products]
      summary: Create a new category
      operationId: createCategory
      security: [{ bearerAuth: [] }]
      parameters: [ { $ref: '#/components/parameters/TenantId' } ]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/CategoryRequest' }
      responses:
        '201':
          description: Category created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Category' }

  /tenants/{tenantId}/categories/{categoryId}:
    get:
      tags: [Products]
      summary: Get a category by ID
      operationId: getCategoryById
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/CategoryId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Category' }
    put:
      tags: [Products]
      summary: Update a category
      operationId: updateCategory
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/CategoryId'
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/CategoryRequest' }
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Category' }
    delete:
      tags: [Products]
      summary: Delete a category
      operationId: deleteCategory
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/CategoryId'
      responses:
        '204':
          description: Deleted

  # Phase 9: Supplier Management
  /tenants/{tenantId}/suppliers:
    get:
      tags: [Suppliers]
      summary: List all suppliers for a tenant
      description: "Requires authentication and 'products.view' permission. Supports search and filtering."
      operationId: listSuppliers
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - in: query
          name: per_page
          schema: { type: integer, minimum: 1, maximum: 100, default: 15 }
        - in: query
          name: page
          schema: { type: integer, minimum: 1 }
        - in: query
          name: search
          description: "Search in supplier name, contact person, email"
          schema: { type: string }
        - in: query
          name: status
          description: "Filter by status"
          schema: { type: string, enum: [active, inactive] }
      responses:
        '200':
          description: A paginated list of suppliers
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/Supplier' }
                  current_page: { type: integer }
                  last_page: { type: integer }
                  per_page: { type: integer }
                  total: { type: integer }
    post:
      tags: [Suppliers]
      summary: Create a new supplier
      description: "Requires authentication and 'products.update' permission."
      operationId: createSupplier
      security: [{ bearerAuth: [] }]
      parameters: [ { $ref: '#/components/parameters/TenantId' } ]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/SupplierRequest' }
      responses:
        '201':
          description: Supplier created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Supplier' }

  /tenants/{tenantId}/suppliers/{supplierId}:
    get:
      tags: [Suppliers]
      summary: Get a supplier by ID
      operationId: getSupplierById
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/SupplierId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Supplier' }
    patch:
      tags: [Suppliers]
      summary: Update a supplier
      operationId: updateSupplier
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/SupplierId'
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/SupplierRequest' }
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Supplier' }
    delete:
      tags: [Suppliers]
      summary: Delete a supplier
      description: "Cannot delete if supplier has associated products."
      operationId: deleteSupplier
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/SupplierId'
      responses:
        '204':
          description: Deleted
        '422':
          description: Cannot delete - has associated products

  /tenants/{tenantId}/suppliers/{supplierId}/products:
    get:
      tags: [Suppliers]
      summary: List products by supplier
      operationId: listProductsBySupplier
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/SupplierId'
        - in: query
          name: per_page
          schema: { type: integer, minimum: 1, maximum: 100, default: 15 }
        - in: query
          name: page
          schema: { type: integer, minimum: 1 }
      responses:
        '200':
          description: A paginated list of products
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/Product' }
                  current_page: { type: integer }
                  last_page: { type: integer }
                  per_page: { type: integer }
                  total: { type: integer }

  # Phase 9: Product Tags Management
  /tenants/{tenantId}/tags:
    get:
      tags: [Product Tags]
      summary: List all product tags for a tenant
      description: "Requires authentication and 'products.view' permission. Supports search."
      operationId: listProductTags
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - in: query
          name: per_page
          schema: { type: integer, minimum: 1, maximum: 100, default: 15 }
        - in: query
          name: page
          schema: { type: integer, minimum: 1 }
        - in: query
          name: search
          description: "Search in tag name"
          schema: { type: string }
      responses:
        '200':
          description: A paginated list of tags
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/ProductTag' }
                  current_page: { type: integer }
                  last_page: { type: integer }
                  per_page: { type: integer }
                  total: { type: integer }
    post:
      tags: [Product Tags]
      summary: Create a new product tag
      description: "Requires authentication and 'products.update' permission."
      operationId: createProductTag
      security: [{ bearerAuth: [] }]
      parameters: [ { $ref: '#/components/parameters/TenantId' } ]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/ProductTagRequest' }
      responses:
        '201':
          description: Tag created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ProductTag' }

  /tenants/{tenantId}/tags/popular:
    get:
      tags: [Product Tags]
      summary: Get most popular tags
      description: "Returns tags ordered by usage count."
      operationId: getPopularTags
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - in: query
          name: limit
          schema: { type: integer, minimum: 1, maximum: 50, default: 10 }
      responses:
        '200':
          description: List of popular tags
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/ProductTag' }

  /tenants/{tenantId}/tags/{tagId}:
    get:
      tags: [Product Tags]
      summary: Get a tag by ID
      operationId: getProductTagById
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/TagId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ProductTag' }
    patch:
      tags: [Product Tags]
      summary: Update a tag
      operationId: updateProductTag
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/TagId'
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/ProductTagRequest' }
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ProductTag' }
    delete:
      tags: [Product Tags]
      summary: Delete a tag
      description: "Removes tag and detaches from all products."
      operationId: deleteProductTag
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/TagId'
      responses:
        '204':
          description: Deleted

  /tenants/{tenantId}/tags/bulk-attach:
    post:
      tags: [Product Tags]
      summary: Attach tags to multiple products
      description: "Bulk operation to attach tags to products."
      operationId: bulkAttachTags
      security: [{ bearerAuth: [] }]
      parameters: [ { $ref: '#/components/parameters/TenantId' } ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [product_ids, tag_ids]
              properties:
                product_ids:
                  type: array
                  items: { type: string, format: uuid }
                  minItems: 1
                tag_ids:
                  type: array
                  items: { type: string, format: uuid }
                  minItems: 1
      responses:
        '200':
          description: Tags attached
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
                  attached_count: { type: integer }

  /tenants/{tenantId}/tags/bulk-detach:
    post:
      tags: [Product Tags]
      summary: Detach tags from multiple products
      description: "Bulk operation to detach tags from products."
      operationId: bulkDetachTags
      security: [{ bearerAuth: [] }]
      parameters: [ { $ref: '#/components/parameters/TenantId' } ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [product_ids, tag_ids]
              properties:
                product_ids:
                  type: array
                  items: { type: string, format: uuid }
                  minItems: 1
                tag_ids:
                  type: array
                  items: { type: string, format: uuid }
                  minItems: 1
      responses:
        '200':
          description: Tags detached
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
                  detached_count: { type: integer }

  # Phase 9: SKU Generation
  /tenants/{tenantId}/sku-patterns:
    get:
      tags: [SKU Generation]
      summary: List predefined SKU patterns
      description: "Returns available SKU generation patterns with placeholders."
      operationId: listSkuPatterns
      security: [{ bearerAuth: [] }]
      parameters: [ { $ref: '#/components/parameters/TenantId' } ]
      responses:
        '200':
          description: List of SKU patterns
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/SkuPattern' }

  /tenants/{tenantId}/generate-sku:
    post:
      tags: [SKU Generation]
      summary: Generate a new SKU
      description: "Generates and saves SKU using pattern. Increments sequence."
      operationId: generateSku
      security: [{ bearerAuth: [] }]
      parameters: [ { $ref: '#/components/parameters/TenantId' } ]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/SkuGenerateRequest' }
      responses:
        '200':
          description: SKU generated
          content:
            application/json:
              schema:
                type: object
                properties:
                  sku: { type: string, example: 'ELEC-0001' }
                  pattern: { type: string }
                  sequence_number: { type: integer }

  /tenants/{tenantId}/preview-sku:
    post:
      tags: [SKU Generation]
      summary: Preview SKU without saving
      description: "Generates SKU preview without incrementing sequence."
      operationId: previewSku
      security: [{ bearerAuth: [] }]
      parameters: [ { $ref: '#/components/parameters/TenantId' } ]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/SkuGenerateRequest' }
      responses:
        '200':
          description: SKU preview
          content:
            application/json:
              schema:
                type: object
                properties:
                  sku: { type: string, example: 'ELEC-0001' }
                  pattern: { type: string }
                  next_sequence_number: { type: integer }

  /tenants/{tenantId}/validate-sku:
    get:
      tags: [SKU Generation]
      summary: Validate SKU availability
      description: "Check if SKU is unique and available."
      operationId: validateSku
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - in: query
          name: sku
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Validation result
          content:
            application/json:
              schema:
                type: object
                properties:
                  is_available: { type: boolean }
                  sku: { type: string }

  # Phase 10: Tenant-Wide Analytics & Reporting
  # Provides business intelligence and insights across all products
  # All endpoints require 'products.view' permission and enforce tenant isolation
  
  /tenants/{tenantId}/analytics/overview:
    get:
      tags: [Tenant Analytics]
      summary: Get tenant-wide analytics overview
      description: "Requires authentication and 'products.view' permission. Returns comprehensive dashboard data including total revenue, products count, average profit margin, and total views."
      operationId: getTenantAnalyticsOverview
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - in: query
          name: period_start
          schema: { type: string, format: date }
          description: "Start date for analytics period (YYYY-MM-DD)"
        - in: query
          name: period_end
          schema: { type: string, format: date }
          description: "End date for analytics period (YYYY-MM-DD)"
      responses:
        '200':
          description: Analytics overview retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data:
                    type: object
                    properties:
                      total_revenue:
                        type: number
                        format: float
                        description: "Total revenue from all products"
                      products_count:
                        type: integer
                        description: "Total number of active products"
                      average_profit_margin:
                        type: number
                        format: float
                        description: "Average profit margin percentage"
                      total_views:
                        type: integer
                        description: "Total product page views"
                      period_start: { type: string, format: date }
                      period_end: { type: string, format: date }
        '403':
          description: Forbidden - missing products.view permission

  /tenants/{tenantId}/analytics/top-products:
    get:
      tags: [Tenant Analytics]
      summary: Get top performing products
      description: "Requires authentication and 'products.view' permission. Returns top products by selected metric (revenue, quantity, profit, or views)."
      operationId: getTenantTopProducts
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - in: query
          name: metric
          schema:
            type: string
            enum: [revenue, quantity, profit, views]
            default: revenue
          description: "Metric to rank products by"
        - in: query
          name: limit
          schema: { type: integer, minimum: 1, maximum: 50, default: 10 }
          description: "Number of top products to return"
        - in: query
          name: period_start
          schema: { type: string, format: date }
        - in: query
          name: period_end
          schema: { type: string, format: date }
      responses:
        '200':
          description: Top products retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        product_id: { type: string, format: uuid }
                        product_name: { type: string }
                        sku: { type: string }
                        metric_value: { type: number, format: float }
                        revenue: { type: number, format: float }
                        quantity_sold: { type: integer }
                        profit: { type: number, format: float }
                        profit_margin: { type: number, format: float }
                        views: { type: integer }
        '403':
          description: Forbidden - missing products.view permission

  /tenants/{tenantId}/analytics/revenue-breakdown:
    get:
      tags: [Tenant Analytics]
      summary: Get revenue breakdown by product
      description: "Requires authentication and 'products.view' permission. Returns revenue distribution across products for pie/donut charts."
      operationId: getTenantRevenueBreakdown
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - in: query
          name: limit
          schema: { type: integer, minimum: 1, maximum: 50, default: 10 }
        - in: query
          name: period_start
          schema: { type: string, format: date }
        - in: query
          name: period_end
          schema: { type: string, format: date }
      responses:
        '200':
          description: Revenue breakdown retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        product_id: { type: string, format: uuid }
                        product_name: { type: string }
                        revenue: { type: number, format: float }
                        percentage: { type: number, format: float }
        '403':
          description: Forbidden - missing products.view permission

  /tenants/{tenantId}/analytics/profit-analysis:
    get:
      tags: [Tenant Analytics]
      summary: Get profit analysis by product
      description: "Requires authentication and 'products.view' permission. Returns profit margins and analysis for products."
      operationId: getTenantProfitAnalysis
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - in: query
          name: limit
          schema: { type: integer, minimum: 1, maximum: 50, default: 10 }
        - in: query
          name: period_start
          schema: { type: string, format: date }
        - in: query
          name: period_end
          schema: { type: string, format: date }
      responses:
        '200':
          description: Profit analysis retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        product_id: { type: string, format: uuid }
                        product_name: { type: string }
                        revenue: { type: number, format: float }
                        cost: { type: number, format: float }
                        profit: { type: number, format: float }
                        profit_margin: { type: number, format: float }
                        quantity_sold: { type: integer }
        '403':
          description: Forbidden - missing products.view permission

  /tenants/{tenantId}/analytics/category-performance:
    get:
      tags: [Tenant Analytics]
      summary: Get performance breakdown by category
      description: "Requires authentication and 'products.view' permission. Returns aggregated metrics per product category."
      operationId: getTenantCategoryPerformance
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - in: query
          name: period_start
          schema: { type: string, format: date }
        - in: query
          name: period_end
          schema: { type: string, format: date }
      responses:
        '200':
          description: Category performance retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        category_id: { type: string, format: uuid }
                        category_name: { type: string }
                        products_count: { type: integer }
                        total_revenue: { type: number, format: float }
                        total_profit: { type: number, format: float }
                        average_profit_margin: { type: number, format: float }
                        total_quantity_sold: { type: integer }
        '403':
          description: Forbidden - missing products.view permission

  /tenants/{tenantId}/analytics/most-viewed:
    get:
      tags: [Tenant Analytics]
      summary: Get most viewed products
      description: "Requires authentication and 'products.view' permission. Returns products sorted by view count."
      operationId: getTenantMostViewedProducts
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - in: query
          name: limit
          schema: { type: integer, minimum: 1, maximum: 50, default: 10 }
        - in: query
          name: period_start
          schema: { type: string, format: date }
        - in: query
          name: period_end
          schema: { type: string, format: date }
      responses:
        '200':
          description: Most viewed products retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        product_id: { type: string, format: uuid }
                        product_name: { type: string }
                        sku: { type: string }
                        view_count: { type: integer }
                        unique_viewers: { type: integer }
                        last_viewed_at: { type: string, format: date-time }
        '403':
          description: Forbidden - missing products.view permission

  /tenants/{tenantId}/analytics/search-terms:
    get:
      tags: [Tenant Analytics]
      summary: Get popular search terms
      description: "Requires authentication and 'products.view' permission. Returns most frequently searched terms."
      operationId: getTenantSearchTerms
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - in: query
          name: limit
          schema: { type: integer, minimum: 1, maximum: 50, default: 10 }
        - in: query
          name: period_start
          schema: { type: string, format: date }
        - in: query
          name: period_end
          schema: { type: string, format: date }
      responses:
        '200':
          description: Search terms retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        search_term: { type: string }
                        search_count: { type: integer }
                        average_results: { type: number, format: float }
                        zero_results_count: { type: integer }
        '403':
          description: Forbidden - missing products.view permission

  /tenants/{tenantId}/analytics/search-trends:
    get:
      tags: [Tenant Analytics]
      summary: Get search trends over time
      description: "Requires authentication and 'products.view' permission. Returns search activity aggregated by time period."
      operationId: getTenantSearchTrends
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - in: query
          name: group_by
          schema:
            type: string
            enum: [hour, day, week, month]
            default: day
        - in: query
          name: period_start
          schema: { type: string, format: date }
        - in: query
          name: period_end
          schema: { type: string, format: date }
      responses:
        '200':
          description: Search trends retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        period: { type: string }
                        search_count: { type: integer }
                        unique_terms: { type: integer }
                        zero_results_percentage: { type: number, format: float }
        '403':
          description: Forbidden - missing products.view permission

  /tenants/{tenantId}/analytics/search-stats:
    get:
      tags: [Tenant Analytics]
      summary: Get search statistics summary
      description: "Requires authentication and 'products.view' permission. Returns aggregated search metrics."
      operationId: getTenantSearchStats
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - in: query
          name: period_start
          schema: { type: string, format: date }
        - in: query
          name: period_end
          schema: { type: string, format: date }
      responses:
        '200':
          description: Search stats retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data:
                    type: object
                    properties:
                      total_searches: { type: integer }
                      unique_terms: { type: integer }
                      average_results_per_search: { type: number, format: float }
                      zero_results_count: { type: integer }
                      zero_results_percentage: { type: number, format: float }
        '403':
          description: Forbidden - missing products.view permission

  /tenants/{tenantId}/analytics/zero-result-searches:
    get:
      tags: [Tenant Analytics]
      summary: Get searches with zero results
      description: "Requires authentication and 'products.view' permission. Returns search terms that returned no products (useful for product gap analysis)."
      operationId: getTenantZeroResultSearches
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - in: query
          name: limit
          schema: { type: integer, minimum: 1, maximum: 50, default: 10 }
        - in: query
          name: period_start
          schema: { type: string, format: date }
        - in: query
          name: period_end
          schema: { type: string, format: date }
      responses:
        '200':
          description: Zero result searches retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        search_term: { type: string }
                        search_count: { type: integer }
                        last_searched_at: { type: string, format: date-time }
        '403':
          description: Forbidden - missing products.view permission

  /tenants/{tenantId}/analytics/track-search:
    post:
      tags: [Tenant Analytics]
      summary: Track a product search query
      description: "Public/authenticated endpoint. Logs search queries for analytics. Can be called without authentication for anonymous tracking."
      operationId: trackProductSearch
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [search_term, results_count]
              properties:
                search_term:
                  type: string
                  maxLength: 255
                  description: "The search query entered by user"
                results_count:
                  type: integer
                  minimum: 0
                  description: "Number of products returned"
      responses:
        '201':
          description: Search tracked successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  message: { type: string }
        '422':
          description: Validation error

  # Product View Tracking Endpoints
  /tenants/{tenantId}/products/{productId}/track-view:
    post:
      tags: [Tenant Analytics]
      summary: Track a product page view
      description: "Public/authenticated endpoint. Logs product views for analytics. Can be called without authentication for anonymous tracking."
      operationId: trackProductView
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/ProductId'
      responses:
        '201':
          description: View tracked successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  message: { type: string }
        '404':
          description: Product not found

  /tenants/{tenantId}/products/{productId}/view-stats:
    get:
      tags: [Tenant Analytics]
      summary: Get view statistics for a product
      description: "Requires authentication and 'products.view' permission. Returns view metrics for a specific product."
      operationId: getProductViewStats
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/ProductId'
        - in: query
          name: period_start
          schema: { type: string, format: date }
        - in: query
          name: period_end
          schema: { type: string, format: date }
      responses:
        '200':
          description: View stats retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data:
                    type: object
                    properties:
                      total_views: { type: integer }
                      unique_viewers: { type: integer }
                      authenticated_views: { type: integer }
                      anonymous_views: { type: integer }
                      average_views_per_day: { type: number, format: float }
        '403':
          description: Forbidden - missing products.view permission
        '404':
          description: Product not found

  /tenants/{tenantId}/products/{productId}/view-trends:
    get:
      tags: [Tenant Analytics]
      summary: Get view trends over time for a product
      description: "Requires authentication and 'products.view' permission. Returns view activity aggregated by time period."
      operationId: getProductViewTrends
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/ProductId'
        - in: query
          name: group_by
          schema:
            type: string
            enum: [hour, day, week, month]
            default: day
        - in: query
          name: period_start
          schema: { type: string, format: date }
        - in: query
          name: period_end
          schema: { type: string, format: date }
      responses:
        '200':
          description: View trends retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        period: { type: string }
                        view_count: { type: integer }
                        unique_viewers: { type: integer }
        '403':
          description: Forbidden - missing products.view permission
        '404':
          description: Product not found

  /tenants/{tenantId}/roles:
    get:
      tags: [Roles & Permissions]
      summary: List roles for a tenant (including global)
      operationId: listRoles
      security: [{ bearerAuth: [] }]
      parameters: [ { $ref: '#/components/parameters/TenantId' } ]
      responses:
        '200':
          description: A list of roles
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Role' }
    post:
      tags: [Roles & Permissions]
      summary: Create a role
      operationId: createRole
      security: [{ bearerAuth: [] }]
      parameters: [ { $ref: '#/components/parameters/TenantId' } ]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/RoleRequest' }
      responses:
        '201':
          description: Role created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Role' }

  /tenants/{tenantId}/roles/{roleId}:
    get:
      tags: [Roles & Permissions]
      summary: Get role by ID
      operationId: getRoleById
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/RoleId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Role' }
    put:
      tags: [Roles & Permissions]
      summary: Update role
      operationId: updateRole
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/RoleId'
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/RoleRequest' }
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Role' }
    delete:
      tags: [Roles & Permissions]
      summary: Delete role
      operationId: deleteRole
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/RoleId'
      responses:
        '204':
          description: Deleted

  /tenants/{tenantId}/permissions:
    get:
      tags: [Roles & Permissions]
      summary: List available permissions (API guard)
      operationId: listPermissions
      security: [{ bearerAuth: [] }]
      parameters: [ { $ref: '#/components/parameters/TenantId' } ]
      responses:
        '200':
          description: A list of permissions
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Permission' }

  /tenants/{tenantId}/orders:
    get:
      tags: [Sales]
      summary: List orders for a tenant
      description: "Requires authentication and 'orders.view' permission within the tenant scope."
      operationId: listOrders
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - in: query
          name: per_page
          schema: { type: integer, minimum: 1, maximum: 100 }
        - in: query
          name: page
          schema: { type: integer, minimum: 1 }
      responses:
        '200':
          description: A paginated list of orders
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/Order' }
                  current_page: { type: integer }
                  last_page: { type: integer }
                  per_page: { type: integer }
                  total: { type: integer }
    post:
      tags: [Sales]
      summary: Create an order
      description: "Requires authentication and 'orders.create' permission within the tenant scope. Validates stock availability before order creation."
      operationId: createOrder
      security: [{ bearerAuth: [] }]
      parameters: [ { $ref: '#/components/parameters/TenantId' } ]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/OrderRequest' }
      responses:
        '201':
          description: Order created successfully
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Order' }

  /tenants/{tenantId}/orders/{orderId}:
    get:
      tags: [Sales]
      summary: Get order by ID
      operationId: getOrderById
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/OrderId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Order' }
    put:
      tags: [Sales]
      summary: Update order
      operationId: updateOrder
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/OrderId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                payment_method:
                  type: string
                  enum: [cash, card, qris]
                amount_paid:
                  type: number
                  format: float
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Order' }
    delete:
      tags: [Sales]
      summary: Delete order
      operationId: deleteOrder
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/OrderId'
      responses:
        '204':
          description: Deleted

  /tenants/{tenantId}/customers:
    get:
      tags: [Customers]
      summary: List customers for a tenant
      description: "Requires authentication and 'customers.view' permission within the tenant scope. Supports search with 'q' parameter."
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - in: query
          name: q
          schema: { type: string }
          description: Search by name, email, or phone
        - in: query
          name: page
          schema: { type: integer, minimum: 1 }
        - in: query
          name: per_page
          schema: { type: integer, minimum: 1, maximum: 100 }
      responses:
        '200':
          description: A paginated list of customers
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/Customer' }
                  current_page: { type: integer }
                  last_page: { type: integer }
                  per_page: { type: integer }
                  total: { type: integer }
    post:
      tags: [Customers]
      summary: Create a customer
      security: [{ bearerAuth: [] }]
      parameters: [ { $ref: '#/components/parameters/TenantId' } ]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/CustomerRequest' }
      responses:
        '201':
          description: Customer created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Customer' }

  /tenants/{tenantId}/customers/search:
    post:
      tags: [Customers]
      summary: Search customers with POST (avoids URL query exposure)
      security: [{ bearerAuth: [] }]
      parameters: [ { $ref: '#/components/parameters/TenantId' } ]
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                q: { type: string }
                page: { type: integer, minimum: 1 }
                per_page: { type: integer, minimum: 1, maximum: 100 }
      responses:
        '200':
          description: A paginated list of customers
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/Customer' }
                  current_page: { type: integer }
                  last_page: { type: integer }
                  per_page: { type: integer }
                  total: { type: integer }

  /tenants/{tenantId}/customers/{id}:
    get:
      tags: [Customers]
      summary: Get customer by ID
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Customer' }
    patch:
      tags: [Customers]
      summary: Update customer
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/CustomerRequest' }
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Customer' }
    delete:
      tags: [Customers]
      summary: Delete customer
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      responses:
        '204':
          description: Deleted

  /tenants/{tenantId}/users:
    get:
      tags: [Users]
      summary: List users within a tenant
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - in: query
          name: q
          schema: { type: string }
          description: Search by name or email
        - in: query
          name: per_page
          schema: { type: integer }
      responses:
        '200':
          description: Paginated users
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/User' }
                  current_page: { type: integer }
                  last_page: { type: integer }
                  per_page: { type: integer }
                  total: { type: integer }
    post:
      tags: [Users]
      summary: Create a user in tenant
      security: [{ bearerAuth: [] }]
      parameters: [ { $ref: '#/components/parameters/TenantId' } ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name, email, password]
              properties:
                name: { type: string }
                email: { type: string, format: email }
                password: { type: string, format: password }
                display_name: { type: string, nullable: true }
                status: { type: string, enum: [active, inactive, pending, banned], nullable: true }
                photo: { type: string, nullable: true }
                phone_number: { type: string, nullable: true }
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/User' }

  /tenants/{tenantId}/users/{userId}:
    get:
      tags: [Users]
      summary: Get user by ID
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/UserId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/User' }
    patch:
      tags: [Users]
      summary: Update user
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/UserId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name: { type: string }
                display_name: { type: string, nullable: true }
                email: { type: string, format: email }
                status: { type: string, enum: [active, inactive, pending, banned], nullable: true }
                photo: { type: string, nullable: true }
                phone_number: { type: string, nullable: true }
                password: { type: string, format: password, nullable: true }
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema: { $ref: '#/components/schemas/User' }
    delete:
      tags: [Users]
      summary: Delete user
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/UserId'
      responses:
        '200':
          description: Deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }

  /tenants/{tenantId}/uploads/user-photo:
    post:
      tags: [Users]
      summary: Upload a user photo (creates a thumbnail)
      security: [{ bearerAuth: [] }]
      parameters: [ { $ref: '#/components/parameters/TenantId' } ]
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required: [file]
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '201':
          description: Uploaded
          content:
            application/json:
              schema:
                type: object
                properties:
                  url: { type: string }
                  thumb_url: { type: string, nullable: true }
                  path: { type: string }

  /tenants/{tenantId}/users/{userId}/roles:
    post:
      tags: [Users]
      summary: Update user roles within tenant scope
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/UserId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                roles:
                  type: array
                  items: { type: string }
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }

  /tenants/{tenantId}/settings:
    get:
      tags: [Settings]
      summary: Get tenant settings
      security: [{ bearerAuth: [] }]
      parameters: [ { $ref: '#/components/parameters/TenantId' } ]
      responses:
        '200':
          description: Settings
          content:
            application/json:
              schema: { $ref: '#/components/schemas/TenantSettings' }
    patch:
      tags: [Settings]
      summary: Update tenant settings
      security: [{ bearerAuth: [] }]
      parameters: [ { $ref: '#/components/parameters/TenantId' } ]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/TenantSettingsUpdate' }
      responses:
        '200':
          description: Updated settings
          content:
            application/json:
              schema: { $ref: '#/components/schemas/TenantSettings' }

  /tenants/{tenantId}/stock-adjustments:
    post:
      tags: [Inventory]
      summary: Create a new stock adjustment
      operationId: createStockAdjustment
      security: [{ bearerAuth: [] }]
      parameters: [ { $ref: '#/components/parameters/TenantId' } ]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/StockAdjustmentRequest' }
      responses:
        '201':
          description: Stock adjustment recorded
          content:
            application/json:
              schema: { $ref: '#/components/schemas/StockAdjustment' }

  /tenants/{tenantId}/stock-adjustments/reasons:
    get:
      tags: [Inventory]
      summary: Get predefined stock adjustment reasons
      description: "Returns list of standard reasons for stock adjustments. Requires products.view permission."
      operationId: getAdjustmentReasons
      security: [{ bearerAuth: [] }]
      parameters: [ { $ref: '#/components/parameters/TenantId' } ]
      responses:
        '200':
          description: List of adjustment reasons
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/AdjustmentReason' }
                  meta:
                    type: object
                    properties:
                      total: { type: integer }
                      types: { type: array, items: { type: string } }

  /tenants/{tenantId}/stock-alerts:
    get:
      tags: [Inventory]
      summary: List all stock alerts for tenant
      description: "Returns paginated list of stock alerts with filtering options. Requires products.view permission."
      operationId: listStockAlerts
      security: [{ bearerAuth: [] }]
      parameters:
        - { $ref: '#/components/parameters/TenantId' }
        - name: status
          in: query
          schema:
            type: string
            enum: [pending, acknowledged, resolved, dismissed]
          description: Filter by alert status
        - name: severity
          in: query
          schema:
            type: string
            enum: [low, critical, out_of_stock]
          description: Filter by severity level
        - name: product_id
          in: query
          schema:
            type: string
            format: uuid
          description: Filter by specific product
        - name: actionable_only
          in: query
          schema:
            type: boolean
          description: Show only actionable alerts (pending + acknowledged)
        - name: per_page
          in: query
          schema:
            type: integer
            default: 20
            maximum: 100
        - name: sort_by
          in: query
          schema:
            type: string
            enum: [created_at, current_stock, severity, status]
            default: created_at
        - name: sort_order
          in: query
          schema:
            type: string
            enum: [asc, desc]
            default: desc
      responses:
        '200':
          description: List of stock alerts
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/StockAlert' }
                  pagination: { $ref: '#/components/schemas/Pagination' }

  /tenants/{tenantId}/stock-alerts/stats:
    get:
      tags: [Inventory]
      summary: Get stock alert statistics
      description: "Returns counts and metrics for dashboard display. Requires products.view permission."
      operationId: getStockAlertStats
      security: [{ bearerAuth: [] }]
      parameters: [ { $ref: '#/components/parameters/TenantId' } ]
      responses:
        '200':
          description: Alert statistics
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { $ref: '#/components/schemas/StockAlertStats' }

  /tenants/{tenantId}/stock-alerts/low-stock-products:
    get:
      tags: [Inventory]
      summary: Get products with low stock levels
      description: "Returns paginated list of products with low stock. Requires products.view permission."
      operationId: getLowStockProducts
      security: [{ bearerAuth: [] }]
      parameters:
        - { $ref: '#/components/parameters/TenantId' }
        - name: severity
          in: query
          schema:
            type: string
            enum: [critical, out_of_stock]
          description: Filter by severity level
        - name: per_page
          in: query
          schema:
            type: integer
            default: 20
            maximum: 100
        - name: sort_by
          in: query
          schema:
            type: string
            enum: [stock, name, reorder_point, updated_at]
            default: stock
        - name: sort_order
          in: query
          schema:
            type: string
            enum: [asc, desc]
            default: asc
      responses:
        '200':
          description: List of low stock products
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/LowStockProduct' }
                  pagination: { $ref: '#/components/schemas/Pagination' }
                  summary: { $ref: '#/components/schemas/LowStockSummary' }

  /tenants/{tenantId}/stock-alerts/{alertId}/acknowledge:
    post:
      tags: [Inventory]
      summary: Acknowledge a stock alert
      description: "Marks alert as seen/acknowledged. Requires products.view permission."
      operationId: acknowledgeStockAlert
      security: [{ bearerAuth: [] }]
      parameters:
        - { $ref: '#/components/parameters/TenantId' }
        - { $ref: '#/components/parameters/AlertId' }
      responses:
        '200':
          description: Alert acknowledged successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
                  data: { $ref: '#/components/schemas/StockAlertAction' }

  /tenants/{tenantId}/stock-alerts/{alertId}/resolve:
    post:
      tags: [Inventory]
      summary: Resolve a stock alert
      description: "Marks alert as resolved (stock replenished). Requires inventory.adjust permission."
      operationId: resolveStockAlert
      security: [{ bearerAuth: [] }]
      parameters:
        - { $ref: '#/components/parameters/TenantId' }
        - { $ref: '#/components/parameters/AlertId' }
      responses:
        '200':
          description: Alert resolved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
                  data: { $ref: '#/components/schemas/StockAlertAction' }

  /tenants/{tenantId}/stock-alerts/{alertId}/dismiss:
    post:
      tags: [Inventory]
      summary: Dismiss a stock alert
      description: "Marks alert as dismissed (false positive). Requires products.view permission."
      operationId: dismissStockAlert
      security: [{ bearerAuth: [] }]
      parameters:
        - { $ref: '#/components/parameters/TenantId' }
        - { $ref: '#/components/parameters/AlertId' }
      responses:
        '200':
          description: Alert dismissed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
                  data:
                    type: object
                    properties:
                      id: { type: string, format: uuid }
                      status: { type: string }
                      updated_at: { type: string, format: date-time }

  # ========== PRODUCT VARIANTS ==========
  /tenants/{tenantId}/products/{productId}/variants:
    get:
      tags: [Product Variants]
      summary: List variants for a product
      operationId: listProductVariants
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/ProductId'
        - in: query
          name: per_page
          schema:
            type: integer
            default: 50
            minimum: 1
            maximum: 500
        - in: query
          name: search
          schema:
            type: string
          description: Search in SKU and name
        - in: query
          name: is_active
          schema:
            type: boolean
        - in: query
          name: sort_by
          schema:
            type: string
            default: sort_order
            enum: [sort_order, sku, name, price, stock, created_at]
        - in: query
          name: sort_order
          schema:
            type: string
            default: asc
            enum: [asc, desc]
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ProductVariant'
                  current_page:
                    type: integer
                  last_page:
                    type: integer
                  per_page:
                    type: integer
                  total:
                    type: integer
        '403':
          description: Forbidden - Insufficient permissions
        '404':
          description: Product not found

    post:
      tags: [Product Variants]
      summary: Create a new variant
      operationId: createProductVariant
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/ProductId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductVariantInput'
      responses:
        '201':
          description: Variant created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  data:
                    $ref: '#/components/schemas/ProductVariant'
        '422':
          description: Validation error

  /tenants/{tenantId}/products/{productId}/variants/bulk:
    post:
      tags: [Product Variants]
      summary: Create multiple variants
      description: Create up to 500 variants at once
      operationId: bulkCreateProductVariants
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/ProductId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                variants:
                  type: array
                  minItems: 1
                  maxItems: 500
                  items:
                    $ref: '#/components/schemas/ProductVariantInput'
      responses:
        '201':
          description: Variants created
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  success_count:
                    type: integer
                  error_count:
                    type: integer
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        index:
                          type: integer
                        sku:
                          type: string
                        message:
                          type: string

    patch:
      tags: [Product Variants]
      summary: Update multiple variants
      operationId: bulkUpdateProductVariants
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/ProductId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                variant_ids:
                  type: array
                  items:
                    type: string
                    format: uuid
                updates:
                  type: object
      responses:
        '200':
          description: Variants updated

    delete:
      tags: [Product Variants]
      summary: Delete multiple variants
      operationId: bulkDeleteProductVariants
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/ProductId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                variant_ids:
                  type: array
                  items:
                    type: string
                    format: uuid
      responses:
        '200':
          description: Variants deleted

  /tenants/{tenantId}/products/{productId}/variants/{variantId}:
    get:
      tags: [Product Variants]
      summary: Get a single variant
      operationId: getProductVariant
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/ProductId'
        - $ref: '#/components/parameters/VariantId'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ProductVariant'

    patch:
      tags: [Product Variants]
      summary: Update a variant
      operationId: updateProductVariant
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/ProductId'
        - $ref: '#/components/parameters/VariantId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductVariantInput'
      responses:
        '200':
          description: Variant updated

    delete:
      tags: [Product Variants]
      summary: Delete a variant (soft delete)
      operationId: deleteProductVariant
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/ProductId'
        - $ref: '#/components/parameters/VariantId'
      responses:
        '200':
          description: Variant deleted

  # ========== VARIANT ANALYTICS ==========
  /tenants/{tenantId}/products/{productId}/variants/analytics:
    get:
      tags: [Product Variants, Analytics]
      summary: Get analytics for all variants of a product
      description: |
        Returns aggregated analytics data for all variants of a specific product.
        Supports filtering by period type (daily, weekly, monthly) and date range.
        **Required Permission:** `products.view`
      operationId: getProductVariantsAnalytics
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/ProductId'
        - in: query
          name: period_type
          schema:
            type: string
            enum: [daily, weekly, monthly]
            default: daily
          description: Type of period aggregation
        - in: query
          name: period_start
          schema:
            type: string
            format: date
          description: Start date for analytics range (YYYY-MM-DD)
        - in: query
          name: period_end
          schema:
            type: string
            format: date
          description: End date for analytics range (YYYY-MM-DD)
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  product:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                      name:
                        type: string
                      variant_count:
                        type: integer
                  period_type:
                    type: string
                    enum: [daily, weekly, monthly]
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        variant:
                          $ref: '#/components/schemas/ProductVariant'
                        analytics:
                          type: array
                          items:
                            $ref: '#/components/schemas/VariantAnalytics'
                        summary:
                          type: object
                          properties:
                            total_revenue:
                              type: number
                              format: float
                            total_orders:
                              type: integer
                            total_quantity_sold:
                              type: integer
                            total_profit:
                              type: number
                              format: float
                  overall_summary:
                    type: object
                    properties:
                      total_revenue:
                        type: number
                        format: float
                      total_orders:
                        type: integer
                      total_quantity_sold:
                        type: integer
                      total_profit:
                        type: number
                        format: float
                      avg_conversion_rate:
                        type: number
                        format: float
        '403':
          description: Forbidden - Insufficient permissions
        '404':
          description: Product not found

  /tenants/{tenantId}/products/{productId}/variants/{variantId}/analytics:
    get:
      tags: [Product Variants, Analytics]
      summary: Get analytics for a specific variant
      description: |
        Returns time-series analytics data for a single product variant.
        Includes revenue, orders, stock movements, and performance metrics.
        **Required Permission:** `products.view`
      operationId: getProductVariantAnalytics
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/ProductId'
        - $ref: '#/components/parameters/VariantId'
        - in: query
          name: period_type
          schema:
            type: string
            enum: [daily, weekly, monthly]
            default: daily
          description: Type of period aggregation
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 365
            default: 30
          description: Number of periods to return
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  variant:
                    $ref: '#/components/schemas/ProductVariant'
                  analytics:
                    type: array
                    items:
                      $ref: '#/components/schemas/VariantAnalytics'
                  summary:
                    type: object
                    properties:
                      total_revenue:
                        type: number
                        format: float
                      total_orders:
                        type: integer
                      total_quantity_sold:
                        type: integer
                      total_profit:
                        type: number
                        format: float
                      avg_conversion_rate:
                        type: number
                        format: float
                      avg_turnover_rate:
                        type: number
                        format: float
        '403':
          description: Forbidden - Insufficient permissions
        '404':
          description: Variant not found

  /tenants/{tenantId}/products/{productId}/variants/{variantId}/stock:
    post:
      tags: [Product Variants]
      summary: Update variant stock
      operationId: updateVariantStock
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/ProductId'
        - $ref: '#/components/parameters/VariantId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                quantity:
                  type: integer
                  minimum: 0
                reason:
                  type: string
                  maxLength: 255
      responses:
        '200':
          description: Stock updated

  /tenants/{tenantId}/products/{productId}/variants/{variantId}/reserve:
    post:
      tags: [Product Variants]
      summary: Reserve stock for an order
      operationId: reserveVariantStock
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/ProductId'
        - $ref: '#/components/parameters/VariantId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                quantity:
                  type: integer
                  minimum: 1
                order_id:
                  type: string
                  format: uuid
      responses:
        '200':
          description: Stock reserved

  /tenants/{tenantId}/products/{productId}/variants/{variantId}/release:
    post:
      tags: [Product Variants]
      summary: Release reserved stock
      operationId: releaseVariantStock
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/ProductId'
        - $ref: '#/components/parameters/VariantId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                quantity:
                  type: integer
                  minimum: 1
                order_id:
                  type: string
                  format: uuid
      responses:
        '200':
          description: Stock released

  # ========== VARIANT IMPORT/EXPORT ==========
  /tenants/{tenantId}/variants/export:
    get:
      tags: [Product Variants]
      summary: Export variants to Excel/CSV
      operationId: exportVariants
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - in: query
          name: format
          schema:
            type: string
            enum: [xlsx, csv]
            default: xlsx
        - in: query
          name: product_id
          schema:
            type: string
            format: uuid
          description: Filter by product ID
        - in: query
          name: search
          schema:
            type: string
          description: Search in SKU and name
        - in: query
          name: is_active
          schema:
            type: boolean
          description: Filter by active status
      responses:
        '200':
          description: Successful export
          content:
            application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:
              schema:
                type: string
                format: binary
            text/csv:
              schema:
                type: string
                format: binary
        '403':
          description: Forbidden - Insufficient permissions

  /tenants/{tenantId}/variants/import/template:
    get:
      tags: [Product Variants]
      summary: Download import template
      operationId: downloadVariantsImportTemplate
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
      responses:
        '200':
          description: Template downloaded
          content:
            application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:
              schema:
                type: string
                format: binary
        '403':
          description: Forbidden - Insufficient permissions

  /tenants/{tenantId}/variants/import:
    post:
      tags: [Product Variants]
      summary: Import variants from Excel/CSV
      operationId: importVariants
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - file
              properties:
                file:
                  type: string
                  format: binary
                  description: Excel or CSV file (max 10MB)
                mode:
                  type: string
                  enum: [create, update]
                  default: create
                  description: Create new variants or update existing ones
      responses:
        '200':
          description: Import completed
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      total_rows:
                        type: integer
                      successful:
                        type: integer
                      failed:
                        type: integer
                      errors:
                        type: array
                        items:
                          type: object
                          properties:
                            row:
                              type: integer
                            errors:
                              type: array
                              items:
                                type: string
        '422':
          description: Validation error
        '413':
          description: File too large (max 10MB)

  # ========== VARIANT ATTRIBUTES ==========
  /tenants/{tenantId}/variant-attributes:
    get:
      tags: [Variant Attributes]
      summary: List variant attributes
      operationId: listVariantAttributes
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - in: query
          name: search
          schema:
            type: string
        - in: query
          name: is_active
          schema:
            type: boolean
        - in: query
          name: display_type
          schema:
            type: string
            enum: [select, radio, button, swatch, color_swatch]
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/VariantAttribute'

    post:
      tags: [Variant Attributes]
      summary: Create a variant attribute
      operationId: createVariantAttribute
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VariantAttributeInput'
      responses:
        '201':
          description: Attribute created

  /tenants/{tenantId}/variant-attributes/popular:
    get:
      tags: [Variant Attributes]
      summary: Get popular variant attributes
      operationId: getPopularVariantAttributes
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: Successful operation

  /tenants/{tenantId}/variant-attributes/{id}:
    get:
      tags: [Variant Attributes]
      summary: Get a variant attribute
      operationId: getVariantAttribute
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful operation

    patch:
      tags: [Variant Attributes]
      summary: Update a variant attribute
      operationId: updateVariantAttribute
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VariantAttributeInput'
      responses:
        '200':
          description: Attribute updated

    delete:
      tags: [Variant Attributes]
      summary: Delete a variant attribute
      operationId: deleteVariantAttribute
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Attribute deleted

  /tenants/{tenantId}/variant-attributes/{id}/values:
    post:
      tags: [Variant Attributes]
      summary: Add a value to an attribute
      operationId: addAttributeValue
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                value:
                  type: string
                price_modifier:
                  type: number
      responses:
        '200':
          description: Value added

    delete:
      tags: [Variant Attributes]
      summary: Remove a value from an attribute
      operationId: removeAttributeValue
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                value:
                  type: string
      responses:
        '200':
          description: Value removed

  # ========== VARIANT TEMPLATES ==========
  /tenants/{tenantId}/variant-templates:
    get:
      tags: [Variant Templates]
      summary: List variant templates
      description: Returns both system templates and tenant-specific templates
      operationId: listVariantTemplates
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - in: query
          name: include_system
          schema:
            type: boolean
            default: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/VariantTemplate'

    post:
      tags: [Variant Templates]
      summary: Create a variant template
      operationId: createVariantTemplate
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VariantTemplateInput'
      responses:
        '201':
          description: Template created

  /tenants/{tenantId}/variant-templates/{id}:
    get:
      tags: [Variant Templates]
      summary: Get a variant template
      operationId: getVariantTemplate
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful operation

    patch:
      tags: [Variant Templates]
      summary: Update a variant template
      description: System templates cannot be modified
      operationId: updateVariantTemplate
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VariantTemplateInput'
      responses:
        '200':
          description: Template updated

    delete:
      tags: [Variant Templates]
      summary: Delete a variant template
      description: System templates cannot be deleted
      operationId: deleteVariantTemplate
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Template deleted

  /tenants/{tenantId}/variant-templates/{id}/apply:
    post:
      tags: [Variant Templates]
      summary: Apply template to a product
      description: Generates all variant combinations and creates them
      operationId: applyVariantTemplate
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                product_id:
                  type: string
                  format: uuid
                override_existing:
                  type: boolean
                  default: false
      responses:
        '201':
          description: Template applied successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  variants_created:
                    type: integer

# ===================================
# COMPONENTS SECTION
# ===================================
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "Sanctum Bearer token. Include as: `Authorization: Bearer {token}`"

  parameters:
    TenantId:
      name: tenantId
      in: path
      required: true
      description: Tenant UUID
      schema:
        type: string
        format: uuid

    ProductId:
      name: productId
      in: path
      required: true
      description: Product UUID
      schema:
        type: string
        format: uuid

    UserId:
      name: userId
      in: path
      required: true
      description: User UUID
      schema:
        type: string
        format: uuid

    OrderId:
      name: orderId
      in: path
      required: true
      description: Order UUID
      schema:
        type: string
        format: uuid

    CategoryId:
      name: categoryId
      in: path
      required: true
      description: Category UUID
      schema:
        type: string
        format: uuid

    CustomerId:
      name: customerId
      in: path
      required: true
      description: Customer UUID
      schema:
        type: string
        format: uuid

    VariantId:
      name: variantId
      in: path
      required: true
      description: Product Variant UUID
      schema:
        type: string
        format: uuid


    SupplierId:
      name: supplierId
      in: path
      required: true
      description: Supplier UUID
      schema:
        type: string
        format: uuid

    TagId:
      name: tagId
      in: path
      required: true
      description: Tag UUID
      schema:
        type: string
        format: uuid

    RoleId:
      name: roleId
      in: path
      required: true
      description: Role ID (integer)
      schema:
        type: integer
    # ===================================
    # QUERY PARAMETERS
    # ===================================
    Page:
      name: page
      in: query
      description: Page number for pagination
      schema:
        type: integer
        minimum: 1
        default: 1

    PerPage:
      name: per_page
      in: query
      description: Number of items per page
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 15

    Search:
      name: search
      in: query
      description: Search query string
      schema:
        type: string

    Status:
      name: status
      in: query
      description: Filter by status
      schema:
        type: string

    DateFrom:
      name: date_from
      in: query
      description: Filter from date (YYYY-MM-DD or ISO 8601)
      schema:
        type: string
        format: date-time

    DateTo:
      name: date_to
      in: query
      description: Filter to date (YYYY-MM-DD or ISO 8601)
      schema:
        type: string
        format: date-time

    SortBy:
      name: sort_by
      in: query
      description: Field to sort by
      schema:
        type: string

    SortOrder:
      name: sort_order
      in: query
      description: Sort direction
      schema:
        type: string
        enum: [asc, desc]
        default: desc

  schemas:
    # ===================================
    # AUTHENTICATION SCHEMAS
    # ===================================
    RegisterRequest:
      type: object
      required:
        - tenant_name
        - user_name
        - email
        - password
      properties:
        tenant_name:
          type: string
          maxLength: 255
          description: Name of the new tenant organization
          example: "Acme Corp"
        user_name:
          type: string
          maxLength: 255
          description: Name of the admin user
          example: "John Doe"
        email:
          type: string
          format: email
          maxLength: 255
          description: Email address (globally unique across all tenants)
          example: "john@acme.com"
        password:
          type: string
          minLength: 8
          format: password
          description: User password (min 8 characters)

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          description: User email address
          example: "john@acme.com"
        password:
          type: string
          format: password
          description: User password

    AuthResponse:
      type: object
      required:
        - message
        - user
        - token
      properties:
        message:
          type: string
          example: "Login successful"
        user:
          $ref: '#/components/schemas/User'
        token:
          type: string
          description: Sanctum Bearer token for authenticated requests
          example: "1|abcdefghijklmnopqrstuvwxyz123456"

    User:
      type: object
      required:
        - id
        - name
        - email
        - tenant_id
        - status
      properties:
        id:
          type: string
          format: uuid
          description: User UUID
        name:
          type: string
          description: Full name
        email:
          type: string
          format: email
          description: Email address
        tenant_id:
          type: string
          format: uuid
          description: Tenant UUID this user belongs to
        status:
          type: string
          enum: [active, inactive, pending, banned]
          default: pending
          description: User status
        display_name:
          type: string
          nullable: true
          description: Custom display name
        photo:
          type: string
          nullable: true
          description: Photo URL or path
        photo_thumb:
          type: string
          nullable: true
          description: Thumbnail URL (auto-generated from photo)
        phone_number:
          type: string
          nullable: true
          description: Phone number
        roles:
          type: array
          items:
            type: string
          description: Array of role names assigned to this user
          example: ["admin"]
        permissions:
          type: array
          items:
            type: string
          description: Array of all permissions (direct + role-based)
          example: ["products.view", "products.create"]
        is_hq_super_admin:
          type: boolean
          description: True if user is Super Admin in HQ tenant (bypasses all permissions)
          default: false
        created_at:
          type: string
          format: date-time
          description: Creation timestamp
          example: "2024-01-15 10:30:00"
    # ===================================
    # TENANT MANAGEMENT SCHEMAS
    # ===================================
    Tenant:
      type: object
      required:
        - id
        - name
        - status
      properties:
        id:
          type: string
          format: uuid
          description: Tenant UUID
        name:
          type: string
          maxLength: 255
          description: Tenant organization name
          example: "Acme Corp"
        address:
          type: string
          nullable: true
          description: Physical address
        phone:
          type: string
          maxLength: 50
          nullable: true
          description: Contact phone number
        logo:
          type: string
          nullable: true
          description: Logo URL or path
        status:
          type: string
          enum: [active, inactive, pending, banned]
          default: pending
          description: Tenant status
        settings:
          type: object
          nullable: true
          additionalProperties: true
          description: JSONB field for tenant-specific settings (flexible key-value pairs)
        can_auto_activate_users:
          type: boolean
          default: false
          description: Whether this tenant can auto-activate new users without admin approval
        auto_activate_request_pending:
          type: boolean
          default: false
          description: Whether tenant has pending request for auto-activation privilege
        auto_activate_requested_at:
          type: string
          format: date-time
          nullable: true
          description: Timestamp of auto-activation request
        customers_count:
          type: integer
          description: Number of customers (when included via withCount)
        created_at:
          type: string
          format: date-time
          description: Creation timestamp
        updated_at:
          type: string
          format: date-time
          description: Last update timestamp

    TenantCreateRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          maxLength: 255
          description: Tenant organization name
          example: "New Store"
        address:
          type: string
          nullable: true
          description: Physical address
        phone:
          type: string
          maxLength: 50
          nullable: true
          description: Contact phone
        logo:
          type: string
          nullable: true
          description: Logo URL or path
        status:
          type: string
          enum: [active, inactive, pending, banned]
          default: pending
          description: Initial status

    TenantUpdateRequest:
      type: object
      description: All fields optional for partial updates
      properties:
        name:
          type: string
          maxLength: 255
          description: Tenant organization name
        address:
          type: string
          nullable: true
          description: Physical address
        phone:
          type: string
          maxLength: 50
          nullable: true
          description: Contact phone
        logo:
          type: string
          nullable: true
          description: Logo URL or path
        status:
          type: string
          enum: [active, inactive, pending, banned]
          description: Tenant status
        can_auto_activate_users:
          type: boolean
          description: Whether tenant can auto-activate users


    # ===================================
    # TIER 3: PRODUCT CORE SCHEMAS
    # ===================================
    
    Product:
      type: object
      required:
        - id
        - tenant_id
        - name
        - sku
        - price
        - stock
        - status
      properties:
        id:
          type: string
          format: uuid
          description: Product UUID
        tenant_id:
          type: string
          format: uuid
          description: Tenant UUID
        category_id:
          type: string
          format: uuid
          nullable: true
          description: Category UUID
        name:
          type: string
          maxLength: 255
          description: Product name
        sku:
          type: string
          maxLength: 100
          description: Stock Keeping Unit (unique identifier)
        description:
          type: string
          nullable: true
          description: Product description
        price:
          type: number
          format: decimal
          description: Selling price
          example: 25000.00
        cost_price:
          type: number
          format: decimal
          nullable: true
          description: Cost/purchase price
          example: 15000.00
        stock:
          type: integer
          description: Current stock quantity
          example: 100
        status:
          type: string
          enum: [active, inactive, draft, archived]
          default: active
          description: Product status
        image_path:
          type: string
          nullable: true
          description: Primary image storage path
        thumbnail_path:
          type: string
          nullable: true
          description: Thumbnail storage path
        image_url:
          type: string
          nullable: true
          description: Full image URL (computed accessor)
          readOnly: true
        thumbnail_url:
          type: string
          nullable: true
          description: Full thumbnail URL (computed accessor)
          readOnly: true
        # Phase 5: Stock Management
        reorder_point:
          type: integer
          nullable: true
          description: Minimum stock level before reorder alert
          example: 10
        reorder_quantity:
          type: integer
          nullable: true
          description: Suggested quantity to reorder
          example: 50
        low_stock_alert_enabled:
          type: boolean
          default: false
          description: Enable low stock alerts
        last_alerted_at:
          type: string
          format: date-time
          nullable: true
          description: Last time low stock alert was triggered
        # Phase 6: Product Variants
        has_variants:
          type: boolean
          default: false
          description: Whether product has variants (e.g., size, color)
        variant_count:
          type: integer
          nullable: true
          description: Number of active variants
          example: 5
        manage_stock_by_variant:
          type: boolean
          default: false
          description: If true, stock managed at variant level; product.stock is aggregate
        # Phase 9: Business Features
        supplier_id:
          type: string
          format: uuid
          nullable: true
          description: Supplier UUID
        uom:
          type: string
          nullable: true
          maxLength: 50
          description: Unit of Measure (e.g., pcs, kg, box)
          example: "pcs"
        tax_rate:
          type: number
          format: decimal
          nullable: true
          description: Tax rate percentage (0-100)
          example: 11.00
        tax_inclusive:
          type: boolean
          default: false
          description: Whether price includes tax
        # Relationships (when included)
        category:
          $ref: '#/components/schemas/Category'
        supplier:
          $ref: '#/components/schemas/Supplier'
        images:
          type: array
          items:
            $ref: '#/components/schemas/ProductImage'
          description: Product image gallery
        tags:
          type: array
          items:
            $ref: '#/components/schemas/ProductTag'
          description: Product tags
        variants:
          type: array
          items:
            $ref: '#/components/schemas/ProductVariant'
          description: Product variants (Phase 6)
        # Timestamps
        created_at:
          type: string
          format: date-time
          description: Creation timestamp (Laravel format)
          example: "2024-01-15 10:30:00"
        updated_at:
          type: string
          format: date-time
          description: Last update timestamp (Laravel format)
          example: "2024-01-20 14:45:00"
        deleted_at:
          type: string
          format: date-time
          nullable: true
          description: Soft delete timestamp (if trashed)

    Category:
      type: object
      required:
        - id
        - tenant_id
        - name
      properties:
        id:
          type: string
          format: uuid
          description: Category UUID
        tenant_id:
          type: string
          format: uuid
          description: Tenant UUID
        name:
          type: string
          maxLength: 255
          description: Category name
          example: "Electronics"
        description:
          type: string
          nullable: true
          description: Category description
        products_count:
          type: integer
          description: Number of products in this category (when using withCount)
          readOnly: true
        created_at:
          type: string
          format: date-time
          description: Creation timestamp
          example: "2024-01-10 09:00:00"
        updated_at:
          type: string
          format: date-time
          description: Last update timestamp
          example: "2024-01-15 11:20:00"

    ProductImage:
      type: object
      required:
        - id
        - tenant_id
        - product_id
        - image_url
      properties:
        id:
          type: string
          format: uuid
          description: Image UUID
        tenant_id:
          type: string
          format: uuid
          description: Tenant UUID
        product_id:
          type: string
          format: uuid
          description: Product UUID
        image_url:
          type: string
          description: Full image URL or storage path
          example: "products/abc123.jpg"
        thumbnail_url:
          type: string
          nullable: true
          description: Thumbnail URL (200x200)
          example: "products/thumbs/abc123_thumb.jpg"
        is_primary:
          type: boolean
          default: false
          description: Primary/featured image flag
        sort_order:
          type: integer
          default: 0
          description: Display order (0-based, lower = first)

    ProductTag:
      type: object
      required:
        - id
        - tenant_id
        - name
      properties:
        id:
          type: string
          format: uuid
          description: Tag UUID
        tenant_id:
          type: string
          format: uuid
          description: Tenant UUID
        name:
          type: string
          maxLength: 50
          description: Tag name
          example: "Best Seller"
        color:
          type: string
          nullable: true
          description: Tag color (for UI display)
          example: "blue"
        usage_count:
          type: integer
          description: Number of products with this tag
          readOnly: true
        created_at:
          type: string
          format: date-time
          description: Creation timestamp
        updated_at:
          type: string
          format: date-time
          description: Last update timestamp

    PublicProduct:
      type: object
      description: Public-facing product schema (limited fields for unauthenticated access)
      required:
        - id
        - name
        - sku
        - price
        - stock
      properties:
        id:
          type: string
          format: uuid
          description: Product UUID
        name:
          type: string
          description: Product name
        sku:
          type: string
          description: Stock Keeping Unit
        description:
          type: string
          nullable: true
          description: Product description
        price:
          type: number
          format: decimal
          description: Selling price
          example: 25000.00
        stock:
          type: integer
          description: Available stock quantity
        status:
          type: string
          enum: [active]
          description: Only active products are public
        image_url:
          type: string
          nullable: true
          description: Primary product image URL
        thumbnail_url:
          type: string
          nullable: true
          description: Thumbnail image URL
        category:
          type: object
          properties:
            id:
              type: string
              format: uuid
            name:
              type: string
          description: Category info (id + name only)
        images:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                format: uuid
              image_url:
                type: string
              thumbnail_url:
                type: string
              sort_order:
                type: integer
          description: Product image gallery (simplified)
        tags:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                format: uuid
              name:
                type: string
              color:
                type: string
          description: Product tags (simplified)
        has_variants:
          type: boolean
          description: Whether product has variants
        uom:
          type: string
          nullable: true
          description: Unit of Measure

    ProductCreateRequest:
      type: object
      required:
        - name
        - sku
        - price
        - stock
      properties:
        category_id:
          type: string
          format: uuid
          nullable: true
          description: Category UUID
        name:
          type: string
          maxLength: 255
          description: Product name
          example: "Wireless Mouse"
        sku:
          type: string
          maxLength: 100
          description: Stock Keeping Unit (must be unique per tenant)
          example: "WM-001"
        description:
          type: string
          nullable: true
          description: Product description
        price:
          type: number
          format: decimal
          minimum: 0
          description: Selling price
          example: 25000.00
        cost_price:
          type: number
          format: decimal
          nullable: true
          minimum: 0
          description: Cost/purchase price
          example: 15000.00
        stock:
          type: integer
          minimum: 0
          description: Initial stock quantity
          example: 100
        status:
          type: string
          enum: [active, inactive, draft, archived]
          default: active
          description: Product status
        image_path:
          type: string
          nullable: true
          description: Primary image path (after upload)
        # Stock Management
        reorder_point:
          type: integer
          nullable: true
          minimum: 0
          description: Minimum stock level before alert
          example: 10
        reorder_quantity:
          type: integer
          nullable: true
          minimum: 1
          description: Suggested reorder quantity
          example: 50
        low_stock_alert_enabled:
          type: boolean
          default: false
          description: Enable low stock alerts
        # Variants
        has_variants:
          type: boolean
          default: false
          description: Whether product has variants
        manage_stock_by_variant:
          type: boolean
          default: false
          description: Manage stock at variant level
        # Business Features
        supplier_id:
          type: string
          format: uuid
          nullable: true
          description: Supplier UUID
        uom:
          type: string
          nullable: true
          maxLength: 50
          description: Unit of Measure
          example: "pcs"
        tax_rate:
          type: number
          format: decimal
          nullable: true
          minimum: 0
          maximum: 100
          description: Tax rate percentage
          example: 11.00
        tax_inclusive:
          type: boolean
          default: false
          description: Whether price includes tax
        # Tags
        tag_ids:
          type: array
          items:
            type: string
            format: uuid
          description: Array of tag UUIDs to attach
          example: ["uuid1", "uuid2"]

    ProductUpdateRequest:
      type: object
      description: All fields optional for partial updates (PATCH)
      properties:
        category_id:
          type: string
          format: uuid
          nullable: true
          description: Category UUID
        name:
          type: string
          maxLength: 255
          description: Product name
        sku:
          type: string
          maxLength: 100
          description: Stock Keeping Unit (must be unique per tenant)
        description:
          type: string
          nullable: true
          description: Product description
        price:
          type: number
          format: decimal
          minimum: 0
          description: Selling price
        cost_price:
          type: number
          format: decimal
          nullable: true
          minimum: 0
          description: Cost/purchase price
        stock:
          type: integer
          minimum: 0
          description: Stock quantity
        status:
          type: string
          enum: [active, inactive, draft, archived]
          description: Product status
        image_path:
          type: string
          nullable: true
          description: Primary image path
        reorder_point:
          type: integer
          nullable: true
          minimum: 0
          description: Minimum stock level before alert
        reorder_quantity:
          type: integer
          nullable: true
          minimum: 1
          description: Suggested reorder quantity
        low_stock_alert_enabled:
          type: boolean
          description: Enable low stock alerts
        has_variants:
          type: boolean
          description: Whether product has variants
        manage_stock_by_variant:
          type: boolean
          description: Manage stock at variant level
        supplier_id:
          type: string
          format: uuid
          nullable: true
          description: Supplier UUID
        uom:
          type: string
          nullable: true
          maxLength: 50
          description: Unit of Measure
        tax_rate:
          type: number
          format: decimal
          nullable: true
          minimum: 0
          maximum: 100
          description: Tax rate percentage
        tax_inclusive:
          type: boolean
          description: Whether price includes tax
        tag_ids:
          type: array
          items:
            type: string
            format: uuid
          description: Array of tag UUIDs to attach (replaces existing)


    # ===================================
    # PUBLIC SCHEMAS
    # ===================================
    PublicSettings:
      type: object
      description: Public tenant settings (no authentication required)
      properties:
        tenant_name:
          type: string
          example: "My Store"
        currency:
          type: string
          example: "IDR"
        timezone:
          type: string
          example: "Asia/Jakarta"
        logo_url:
          type: string
          nullable: true
        theme_color:
          type: string
          nullable: true
        contact_email:
          type: string
          nullable: true
        contact_phone:
          type: string
          nullable: true
        address:
          type: string
          nullable: true
        business_hours:
          type: object
          additionalProperties: true
          nullable: true

    # ===================================
    # CATEGORY REQUEST SCHEMAS
    # ===================================
    CategoryCreateRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          maxLength: 255
          description: Category name
          example: "Electronics"
        description:
          type: string
          nullable: true
          description: Category description

    CategoryUpdateRequest:
      type: object
      description: All fields optional for partial updates
      properties:
        name:
          type: string
          maxLength: 255
          description: Category name
        description:
          type: string
          nullable: true
          description: Category description

    # ===================================
    # SUPPLIER SCHEMAS
    # ===================================
    Supplier:
      type: object
      required:
        - id
        - tenant_id
        - name
      properties:
        id:
          type: string
          format: uuid
          description: Supplier UUID
        tenant_id:
          type: string
          format: uuid
          description: Tenant UUID
        name:
          type: string
          maxLength: 255
          description: Supplier name
          example: "ABC Supplies Co."
        contact_person:
          type: string
          nullable: true
          maxLength: 255
          description: Contact person name
        email:
          type: string
          nullable: true
          maxLength: 255
          description: Supplier email
        phone:
          type: string
          nullable: true
          maxLength: 50
          description: Supplier phone number
        address:
          type: string
          nullable: true
          description: Supplier address
        notes:
          type: string
          nullable: true
          description: Internal notes
        is_active:
          type: boolean
          default: true
          description: Whether supplier is active
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true

    SupplierCreateRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          maxLength: 255
          description: Supplier name
        contact_person:
          type: string
          nullable: true
          maxLength: 255
        email:
          type: string
          nullable: true
          maxLength: 255
        phone:
          type: string
          nullable: true
          maxLength: 50
        address:
          type: string
          nullable: true
        notes:
          type: string
          nullable: true
        is_active:
          type: boolean
          default: true

    SupplierUpdateRequest:
      type: object
      description: All fields optional for partial updates
      properties:
        name:
          type: string
          maxLength: 255
        contact_person:
          type: string
          nullable: true
          maxLength: 255
        email:
          type: string
          nullable: true
          maxLength: 255
        phone:
          type: string
          nullable: true
          maxLength: 50
        address:
          type: string
          nullable: true
        notes:
          type: string
          nullable: true
        is_active:
          type: boolean

    # ===================================
    # TAG SCHEMAS
    # ===================================
    Tag:
      type: object
      required:
        - id
        - tenant_id
        - name
      properties:
        id:
          type: string
          format: uuid
          description: Tag UUID
        tenant_id:
          type: string
          format: uuid
          description: Tenant UUID
        name:
          type: string
          maxLength: 100
          description: Tag name
          example: "Seasonal"
        slug:
          type: string
          maxLength: 100
          description: URL-friendly slug
          example: "seasonal"
        color:
          type: string
          nullable: true
          maxLength: 7
          description: Hex color code
          example: "#FF5733"
        products_count:
          type: integer
          readOnly: true
          description: Number of products with this tag
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true

    TagCreateRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          maxLength: 100
          description: Tag name
        color:
          type: string
          nullable: true
          maxLength: 7
          pattern: '^#[0-9A-Fa-f]{6}$'
          description: Hex color code

    TagUpdateRequest:
      type: object
      description: All fields optional for partial updates
      properties:
        name:
          type: string
          maxLength: 100
        color:
          type: string
          nullable: true
          maxLength: 7
          pattern: '^#[0-9A-Fa-f]{6}$'

    # ===================================
    # SKU PATTERN SCHEMAS
    # ===================================
    SKUPattern:
      type: object
      properties:
        pattern_name:
          type: string
          example: "Category-Sequential"
        pattern_format:
          type: string
          example: "{category_code}-{seq:4}"
        description:
          type: string
          example: "Category code + 4-digit sequence"

    SKUGenerateRequest:
      type: object
      required:
        - pattern
      properties:
        pattern:
          type: string
          description: SKU pattern with placeholders
          example: "{category_code}-{seq:4}"
        product_id:
          type: string
          format: uuid
          nullable: true
          description: Product UUID for context variables

    SKUPreviewRequest:
      type: object
      required:
        - pattern
      properties:
        pattern:
          type: string
          description: SKU pattern to preview
        sample_data:
          type: object
          additionalProperties: true
          description: Sample data for preview

    # ===================================
    # ROLE & PERMISSION SCHEMAS
    # ===================================
    Role:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: integer
          description: Role ID
        name:
          type: string
          description: Role name
          example: "Cashier"
        guard_name:
          type: string
          description: Guard name
          example: "api"
        tenant_id:
          type: string
          format: uuid
          nullable: true
          description: Tenant UUID (null for HQ roles)
        permissions:
          type: array
          items:
            $ref: '#/components/schemas/Permission'
          description: Permissions assigned to this role
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true

    RoleCreateRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          maxLength: 255
          description: Role name
        permissions:
          type: array
          items:
            type: string
          description: Array of permission names to assign

    RoleUpdateRequest:
      type: object
      description: All fields optional for partial updates
      properties:
        name:
          type: string
          maxLength: 255
        permissions:
          type: array
          items:
            type: string
          description: Array of permission names (replaces existing)

    Permission:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: integer
          description: Permission ID
        name:
          type: string
          description: Permission name
          example: "products.view"
        guard_name:
          type: string
          description: Guard name
          example: "api"
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true

    # ===================================
    # TENANT SETTINGS SCHEMAS
    # ===================================
    TenantSettings:
      type: object
      description: Complete tenant settings (authenticated)
      properties:
        business_name:
          type: string
        currency:
          type: string
          example: "IDR"
        timezone:
          type: string
          example: "Asia/Jakarta"
        date_format:
          type: string
          example: "d/m/Y"
        time_format:
          type: string
          example: "H:i"
        tax_enabled:
          type: boolean
        default_tax_rate:
          type: number
          format: float
        logo_url:
          type: string
          nullable: true
        receipt_footer:
          type: string
          nullable: true
        low_stock_threshold:
          type: integer
          default: 10
        auto_generate_sku:
          type: boolean
          default: false
        sku_pattern:
          type: string
          nullable: true
        public:
          type: object
          description: Public-facing settings (subset)
          additionalProperties: true

    TenantSettingsUpdateRequest:
      type: object
      description: All fields optional for partial updates
      additionalProperties: true

    # ===================================
    # STOCK ALERT SCHEMAS
    # ===================================
    StockAdjustmentReason:
      type: object
      properties:
        reason:
          type: string
          enum: [purchase, sale, damage, expired, theft, count_adjustment, return, transfer, other]
          description: Adjustment reason code
        label:
          type: string
          description: Human-readable label
          example: "Purchase Order"

    StockAlertStats:
      type: object
      properties:
        total_alerts:
          type: integer
          description: Total active alerts
        critical_count:
          type: integer
          description: Critical stock alerts (0 stock)
        low_count:
          type: integer
          description: Low stock alerts
        normal_count:
          type: integer
          description: Normal stock levels

    LowStockProduct:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        sku:
          type: string
        stock:
          type: integer
        reorder_point:
          type: integer
          nullable: true
        stock_status:
          type: string
          enum: [normal, low, critical, out_of_stock]

    # ===================================
    # PRODUCT ANALYTICS SCHEMAS
    # ===================================
    ProductSalesMetrics:
      type: object
      description: Sales metrics for a product
      properties:
        total_revenue:
          type: number
          format: double
        total_orders:
          type: integer
        total_quantity_sold:
          type: integer
        average_order_value:
          type: number
          format: double
        period_start:
          type: string
          format: date
        period_end:
          type: string
          format: date

    ProductStockMetrics:
      type: object
      description: Stock metrics for a product
      properties:
        current_stock:
          type: integer
        reorder_point:
          type: integer
          nullable: true
        stock_status:
          type: string
          enum: [normal, low, critical, out_of_stock]
        stock_value:
          type: number
          format: double
        stock_movements:
          type: array
          items:
            type: object
            properties:
              date:
                type: string
                format: date
              quantity:
                type: integer
              type:
                type: string
                enum: [in, out, adjustment]

    ProductProfitMetrics:
      type: object
      description: Profit metrics for a product
      properties:
        total_profit:
          type: number
          format: double
        profit_margin:
          type: number
          format: float
          description: Profit margin percentage
        cost_of_goods_sold:
          type: number
          format: double
        total_revenue:
          type: number
          format: double
        period_start:
          type: string
          format: date
        period_end:
          type: string
          format: date

    # ========================================
    # Tier 4: Product Variants & Stock Management Schemas
    # ========================================

    ProductVariant:
      type: object
      description: "Product variant with attributes, pricing, and stock tracking. Variants allow products to have multiple SKUs with different attributes (e.g., size, color)."
      required:
        - id
        - tenant_id
        - product_id
        - sku
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        tenant_id:
          type: string
          format: uuid
          readOnly: true
        product_id:
          type: string
          format: uuid
          description: "Parent product ID"
        sku:
          type: string
          maxLength: 191
          description: "Unique SKU for this variant"
        name:
          type: string
          maxLength: 191
          nullable: true
          description: "Optional variant name (e.g., 'Red Large Cotton')"
        attributes:
          type: object
          additionalProperties: true
          nullable: true
          description: "JSONB object of attribute key-value pairs (e.g., {color: 'Red', size: 'Large'})"
          example:
            color: "Red"
            size: "Large"
            material: "Cotton"
        price:
          type: number
          format: decimal
          description: "Variant price (decimal 10,2)"
          example: 29.99
        cost_price:
          type: number
          format: decimal
          nullable: true
          description: "Cost price for profit margin calculation (decimal 10,2)"
          example: 15.00
        price_modifier:
          type: number
          format: decimal
          nullable: true
          description: "Price adjustment from base product price (decimal 10,2). Positive or negative."
          example: 5.00
        stock:
          type: integer
          default: 0
          description: "Current stock quantity"
        reserved_stock:
          type: integer
          default: 0
          description: "Stock reserved for pending orders"
        available_stock:
          type: integer
          readOnly: true
          description: "Available stock (stock - reserved_stock)"
        reorder_point:
          type: integer
          nullable: true
          description: "Minimum stock level before triggering low stock alert"
        reorder_quantity:
          type: integer
          nullable: true
          description: "Suggested quantity to reorder"
        low_stock_alert_enabled:
          type: boolean
          default: false
          description: "Enable low stock alerts for this variant"
        image_path:
          type: string
          nullable: true
          description: "Variant-specific image path (fallback to product image if null)"
        thumbnail_path:
          type: string
          nullable: true
          description: "Variant-specific thumbnail path"
        image_url:
          type: string
          nullable: true
          readOnly: true
          description: "Full image URL (accessor). Falls back to product image if variant has no image."
        thumbnail_url:
          type: string
          nullable: true
          readOnly: true
          description: "Full thumbnail URL (accessor). Falls back to image_url if no thumbnail."
        barcode:
          type: string
          maxLength: 191
          nullable: true
          description: "Variant-specific barcode (if different from product barcode)"
        is_active:
          type: boolean
          default: true
          description: "Whether variant is active and available for sale"
        is_default:
          type: boolean
          default: false
          description: "Whether this is the default variant for the product"
        sort_order:
          type: integer
          default: 0
          description: "Display order for variant listing"
        notes:
          type: string
          nullable: true
          description: "Internal notes"
        metadata:
          type: object
          additionalProperties: true
          nullable: true
          description: "JSONB metadata for custom fields"
        display_name:
          type: string
          readOnly: true
          description: "Generated display name from variant name or attributes (e.g., 'Red - Large - Cotton')"
        profit_margin:
          type: number
          format: float
          nullable: true
          readOnly: true
          description: "Profit margin percentage: ((price - cost) / price) * 100"
        stock_status:
          type: string
          enum: [normal, low, critical, out_of_stock]
          readOnly: true
          description: "Current stock status based on reorder point"
        product:
          $ref: '#/components/schemas/Product'
        analytics:
          type: array
          items:
            type: object
          readOnly: true
          description: "Variant analytics data (Phase 8)"
        created_at:
          type: string
          format: date-time
          readOnly: true
          example: "2024-01-15 10:30:00"
        updated_at:
          type: string
          format: date-time
          readOnly: true
          example: "2024-01-15 10:30:00"
        deleted_at:
          type: string
          format: date-time
          nullable: true
          readOnly: true
          example: "2024-01-15 10:30:00"

    ProductVariantCreateRequest:
      type: object
      description: "Request schema for creating a product variant"
      required:
        - sku
        - price
      properties:
        sku:
          type: string
          maxLength: 191
          description: "Unique SKU for this variant"
        name:
          type: string
          maxLength: 191
          nullable: true
        attributes:
          type: object
          additionalProperties: true
          nullable: true
          description: "Attribute key-value pairs (e.g., {color: 'Red', size: 'Large'})"
        price:
          type: number
          format: decimal
          minimum: 0
        cost_price:
          type: number
          format: decimal
          minimum: 0
          nullable: true
        price_modifier:
          type: number
          format: decimal
          nullable: true
        stock:
          type: integer
          minimum: 0
          default: 0
        reorder_point:
          type: integer
          minimum: 0
          nullable: true
        reorder_quantity:
          type: integer
          minimum: 0
          nullable: true
        low_stock_alert_enabled:
          type: boolean
          default: false
        image_path:
          type: string
          nullable: true
        thumbnail_path:
          type: string
          nullable: true
        barcode:
          type: string
          maxLength: 191
          nullable: true
        is_active:
          type: boolean
          default: true
        is_default:
          type: boolean
          default: false
        sort_order:
          type: integer
          default: 0
        notes:
          type: string
          nullable: true
        metadata:
          type: object
          additionalProperties: true
          nullable: true

    ProductVariantUpdateRequest:
      type: object
      description: "Request schema for updating a product variant (all fields optional for PATCH)"
      properties:
        sku:
          type: string
          maxLength: 191
        name:
          type: string
          maxLength: 191
          nullable: true
        attributes:
          type: object
          additionalProperties: true
          nullable: true
        price:
          type: number
          format: decimal
          minimum: 0
        cost_price:
          type: number
          format: decimal
          minimum: 0
          nullable: true
        price_modifier:
          type: number
          format: decimal
          nullable: true
        stock:
          type: integer
          minimum: 0
        reorder_point:
          type: integer
          minimum: 0
          nullable: true
        reorder_quantity:
          type: integer
          minimum: 0
          nullable: true
        low_stock_alert_enabled:
          type: boolean
        image_path:
          type: string
          nullable: true
        thumbnail_path:
          type: string
          nullable: true
        barcode:
          type: string
          maxLength: 191
          nullable: true
        is_active:
          type: boolean
        is_default:
          type: boolean
        sort_order:
          type: integer
        notes:
          type: string
          nullable: true
        metadata:
          type: object
          additionalProperties: true
          nullable: true

    VariantAttribute:
      type: object
      description: "Dynamic attribute definition for product variants (e.g., Color, Size, Material). Attributes have multiple values and can affect pricing."
      required:
        - id
        - tenant_id
        - name
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        tenant_id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          maxLength: 191
          description: "Attribute name (e.g., 'Color', 'Size', 'Material')"
        slug:
          type: string
          maxLength: 191
          description: "URL-friendly slug (auto-generated from name)"
        description:
          type: string
          nullable: true
          description: "Attribute description"
        values:
          type: array
          items:
            type: string
          description: "JSONB array of possible values (e.g., ['Red', 'Blue', 'Green'])"
          example: ["Small", "Medium", "Large", "X-Large"]
        display_type:
          type: string
          enum: [select, radio, button, swatch]
          default: select
          description: "UI display type for this attribute"
        sort_order:
          type: integer
          default: 0
          description: "Display order"
        is_active:
          type: boolean
          default: true
          description: "Whether attribute is active and available"
        price_modifiers:
          type: object
          additionalProperties:
            type: number
            format: decimal
          nullable: true
          description: "JSONB object mapping values to price modifiers (e.g., {'Large': 5.00, 'X-Large': 10.00})"
          example:
            Large: 5.00
            X-Large: 10.00
        visual_settings:
          type: object
          additionalProperties: true
          nullable: true
          description: "JSONB object for UI colors, swatches, images per value (e.g., {'Red': {color: '#FF0000'}})"
          example:
            Red:
              color: "#FF0000"
              swatch_image: "/images/red-swatch.png"
            Blue:
              color: "#0000FF"
              swatch_image: "/images/blue-swatch.png"
        usage_count:
          type: integer
          default: 0
          readOnly: true
          description: "How many products use this attribute"
        created_at:
          type: string
          format: date-time
          readOnly: true
          example: "2024-01-15 10:30:00"
        updated_at:
          type: string
          format: date-time
          readOnly: true
          example: "2024-01-15 10:30:00"
        deleted_at:
          type: string
          format: date-time
          nullable: true
          readOnly: true
          example: "2024-01-15 10:30:00"

    VariantAttributeCreateRequest:
      type: object
      description: "Request schema for creating a variant attribute"
      required:
        - name
        - values
      properties:
        name:
          type: string
          maxLength: 191
        slug:
          type: string
          maxLength: 191
          nullable: true
          description: "Auto-generated if not provided"
        description:
          type: string
          nullable: true
        values:
          type: array
          items:
            type: string
          minItems: 1
        display_type:
          type: string
          enum: [select, radio, button, swatch]
          default: select
        sort_order:
          type: integer
          default: 0
        is_active:
          type: boolean
          default: true
        price_modifiers:
          type: object
          additionalProperties:
            type: number
            format: decimal
          nullable: true
        visual_settings:
          type: object
          additionalProperties: true
          nullable: true

    VariantAttributeUpdateRequest:
      type: object
      description: "Request schema for updating a variant attribute (all fields optional)"
      properties:
        name:
          type: string
          maxLength: 191
        slug:
          type: string
          maxLength: 191
          nullable: true
        description:
          type: string
          nullable: true
        values:
          type: array
          items:
            type: string
          minItems: 1
        display_type:
          type: string
          enum: [select, radio, button, swatch]
        sort_order:
          type: integer
        is_active:
          type: boolean
        price_modifiers:
          type: object
          additionalProperties:
            type: number
            format: decimal
          nullable: true
        visual_settings:
          type: object
          additionalProperties: true
          nullable: true

    StockAdjustment:
      type: object
      description: "Stock adjustment record tracking all stock increases/decreases/corrections"
      required:
        - id
        - tenant_id
        - product_id
        - quantity
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        tenant_id:
          type: string
          format: uuid
          readOnly: true
        product_id:
          type: string
          format: uuid
          description: "Product being adjusted"
        user_id:
          type: string
          format: uuid
          nullable: true
          description: "User who made the adjustment"
        quantity:
          type: integer
          description: "Quantity change (positive for increase, negative for decrease)"
          example: -5
        reason:
          type: string
          nullable: true
          description: "Reason for adjustment (e.g., 'damaged', 'restock', 'correction', 'sold')"
        notes:
          type: string
          nullable: true
          description: "Additional notes"
        product:
          $ref: '#/components/schemas/Product'
        user:
          $ref: '#/components/schemas/User'
        created_at:
          type: string
          format: date-time
          readOnly: true
          example: "2024-01-15 10:30:00"
        updated_at:
          type: string
          format: date-time
          readOnly: true
          example: "2024-01-15 10:30:00"

    StockAdjustmentCreateRequest:
      type: object
      description: "Request schema for creating a stock adjustment"
      required:
        - product_id
        - quantity
      properties:
        product_id:
          type: string
          format: uuid
        quantity:
          type: integer
          description: "Positive for increase, negative for decrease"
        reason:
          type: string
          nullable: true
        notes:
          type: string
          nullable: true

    StockAlert:
      type: object
      description: "Low stock alert with severity levels and workflow tracking (Phase 5: Stock Management)"
      required:
        - id
        - tenant_id
        - product_id
        - current_stock
        - severity
        - status
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        tenant_id:
          type: string
          format: uuid
          readOnly: true
        product_id:
          type: string
          format: uuid
          description: "Product with low stock"
        current_stock:
          type: integer
          description: "Stock level when alert was triggered"
        reorder_point:
          type: integer
          description: "Reorder point threshold"
        severity:
          type: string
          enum: [low, critical, out_of_stock]
          description: "Alert severity level"
        status:
          type: string
          enum: [pending, acknowledged, resolved, dismissed]
          description: "Alert workflow status"
        notified:
          type: boolean
          default: false
          description: "Whether notification has been sent"
        notified_at:
          type: string
          format: date-time
          nullable: true
        acknowledged_by:
          type: string
          format: uuid
          nullable: true
          description: "User who acknowledged the alert"
        acknowledged_at:
          type: string
          format: date-time
          nullable: true
        acknowledged_notes:
          type: string
          nullable: true
        resolved_by:
          type: string
          format: uuid
          nullable: true
          description: "User who resolved the alert"
        resolved_at:
          type: string
          format: date-time
          nullable: true
        resolved_notes:
          type: string
          nullable: true
        dismissed_by:
          type: string
          format: uuid
          nullable: true
          description: "User who dismissed the alert"
        dismissed_at:
          type: string
          format: date-time
          nullable: true
        dismissed_notes:
          type: string
          nullable: true
        notes:
          type: string
          nullable: true
          description: "General notes"
        severity_color:
          type: string
          readOnly: true
          description: "UI color for severity (yellow, orange, red)"
        status_color:
          type: string
          readOnly: true
          description: "UI color for status (red, yellow, green, gray)"
        is_actionable:
          type: boolean
          readOnly: true
          description: "Whether alert is pending or acknowledged (requires action)"
        is_closed:
          type: boolean
          readOnly: true
          description: "Whether alert is resolved or dismissed"
        product:
          $ref: '#/components/schemas/Product'
        acknowledged_by_user:
          $ref: '#/components/schemas/User'
        resolved_by_user:
          $ref: '#/components/schemas/User'
        dismissed_by_user:
          $ref: '#/components/schemas/User'
        created_at:
          type: string
          format: date-time
          readOnly: true
          example: "2024-01-15 10:30:00"
        updated_at:
          type: string
          format: date-time
          readOnly: true
          example: "2024-01-15 10:30:00"

    StockAlertAcknowledgeRequest:
      type: object
      description: "Request to acknowledge a stock alert"
      properties:
        notes:
          type: string
          nullable: true
          description: "Optional acknowledgment notes"

    StockAlertResolveRequest:
      type: object
      description: "Request to resolve a stock alert (stock has been replenished)"
      properties:
        notes:
          type: string
          nullable: true
          description: "Optional resolution notes"

    StockAlertDismissRequest:
      type: object
      description: "Request to dismiss a stock alert (false positive or intentional low stock)"
      properties:
        notes:
          type: string
          nullable: true
          description: "Optional dismissal notes"


    # ===================================
    # TIER 5: ORDER & SALES SCHEMAS
    # ===================================
    Customer:
      type: object
      description: "Customer entity for tracking customer information across orders. Supports optional email, phone, address, and custom tags."
      required:
        - id
        - tenant_id
        - name
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
          description: "Unique customer identifier"
        tenant_id:
          type: string
          format: uuid
          readOnly: true
          description: "Tenant owner of this customer"
        name:
          type: string
          maxLength: 255
          description: "Customer name"
          example: "John Doe"
        email:
          type: string
          format: email
          maxLength: 255
          nullable: true
          description: "Customer email address (optional)"
          example: "john.doe@example.com"
        phone:
          type: string
          maxLength: 255
          nullable: true
          description: "Customer phone number (optional)"
          example: "+62 812-3456-7890"
        address:
          type: string
          nullable: true
          description: "Customer address (text field, optional)"
          example: "Jl. Merdeka No. 123, Jakarta"
        tags:
          type: array
          items:
            type: string
          nullable: true
          description: "JSONB array of custom tags for categorization (e.g., ['VIP', 'Wholesale'])"
          example: ["VIP", "Regular"]
        created_at:
          type: string
          format: date-time
          readOnly: true
          description: "Customer creation timestamp (Laravel format: YYYY-MM-DD HH:MM:SS)"
          example: "2024-01-15 10:30:00"
        updated_at:
          type: string
          format: date-time
          readOnly: true
          description: "Last update timestamp"
          example: "2024-01-20 14:45:00"
        # Relationships
        orders:
          type: array
          items:
            $ref: '#/components/schemas/Order'
          readOnly: true
          description: "List of orders placed by this customer (hasMany relationship)"

    CustomerRequest:
      type: object
      description: "Request schema for creating or updating a customer. Name is required for creation."
      required:
        - name
      properties:
        name:
          type: string
          maxLength: 255
          description: "Customer name (required)"
          example: "John Doe"
        email:
          type: string
          format: email
          maxLength: 255
          nullable: true
          description: "Customer email address (optional)"
          example: "john.doe@example.com"
        phone:
          type: string
          maxLength: 255
          nullable: true
          description: "Customer phone number (optional)"
          example: "+62 812-3456-7890"
        address:
          type: string
          nullable: true
          description: "Customer address (optional)"
          example: "Jl. Merdeka No. 123, Jakarta"
        tags:
          type: array
          items:
            type: string
          nullable: true
          description: "Array of custom tags (optional)"
          example: ["VIP", "Wholesale"]

    # ----------------------------------
    # 2. ORDER SCHEMAS
    # ----------------------------------

    Order:
      type: object
      description: "Sales order entity. Tracks completed transactions with payment details, customer info, and line items. Status workflow: draft â†’ paid â†’ [cancelled|refunded]"
      required:
        - id
        - tenant_id
        - invoice_number
        - total_amount
        - status
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
          description: "Unique order identifier"
        tenant_id:
          type: string
          format: uuid
          readOnly: true
          description: "Tenant owner of this order"
        user_id:
          type: string
          format: uuid
          nullable: true
          description: "User (cashier/staff) who created this order"
        customer_id:
          type: string
          format: uuid
          nullable: true
          description: "Associated customer ID (nullable for walk-in customers)"
        invoice_number:
          type: string
          maxLength: 255
          description: "Unique invoice number (auto-generated or custom format)"
          example: "INV-2024-0001"
        total_amount:
          type: number
          format: decimal
          description: "Total order amount (decimal 15,2). Sum of all order items subtotals"
          example: 150000.00
          minimum: 0
        payment_method:
          type: string
          enum: [cash, card, qris]
          nullable: true
          description: "Payment method used for this order"
          example: "cash"
        amount_paid:
          type: number
          format: decimal
          description: "Amount paid by customer (decimal 15,2). Can be >= total_amount"
          example: 200000.00
          minimum: 0
          default: 0
        change_amount:
          type: number
          format: decimal
          description: "Change returned to customer (decimal 15,2). Calculated as amount_paid - total_amount"
          example: 50000.00
          minimum: 0
          default: 0
        status:
          type: string
          enum: [draft, paid, cancelled, refunded]
          description: "Order status: draft (pending), paid (completed), cancelled (voided), refunded (payment returned)"
          example: "paid"
          default: "paid"
        created_at:
          type: string
          format: date-time
          readOnly: true
          description: "Order creation timestamp (Laravel format: YYYY-MM-DD HH:MM:SS)"
          example: "2024-01-15 10:30:00"
        updated_at:
          type: string
          format: date-time
          readOnly: true
          description: "Last update timestamp"
          example: "2024-01-15 10:35:00"
        # Relationships
        tenant:
          $ref: '#/components/schemas/Tenant'
        user:
          $ref: '#/components/schemas/User'
        customer:
          $ref: '#/components/schemas/Customer'
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
          readOnly: true
          description: "Order line items (hasMany relationship)"

    OrderItem:
      type: object
      description: "Order line item representing a single product in an order. Captures product snapshot (name, price) at time of sale to preserve historical data even if product changes."
      required:
        - id
        - order_id
        - product_id
        - product_name
        - quantity
        - price
        - subtotal
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
          description: "Unique order item identifier"
        order_id:
          type: string
          format: uuid
          description: "Parent order ID"
        product_id:
          type: string
          format: uuid
          description: "Product ID (references products table with RESTRICT on delete)"
        product_name:
          type: string
          maxLength: 255
          description: "Product name snapshot at time of sale (preserves historical data)"
          example: "Blue T-Shirt - Large"
        quantity:
          type: integer
          description: "Quantity sold"
          example: 2
          minimum: 1
        price:
          type: number
          format: decimal
          description: "Unit price at time of sale (decimal 15,2)"
          example: 50000.00
          minimum: 0
        subtotal:
          type: number
          format: decimal
          description: "Line item subtotal (decimal 15,2). Calculated as quantity * price"
          example: 100000.00
          minimum: 0
        created_at:
          type: string
          format: date-time
          readOnly: true
          description: "Item creation timestamp (Laravel format: YYYY-MM-DD HH:MM:SS)"
          example: "2024-01-15 10:30:00"
        updated_at:
          type: string
          format: date-time
          readOnly: true
          description: "Last update timestamp"
          example: "2024-01-15 10:30:00"
        # Relationships
        order:
          $ref: '#/components/schemas/Order'
        product:
          $ref: '#/components/schemas/Product'

    # ----------------------------------
    # 3. ORDER REQUEST SCHEMAS
    # ----------------------------------

    OrderRequest:
      type: object
      description: "Request schema for creating a new order. Validates stock availability before order creation. Auto-calculates total_amount, change_amount, and generates invoice_number."
      required:
        - items
        - payment_method
        - amount_paid
      properties:
        customer_id:
          type: string
          format: uuid
          nullable: true
          description: "Optional customer ID. Null for walk-in customers without account"
          example: "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
        payment_method:
          type: string
          enum: [cash, card, qris]
          description: "Payment method (required)"
          example: "cash"
        amount_paid:
          type: number
          format: decimal
          description: "Amount paid by customer (required). Must be >= total_amount for successful payment"
          example: 200000.00
          minimum: 0
        items:
          type: array
          description: "Array of order items (required, minimum 1 item)"
          minItems: 1
          items:
            type: object
            required:
              - product_id
              - quantity
              - price
            properties:
              product_id:
                type: string
                format: uuid
                description: "Product ID (required)"
                example: "b2c3d4e5-f6a7-8901-bcde-f12345678901"
              quantity:
                type: integer
                description: "Quantity to order (required, minimum 1)"
                example: 2
                minimum: 1
              price:
                type: number
                format: decimal
                description: "Unit price (required). Should match current product price but can be overridden for discounts"
                example: 50000.00
                minimum: 0

    OrderUpdateRequest:
      type: object
      description: "Request schema for updating order payment details or status. All fields optional (PATCH semantics)."
      properties:
        payment_method:
          type: string
          enum: [cash, card, qris]
          description: "Update payment method"
          example: "card"
        amount_paid:
          type: number
          format: decimal
          description: "Update amount paid"
          example: 150000.00
          minimum: 0
        status:
          type: string
          enum: [draft, paid, cancelled, refunded]
          description: "Update order status"
          example: "paid"


    # ===================================
    # TIER 6: REPORTS & ANALYTICS SCHEMAS
    # ===================================
    # 1. VARIANT ANALYTICS SCHEMAS
    # ----------------------------------

    VariantAnalytics:
      type: object
      description: "Analytics data for a product variant over a specific time period. Tracks sales metrics, stock movements, performance indicators, and predictions. Period types: daily, weekly, monthly."
      required:
        - id
        - tenant_id
        - product_variant_id
        - period_date
        - period_start
        - period_end
        - period_type
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
          description: "Unique analytics record identifier"
        tenant_id:
          type: string
          format: uuid
          readOnly: true
          description: "Tenant owner of this analytics record"
        product_variant_id:
          type: string
          format: uuid
          description: "Product variant being analyzed"
        period_date:
          type: string
          format: date
          description: "Reference date for this analytics snapshot (YYYY-MM-DD)"
          example: "2024-01-15"
        period_start:
          type: string
          format: date
          description: "Period start date (YYYY-MM-DD)"
          example: "2024-01-01"
        period_end:
          type: string
          format: date
          description: "Period end date (YYYY-MM-DD)"
          example: "2024-01-31"
        period_type:
          type: string
          enum: [daily, weekly, monthly]
          default: daily
          description: "Type of aggregation period"
          example: "monthly"

        # Sales Metrics
        total_orders:
          type: integer
          minimum: 0
          default: 0
          description: "Number of orders containing this variant during period"
          example: 45
        quantity_sold:
          type: integer
          minimum: 0
          default: 0
          description: "Total units sold during period"
          example: 120
        revenue:
          type: number
          format: decimal
          minimum: 0
          default: 0.00
          description: "Total revenue generated (decimal 15,2)"
          example: 3600000.00
        profit:
          type: number
          format: decimal
          default: 0.00
          description: "Total profit: revenue - cost (decimal 15,2)"
          example: 1200000.00

        # Stock Metrics
        stock_start:
          type: integer
          minimum: 0
          default: 0
          description: "Stock quantity at start of period"
          example: 200
        stock_end:
          type: integer
          minimum: 0
          default: 0
          description: "Stock quantity at end of period"
          example: 80
        stock_added:
          type: integer
          minimum: 0
          default: 0
          description: "Stock added during period (purchases, adjustments)"
          example: 0
        stock_removed:
          type: integer
          minimum: 0
          default: 0
          description: "Stock removed during period (sales + adjustments)"
          example: 120
        days_out_of_stock:
          type: integer
          minimum: 0
          default: 0
          description: "Number of days out of stock during period"
          example: 2

        # Performance Indicators
        conversion_rate:
          type: number
          format: decimal
          minimum: 0
          maximum: 100
          default: 0.00
          description: "Percentage of views that resulted in sales (decimal 5,2)"
          example: 15.50
        view_count:
          type: integer
          minimum: 0
          default: 0
          description: "How many times variant was viewed during period"
          example: 290
        add_to_cart_count:
          type: integer
          minimum: 0
          default: 0
          description: "How many times variant was added to cart during period"
          example: 75

        # Ranking Metrics
        revenue_rank_percentile:
          type: number
          format: decimal
          minimum: 0
          maximum: 100
          nullable: true
          description: "Revenue ranking percentile among all variants (0-100). 80+ = top performer"
          example: 85.50
        quantity_rank_percentile:
          type: number
          format: decimal
          minimum: 0
          maximum: 100
          nullable: true
          description: "Quantity ranking percentile among all variants (0-100)"
          example: 78.20

        # Velocity Metrics
        stock_turnover_rate:
          type: number
          format: decimal
          nullable: true
          description: "Stock turnover rate: quantity_sold / avg_stock (decimal 8,4)"
          example: 0.6000
        avg_daily_sales:
          type: number
          format: decimal
          minimum: 0
          default: 0.00
          description: "Average units sold per day during period (decimal 10,2)"
          example: 3.87

        # Predictions (Optional - ML/AI populated)
        predicted_sales_next_period:
          type: integer
          nullable: true
          description: "Predicted units to sell in next period (based on trends)"
          example: 130
        predicted_stockout_date:
          type: string
          format: date
          nullable: true
          description: "Predicted date when stock will run out (YYYY-MM-DD)"
          example: "2024-02-25"

        # Timestamps
        created_at:
          type: string
          format: date-time
          readOnly: true
          description: "Analytics record creation timestamp"
          example: "2024-01-31 23:59:59"
        updated_at:
          type: string
          format: date-time
          readOnly: true
          description: "Last update timestamp"
          example: "2024-02-01 00:30:00"

        # Relationships
        variant:
          $ref: '#/components/schemas/ProductVariant'
        tenant:
          $ref: '#/components/schemas/Tenant'

    VariantAnalyticsRequest:
      type: object
      description: "Request filters for querying variant analytics data. Supports period filtering, period type selection, and result limiting."
      properties:
        period_type:
          type: string
          enum: [daily, weekly, monthly]
          default: daily
          description: "Aggregation period type"
          example: "monthly"
        period_start:
          type: string
          format: date
          description: "Filter analytics from this date onwards (YYYY-MM-DD)"
          example: "2024-01-01"
        period_end:
          type: string
          format: date
          description: "Filter analytics up to this date (YYYY-MM-DD)"
          example: "2024-01-31"
        limit:
          type: integer
          minimum: 1
          maximum: 365
          default: 30
          description: "Maximum number of analytics records to return"
          example: 30
        metric:
          type: string
          enum: [revenue, quantity_sold, profit, conversion_rate, stock_turnover_rate]
          default: revenue
          description: "Metric to sort/rank by for top performers queries"
          example: "revenue"

    # 2. TENANT ANALYTICS SCHEMAS
    # ----------------------------------

    TenantAnalyticsSummary:
      type: object
      description: "Tenant-wide analytics overview aggregating all products and variants. Provides high-level KPIs for dashboard display."
      properties:
        period_start:
          type: string
          format: date
          description: "Analytics period start date"
          example: "2024-01-01"
        period_end:
          type: string
          format: date
          description: "Analytics period end date"
          example: "2024-01-31"

        # Revenue Metrics
        total_revenue:
          type: number
          format: decimal
          description: "Total revenue across all products in period"
          example: 125000000.00
        total_profit:
          type: number
          format: decimal
          description: "Total profit across all products in period"
          example: 45000000.00
        profit_margin:
          type: number
          format: decimal
          description: "Overall profit margin percentage"
          example: 36.00

        # Sales Metrics
        total_orders:
          type: integer
          description: "Total number of orders in period"
          example: 1250
        total_units_sold:
          type: integer
          description: "Total units sold across all products"
          example: 3400
        average_order_value:
          type: number
          format: decimal
          description: "Average revenue per order"
          example: 100000.00

        # Product Metrics
        active_products_count:
          type: integer
          description: "Number of active products"
          example: 85
        products_sold_count:
          type: integer
          description: "Number of products that had sales in period"
          example: 72
        out_of_stock_count:
          type: integer
          description: "Number of products currently out of stock"
          example: 5

        # Performance Metrics
        top_revenue_product:
          type: object
          nullable: true
          description: "Product with highest revenue in period"
          properties:
            id: { type: string, format: uuid }
            name: { type: string }
            revenue: { type: number, format: decimal }
        top_quantity_product:
          type: object
          nullable: true
          description: "Product with highest quantity sold in period"
          properties:
            id: { type: string, format: uuid }
            name: { type: string }
            quantity_sold: { type: integer }

        # Trends
        revenue_trend:
          type: string
          enum: [increasing, decreasing, stable]
          description: "Revenue trend compared to previous period"
          example: "increasing"
        revenue_change_percent:
          type: number
          format: decimal
          description: "Percentage change in revenue compared to previous period"
          example: 12.50

    # 3. SALES REPORT SCHEMAS
    # ----------------------------------

    SalesReport:
      type: object
      description: "Detailed sales report with breakdown by product, category, payment method, and time period. Suitable for export to PDF/Excel."
      required:
        - report_date
        - period_start
        - period_end
      properties:
        report_date:
          type: string
          format: date-time
          description: "Report generation timestamp"
          example: "2024-02-01 10:00:00"
        period_start:
          type: string
          format: date
          description: "Reporting period start date"
          example: "2024-01-01"
        period_end:
          type: string
          format: date
          description: "Reporting period end date"
          example: "2024-01-31"

        # Summary Totals
        summary:
          type: object
          properties:
            total_revenue:
              type: number
              format: decimal
              example: 125000000.00
            total_profit:
              type: number
              format: decimal
              example: 45000000.00
            total_orders:
              type: integer
              example: 1250
            total_units_sold:
              type: integer
              example: 3400
            average_transaction:
              type: number
              format: decimal
              example: 100000.00

        # Breakdown by Product
        by_product:
          type: array
          items:
            type: object
            properties:
              product_id: { type: string, format: uuid }
              product_name: { type: string }
              quantity_sold: { type: integer }
              revenue: { type: number, format: decimal }
              profit: { type: number, format: decimal }
              profit_margin: { type: number, format: decimal }

        # Breakdown by Category
        by_category:
          type: array
          items:
            type: object
            properties:
              category_id: { type: string, format: uuid }
              category_name: { type: string }
              products_count: { type: integer }
              quantity_sold: { type: integer }
              revenue: { type: number, format: decimal }
              revenue_percentage: { type: number, format: decimal }

        # Breakdown by Payment Method
        by_payment_method:
          type: array
          items:
            type: object
            properties:
              payment_method: { type: string, enum: [cash, card, qris] }
              orders_count: { type: integer }
              revenue: { type: number, format: decimal }
              revenue_percentage: { type: number, format: decimal }

        # Daily Breakdown
        by_day:
          type: array
          items:
            type: object
            properties:
              date: { type: string, format: date }
              orders: { type: integer }
              revenue: { type: number, format: decimal }
              units_sold: { type: integer }

    # 4. PRODUCT ANALYTICS SCHEMAS
    # ----------------------------------

    ProductAnalyticsSummary:
      type: object
      description: "Analytics summary for a specific product aggregating all its variants. Used for product-level performance tracking."
      required:
        - product_id
      properties:
        product_id:
          type: string
          format: uuid
          description: "Product being analyzed"
        product_name:
          type: string
          description: "Product name"
          example: "T-Shirt Collection"
        variant_count:
          type: integer
          description: "Number of variants for this product"
          example: 8
        period_start:
          type: string
          format: date
          example: "2024-01-01"
        period_end:
          type: string
          format: date
          example: "2024-01-31"

        # Aggregated Sales Metrics
        total_revenue:
          type: number
          format: decimal
          description: "Total revenue across all variants"
          example: 15000000.00
        total_profit:
          type: number
          format: decimal
          description: "Total profit across all variants"
          example: 5500000.00
        total_orders:
          type: integer
          description: "Total orders containing this product (any variant)"
          example: 180
        total_quantity_sold:
          type: integer
          description: "Total units sold across all variants"
          example: 220

        # Average Metrics
        avg_conversion_rate:
          type: number
          format: decimal
          description: "Average conversion rate across all variants"
          example: 14.25
        avg_turnover_rate:
          type: number
          format: decimal
          description: "Average stock turnover rate across all variants"
          example: 0.5500

        # Best Performing Variant
        best_variant:
          type: object
          nullable: true
          properties:
            variant_id: { type: string, format: uuid }
            variant_sku: { type: string }
            revenue: { type: number, format: decimal }
            quantity_sold: { type: integer }

        # Variant Performance List
        variants:
          type: array
          items:
            type: object
            properties:
              variant_id: { type: string, format: uuid }
              variant_sku: { type: string }
              revenue: { type: number, format: decimal }
              quantity_sold: { type: integer }
              profit: { type: number, format: decimal }
              stock_end: { type: integer }

    # 5. TOP PERFORMERS SCHEMAS
    # ----------------------------------

    TopPerformersResponse:
      type: object
      description: "Response structure for top performing variants query. Returns ranked list of best-performing variants by selected metric."
      properties:
        period_type:
          type: string
          enum: [daily, weekly, monthly]
          description: "Period type used for analysis"
          example: "monthly"
        period_start:
          type: string
          format: date
          nullable: true
          example: "2024-01-01"
        period_end:
          type: string
          format: date
          nullable: true
          example: "2024-01-31"
        metric:
          type: string
          enum: [revenue, quantity_sold, profit, conversion_rate]
          description: "Metric used for ranking"
          example: "revenue"
        limit:
          type: integer
          description: "Number of top performers returned"
          example: 10
        performers:
          type: array
          items:
            type: object
            properties:
              rank:
                type: integer
                description: "Rank position (1 = best)"
                example: 1
              variant:
                $ref: '#/components/schemas/ProductVariant'
              analytics:
                $ref: '#/components/schemas/VariantAnalytics'
              metric_value:
                type: number
                description: "Value of the metric being ranked by"
                example: 3600000.00

    # 6. ANALYTICS COMPARISON SCHEMAS
    # ----------------------------------

    AnalyticsComparison:
      type: object
      description: "Comparison of analytics between multiple variants. Useful for A/B testing and performance benchmarking."
      properties:
        variants:
          type: array
          minItems: 2
          maxItems: 10
          description: "List of variant IDs to compare"
          items:
            type: string
            format: uuid
          example: ["uuid-1", "uuid-2", "uuid-3"]
        period_start:
          type: string
          format: date
          example: "2024-01-01"
        period_end:
          type: string
          format: date
          example: "2024-01-31"
        results:
          type: array
          items:
            type: object
            properties:
              variant_id: { type: string, format: uuid }
              variant_sku: { type: string }
              product_name: { type: string }
              revenue: { type: number, format: decimal }
              quantity_sold: { type: integer }
              profit: { type: number, format: decimal }
              conversion_rate: { type: number, format: decimal }
              stock_turnover_rate: { type: number, format: decimal }
              performance_status: 
                type: string
                enum: [excellent, good, average, poor]
                description: "Calculated performance status"

    # 7. PERFORMANCE SUMMARY SCHEMAS
    # ----------------------------------

    PerformanceSummary:
      type: object
      description: "High-level performance summary for tenant analytics dashboard. Provides quick insights into overall business performance."
      properties:
        period_type:
          type: string
          enum: [daily, weekly, monthly, quarterly, yearly]
          example: "monthly"
        period_label:
          type: string
          description: "Human-readable period label"
          example: "January 2024"

        # Performance Categories
        excellent_performers:
          type: object
          properties:
            count: { type: integer, description: "Number of variants performing excellently" }
            revenue_contribution: { type: number, format: decimal, description: "% of total revenue" }
        good_performers:
          type: object
          properties:
            count: { type: integer }
            revenue_contribution: { type: number, format: decimal }
        average_performers:
          type: object
          properties:
            count: { type: integer }
            revenue_contribution: { type: number, format: decimal }
        poor_performers:
          type: object
          properties:
            count: { type: integer }
            revenue_contribution: { type: number, format: decimal }

        # Stock Alerts
        stock_alerts:
          type: object
          properties:
            low_stock_count: { type: integer, description: "Variants with low stock" }
            out_of_stock_count: { type: integer, description: "Variants out of stock" }
            overstock_count: { type: integer, description: "Variants with slow movement" }

        # Recommendations
        recommendations:
          type: array
          items:
            type: object
            properties:
              type: 
                type: string
                enum: [restock, discount, discontinue, promote]
              variant_id: { type: string, format: uuid }
              variant_sku: { type: string }
              reason: { type: string }
              priority: 
                type: string
                enum: [high, medium, low]

    # 8. ANALYTICS REQUEST/RESPONSE WRAPPER
    # ----------------------------------

    AnalyticsResponse:
      type: object
      description: "Generic wrapper for analytics API responses"
      properties:
        success:
          type: boolean
          default: true
        data:
          type: object
          description: "Analytics data payload (structure varies by endpoint)"
        meta:
          type: object
          properties:
            generated_at:
              type: string
              format: date-time
              description: "Response generation timestamp"
            cache_ttl:
              type: integer
              description: "Cache TTL in seconds"
              example: 3600

    # ===================================
    # End of Tier 6 Schemas
    # ===================================

    # ===================================
    # UTILITY SCHEMAS
    # ===================================

    # ===================================
    # TIER 7: BOM ENGINE SCHEMAS
    # ===================================
# ===================================

    # ===================================
    # MATERIAL SCHEMAS
    # ===================================
    Material:
      type: object
      required:
        - id
        - tenant_id
        - name
        - unit
        - stock_quantity
      properties:
        id:
          type: string
          format: uuid
          description: Material UUID
        tenant_id:
          type: string
          format: uuid
          description: Tenant UUID
        name:
          type: string
          maxLength: 255
          description: Material name
          example: "Flour"
        sku:
          type: string
          nullable: true
          maxLength: 100
          description: Material SKU (unique per tenant)
          example: "MAT-FLOUR-001"
        description:
          type: string
          nullable: true
          description: Material description
        category:
          type: string
          nullable: true
          maxLength: 100
          description: Material category
          example: "Ingredients"
        unit:
          type: string
          enum: [kg, g, L, ml, pcs, box, bottle, can, bag]
          description: Unit of measure
          example: "kg"
        stock_quantity:
          type: number
          format: double
          description: Current stock quantity
          example: 50.5
        reorder_level:
          type: number
          format: double
          default: 0
          description: Reorder point for low stock alerts
          example: 10.0
        unit_cost:
          type: number
          format: double
          default: 0
          description: Cost per unit
          example: 25000.00
        supplier:
          type: string
          nullable: true
          maxLength: 255
          description: Supplier name
        is_low_stock:
          type: boolean
          readOnly: true
          description: Whether stock is below reorder level
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        deleted_at:
          type: string
          format: date-time
          nullable: true
          readOnly: true

    MaterialCreateRequest:
      type: object
      required:
        - name
        - unit
      properties:
        name:
          type: string
          maxLength: 255
          description: Material name
        sku:
          type: string
          nullable: true
          maxLength: 100
          description: Material SKU
        description:
          type: string
          nullable: true
        category:
          type: string
          nullable: true
          maxLength: 100
        unit:
          type: string
          enum: [kg, g, L, ml, pcs, box, bottle, can, bag]
        stock_quantity:
          type: number
          format: double
          default: 0
        reorder_level:
          type: number
          format: double
          default: 0
        unit_cost:
          type: number
          format: double
          default: 0
        supplier:
          type: string
          nullable: true
          maxLength: 255

    MaterialUpdateRequest:
      type: object
      description: All fields optional for partial updates
      properties:
        name:
          type: string
          maxLength: 255
        sku:
          type: string
          nullable: true
          maxLength: 100
        description:
          type: string
          nullable: true
        category:
          type: string
          nullable: true
          maxLength: 100
        unit:
          type: string
          enum: [kg, g, L, ml, pcs, box, bottle, can, bag]
        reorder_level:
          type: number
          format: double
        unit_cost:
          type: number
          format: double
        supplier:
          type: string
          nullable: true
          maxLength: 255

    # ===================================
    # RECIPE SCHEMAS
    # ===================================
    Recipe:
      type: object
      required:
        - id
        - tenant_id
        - product_id
        - name
        - yield_quantity
        - yield_unit
      properties:
        id:
          type: string
          format: uuid
          description: Recipe UUID
        tenant_id:
          type: string
          format: uuid
          description: Tenant UUID
        product_id:
          type: string
          format: uuid
          description: Product UUID this recipe is for
        name:
          type: string
          maxLength: 255
          description: Recipe name
          example: "Chocolate Cake Standard"
        description:
          type: string
          nullable: true
          description: Recipe description
        yield_quantity:
          type: number
          format: double
          description: Output quantity this recipe produces
          example: 10.0
        yield_unit:
          type: string
          enum: [pcs, kg, L, serving, batch]
          description: Unit of yield
          example: "pcs"
        is_active:
          type: boolean
          default: false
          description: Whether this recipe is active (only 1 active per product)
        notes:
          type: string
          nullable: true
          description: Internal recipe notes
        materials:
          type: array
          items:
            $ref: '#/components/schemas/RecipeMaterial'
          description: Materials required for this recipe
        total_cost:
          type: number
          format: double
          readOnly: true
          description: Total material cost for this recipe
        cost_per_unit:
          type: number
          format: double
          readOnly: true
          description: Cost per yield unit
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        deleted_at:
          type: string
          format: date-time
          nullable: true
          readOnly: true

    RecipeCreateRequest:
      type: object
      required:
        - product_id
        - name
        - yield_quantity
        - yield_unit
      properties:
        product_id:
          type: string
          format: uuid
          description: Product UUID
        name:
          type: string
          maxLength: 255
        description:
          type: string
          nullable: true
        yield_quantity:
          type: number
          format: double
          minimum: 0.001
        yield_unit:
          type: string
          enum: [pcs, kg, L, serving, batch]
        is_active:
          type: boolean
          default: false
        notes:
          type: string
          nullable: true
        materials:
          type: array
          items:
            $ref: '#/components/schemas/RecipeMaterialRequest'
          description: Materials to add to recipe

    RecipeUpdateRequest:
      type: object
      description: All fields optional for partial updates
      properties:
        name:
          type: string
          maxLength: 255
        description:
          type: string
          nullable: true
        yield_quantity:
          type: number
          format: double
          minimum: 0.001
        yield_unit:
          type: string
          enum: [pcs, kg, L, serving, batch]
        is_active:
          type: boolean
        notes:
          type: string
          nullable: true

    # ===================================
    # RECIPE MATERIAL SCHEMAS
    # ===================================
    RecipeMaterial:
      type: object
      required:
        - id
        - tenant_id
        - recipe_id
        - material_id
        - quantity_required
        - unit
      properties:
        id:
          type: string
          format: uuid
          description: Recipe Material UUID
        tenant_id:
          type: string
          format: uuid
          description: Tenant UUID
        recipe_id:
          type: string
          format: uuid
          description: Recipe UUID
        material_id:
          type: string
          format: uuid
          description: Material UUID
        quantity_required:
          type: number
          format: double
          description: Quantity needed for recipe
          example: 2.5
        unit:
          type: string
          description: Unit of measure (should match material.unit)
          example: "kg"
        waste_percentage:
          type: number
          format: float
          default: 0
          minimum: 0
          maximum: 100
          description: Expected waste percentage (e.g., 5 for 5%)
          example: 5.0
        effective_quantity:
          type: number
          format: double
          readOnly: true
          description: quantity_required * (1 + waste_percentage/100)
        notes:
          type: string
          nullable: true
          description: Material-specific notes
        material:
          $ref: '#/components/schemas/Material'
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true

    RecipeMaterialRequest:
      type: object
      required:
        - material_id
        - quantity_required
        - unit
      properties:
        material_id:
          type: string
          format: uuid
          description: Material UUID
        quantity_required:
          type: number
          format: double
          minimum: 0.001
        unit:
          type: string
          description: Unit of measure
        waste_percentage:
          type: number
          format: float
          default: 0
          minimum: 0
          maximum: 100
        notes:
          type: string
          nullable: true

    # ===================================
    # INVENTORY TRANSACTION SCHEMAS
    # ===================================
    InventoryTransaction:
      type: object
      required:
        - id
        - tenant_id
        - material_id
        - transaction_type
        - quantity_before
        - quantity_change
        - quantity_after
        - reason
      properties:
        id:
          type: string
          format: uuid
          description: Transaction UUID
        tenant_id:
          type: string
          format: uuid
          description: Tenant UUID
        material_id:
          type: string
          format: uuid
          description: Material UUID
        transaction_type:
          type: string
          enum: [adjustment, deduction, restock]
          description: Transaction type
        quantity_before:
          type: number
          format: double
          description: Stock quantity before transaction
        quantity_change:
          type: number
          format: double
          description: Quantity change (positive or negative)
        quantity_after:
          type: number
          format: double
          description: Stock quantity after transaction
        reason:
          type: string
          enum: [purchase, waste, damage, count_adjustment, production, sale, other]
          description: Reason for transaction
        notes:
          type: string
          nullable: true
          description: Transaction notes
        user_id:
          type: string
          format: uuid
          nullable: true
          description: User who created transaction
        reference_type:
          type: string
          nullable: true
          description: Reference model type (polymorphic)
          example: "App\\Models\\Order"
        reference_id:
          type: string
          format: uuid
          nullable: true
          description: Reference model UUID (polymorphic)
        created_at:
          type: string
          format: date-time
          readOnly: true

    # ===================================
    # BOM CALCULATION RESPONSE
    # ===================================
    AvailableQuantityResponse:
      type: object
      description: BOM explosion calculation result
      properties:
        product_id:
          type: string
          format: uuid
          description: Product UUID
        product_name:
          type: string
          description: Product name
        available_quantity:
          type: integer
          description: Maximum units that can be produced with current stock
          example: 42
        is_available:
          type: boolean
          description: Whether product can be produced at all
        recipe:
          $ref: '#/components/schemas/Recipe'
        material_availability:
          type: array
          items:
            type: object
            properties:
              material_id:
                type: string
                format: uuid
              material_name:
                type: string
              required_per_unit:
                type: number
                format: double
              current_stock:
                type: number
                format: double
              max_units_from_this_material:
                type: integer
              is_sufficient:
                type: boolean
          description: Breakdown of each material's availability
    Pagination:
      type: object
      description: Paginated response metadata
      properties:
        current_page:
          type: integer
          description: Current page number
        from:
          type: integer
          nullable: true
          description: First item index on current page
        last_page:
          type: integer
          description: Last page number
        per_page:
          type: integer
          description: Items per page
        to:
          type: integer
          nullable: true
          description: Last item index on current page
        total:
          type: integer
          description: Total number of items

    ErrorResponse:
      type: object
      description: Standard error response format (422 validation errors)
      properties:
        message:
          type: string
          description: Error message
          example: "The given data was invalid."
        errors:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
          description: Field-specific validation errors
          example:
            email: ["The email field is required."]
            password: ["The password must be at least 8 characters."]

    MessageResponse:
      type: object
      description: Simple success message response
      properties:
        message:
          type: string
          description: Success message
          example: "Operation completed successfully"

  # ===================================
  # REUSABLE RESPONSES
  # ===================================
  responses:
    Unauthorized:
      description: Authentication required or token invalid
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Unauthenticated."

    Forbidden:
      description: Insufficient permissions or unauthorized action
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "This action is unauthorized."

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Resource not found"

    ValidationError:
      description: Validation error (422 Unprocessable Entity)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    ServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Server Error"

# END OF TIER 1 COMPONENTS
# ===================================
# IMPLEMENTATION STATUS
# ===================================
# Tier 1 Complete: Auth & Tenant schemas (8 schemas + bearerAuth + TenantId parameter)
# Tier 2 Complete: Parameters & Utilities (15 parameters + 3 utility schemas + 5 responses)
# Tier 3 Complete: Product Core Schemas (7 schemas: Product, Category, ProductImage, ProductTag, PublicProduct, ProductCreateRequest, ProductUpdateRequest + 2 placeholders)
# Tier 4 Complete: Product Variants & Stock Management (10 schemas: ProductVariant, ProductVariantCreateRequest, ProductVariantUpdateRequest, VariantAttribute, VariantAttributeCreateRequest, VariantAttributeUpdateRequest, StockAdjustment, StockAdjustmentCreateRequest, StockAlert + 3 stock alert action requests)
# Tier 5 Complete: Order & Sales (6 schemas: Customer, CustomerRequest, Order, OrderItem, OrderRequest, OrderUpdateRequest)
# Tier 6 Complete: Reports & Analytics (8 schemas: VariantAnalytics, VariantAnalyticsRequest, TenantAnalyticsSummary, SalesReport, ProductAnalyticsSummary, TopPerformersResponse, AnalyticsComparison, PerformanceSummary, AnalyticsResponse)
# Tier 7 Complete: BOM Engine Integration (10 schemas: Material, MaterialCreateRequest, MaterialUpdateRequest, Recipe, RecipeCreateRequest, RecipeUpdateRequest, RecipeMaterial, RecipeMaterialRequest, InventoryTransaction, AvailableQuantityResponse)
# Next: Tier 8 - Advanced Features (Multi-location, Loyalty, Promotions - requires business requirements)