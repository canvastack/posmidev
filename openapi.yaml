openapi: 3.0.3
info:
  title: Canvastack POSMID API
  description: |-
    API Specification for the Canvastack Point of Sale Multi-tenant ID (POSMID) system.
    This API is designed to be backend-agnostic, following a decoupled, API-First approach.
  version: 1.0.0

servers:
  - url: http://localhost:9000/api/v1
    description: Local Development Server

paths:
  /register:
    post:
      tags: [Authentication]
      summary: Register a new Tenant and User
      description: "Public endpoint - no authentication required. Creates new tenant and admin user."
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: Registration successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '422':
          description: Validation error

  /login:
    post:
      tags: [Authentication]
      summary: Log in a user
      description: "Public endpoint - no authentication required. Returns Bearer token for authenticated requests."
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Unauthorized

  /logout:
    post:
      tags: [Authentication]
      summary: Log out the current user
      operationId: logoutUser
      security: [{ bearerAuth: [] }]
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Logged out successfully

  /user:
    get:
      tags: [Authentication]
      summary: Get current authenticated user's information
      description: "Requires valid Bearer token authentication."
      operationId: getCurrentUser
      security: [{ bearerAuth: [] }]
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  # Tenants management (HQ/Admin scope)
  /tenants:
    get:
      tags: [Tenants]
      summary: List tenants (visibility per policy)
      description: "Requires authentication. Visibility: Super Admin/HQ users with 'tenants.view' can see all tenants, others see only their own tenant."
      operationId: listTenants
      security: [{ bearerAuth: [] }]
      parameters:
        - in: query
          name: per_page
          schema: { type: integer }
        - in: query
          name: page
          schema: { type: integer }
      responses:
        '200':
          description: Paginated tenants
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/Tenant' }
                  current_page: { type: integer }
                  last_page: { type: integer }
                  per_page: { type: integer }
                  total: { type: integer }
    post:
      tags: [Tenants]
      summary: Create a tenant
      operationId: createTenant
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TenantCreateRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tenant'

  /tenants/{tenantId}:
    get:
      tags: [Tenants]
      summary: Get tenant by ID
      operationId: getTenant
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Tenant' }
    patch:
      tags: [Tenants]
      summary: Update tenant
      operationId: updateTenant
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TenantUpdateRequest'
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Tenant' }
    delete:
      tags: [Tenants]
      summary: Delete tenant
      operationId: deleteTenant
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
      responses:
        '200':
          description: Deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }

  /tenants/{tenantId}/status:
    post:
      tags: [Tenants]
      summary: Set tenant status
      operationId: setTenantStatus
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [status]
              properties:
                status:
                  type: string
                  enum: [active, inactive, pending, banned]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Tenant' }

  /tenants/{tenantId}/auto-activation/request:
    post:
      tags: [Tenants]
      summary: Request auto-activation for tenant users
      security: [{ bearerAuth: [] }]
      parameters: [ { $ref: '#/components/parameters/TenantId' } ]
      responses:
        '200':
          description: Submitted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }

  /tenants/{tenantId}/auto-activation/approve:
    post:
      tags: [Tenants]
      summary: Approve auto-activation
      security: [{ bearerAuth: [] }]
      parameters: [ { $ref: '#/components/parameters/TenantId' } ]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Tenant' }

  /tenants/{tenantId}/auto-activation/reject:
    post:
      tags: [Tenants]
      summary: Reject auto-activation
      security: [{ bearerAuth: [] }]
      parameters: [ { $ref: '#/components/parameters/TenantId' } ]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Tenant' }

  /tenants/{tenantId}/users/{userId}/status:
    post:
      tags: [Tenants]
      summary: Set status of a tenant user
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/UserId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [status]
              properties:
                status:
                  type: string
                  enum: [active, inactive, pending, banned]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }

  # Tenant-scoped routes (team context)
  /tenants/{tenantId}/dashboard:
    get:
      tags: [Dashboard]
      summary: Get dashboard summary for a tenant
      operationId: getDashboard
      security: [{ bearerAuth: [] }]
      parameters: [ { $ref: '#/components/parameters/TenantId' } ]
      responses:
        '200':
          description: Dashboard summary
          content:
            application/json:
              schema:
                type: object
                properties:
                  today_revenue: { type: number, format: double }
                  today_transactions: { type: integer }
                  low_stock_products: { type: integer }
                  low_stock_alerts:
                    type: array
                    items:
                      type: object
                      properties:
                        id: { type: string, format: uuid }
                        name: { type: string }
                        stock: { type: integer }
                        sku: { type: string }

  /tenants/{tenantId}/public/settings:
    get:
      tags: [Public]
      summary: Get public tenant settings
      description: Public endpoint - returns tenant.settings.public as-is.
      operationId: getPublicSettings
      parameters:
        - $ref: '#/components/parameters/TenantId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/PublicSettings' }

  /tenants/{tenantId}/public/products:
    get:
      tags: [Public]
      summary: List published products (public)
      description: Returns only published products; default minStock=1; optional search by q.
      operationId: listPublicProducts
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - in: query
          name: q
          schema: { type: string }
        - in: query
          name: minStock
          schema: { type: integer, minimum: 0 }
          description: Minimum stock to include (default 1)
        - in: query
          name: limit
          schema: { type: integer, minimum: 1, maximum: 100 }
        - in: query
          name: page
          schema: { type: integer, minimum: 1 }
      responses:
        '200':
          description: Paginated published products
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/PublicProduct' }
                  current_page: { type: integer }
                  last_page: { type: integer }
                  per_page: { type: integer }
                  total: { type: integer }

  /tenants/{tenantId}/public/products/{productId}:
    get:
      tags: [Public]
      summary: Get a published product by ID (public)
      operationId: getPublicProduct
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/ProductId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/PublicProduct' }
        '404':
          description: Not found

  /tenants/{tenantId}/products:
    get:
      tags: [Products]
      summary: List all products for a tenant
      description: "Requires authentication and 'products.view' permission within the tenant scope."
      operationId: listProducts
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - in: query
          name: per_page
          schema: { type: integer, minimum: 1, maximum: 100 }
        - in: query
          name: page
          schema: { type: integer, minimum: 1 }
      responses:
        '200':
          description: A paginated list of products
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/Product' }
                  current_page: { type: integer }
                  last_page: { type: integer }
                  per_page: { type: integer }
                  total: { type: integer }
    post:
      tags: [Products]
      summary: Create a new product
      description: "Requires authentication and 'products.create' permission within the tenant scope."
      operationId: createProduct
      security: [{ bearerAuth: [] }]
      parameters: [ { $ref: '#/components/parameters/TenantId' } ]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/ProductRequest' }
      responses:
        '201':
          description: Product created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Product' }

  /tenants/{tenantId}/products/{productId}:
    get:
      tags: [Products]
      summary: Get a single product by ID
      operationId: getProductById
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/ProductId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Product' }
    put:
      tags: [Products]
      summary: Update an existing product
      operationId: updateProduct
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/ProductId'
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/ProductRequest' }
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Product' }
    delete:
      tags: [Products]
      summary: Delete a product
      operationId: deleteProduct
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/ProductId'
      responses:
        '204':
          description: Deleted

  /tenants/{tenantId}/products/bulk:
    delete:
      tags: [Products]
      summary: Bulk delete products
      description: "Requires authentication and 'products.delete' permission within the tenant scope. Deletes multiple products in one operation."
      operationId: bulkDeleteProducts
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [ids]
              properties:
                ids:
                  type: array
                  items: { type: string, format: uuid }
                  minItems: 1
                  description: Array of product IDs to delete
      responses:
        '200':
          description: Bulk delete completed
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  deleted_count: { type: integer }
                  requested_count: { type: integer }
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        id: { type: string, format: uuid }
                        message: { type: string }
        '403':
          description: Forbidden - missing products.delete permission
        '422':
          description: Validation error

  /tenants/{tenantId}/products/bulk/status:
    patch:
      tags: [Products]
      summary: Bulk update product status
      description: "Requires authentication and 'products.update' permission within the tenant scope. Updates status for multiple products."
      operationId: bulkUpdateProductStatus
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [ids, status]
              properties:
                ids:
                  type: array
                  items: { type: string, format: uuid }
                  minItems: 1
                  description: Array of product IDs to update
                status:
                  type: string
                  enum: [active, inactive, discontinued]
                  description: New status for all selected products
      responses:
        '200':
          description: Bulk status update completed
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  updated_count: { type: integer }
                  requested_count: { type: integer }
                  status: { type: string }
        '403':
          description: Forbidden - missing products.update permission
        '422':
          description: Validation error

  /tenants/{tenantId}/products/bulk/category:
    patch:
      tags: [Products]
      summary: Bulk update product category
      description: "Requires authentication and 'products.update' permission within the tenant scope. Assigns category to multiple products."
      operationId: bulkUpdateProductCategory
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [ids, category_id]
              properties:
                ids:
                  type: array
                  items: { type: string, format: uuid }
                  minItems: 1
                  description: Array of product IDs to update
                category_id:
                  type: string
                  format: uuid
                  description: Category ID to assign (must belong to the same tenant)
      responses:
        '200':
          description: Bulk category update completed
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  updated_count: { type: integer }
                  requested_count: { type: integer }
                  category_id: { type: string, format: uuid }
        '403':
          description: Forbidden - missing products.update permission
        '404':
          description: Category not found or does not belong to this tenant
        '422':
          description: Validation error

  /tenants/{tenantId}/products/bulk/price:
    patch:
      tags: [Products]
      summary: Bulk update product prices
      description: "Requires authentication and 'products.update' permission within the tenant scope. Updates prices for multiple products using percentage or fixed adjustments."
      operationId: bulkUpdateProductPrice
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [ids, type, operation, value]
              properties:
                ids:
                  type: array
                  items: { type: string, format: uuid }
                  minItems: 1
                  description: Array of product IDs to update
                type:
                  type: string
                  enum: [percentage, fixed]
                  description: Type of price adjustment
                operation:
                  type: string
                  enum: [increase, decrease, set]
                  description: Operation to perform (increase/decrease/set price)
                value:
                  type: number
                  format: float
                  minimum: 0
                  description: Amount or percentage value for the adjustment
      responses:
        '200':
          description: Bulk price update completed
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  updated_count: { type: integer }
                  requested_count: { type: integer }
                  type: { type: string }
                  operation: { type: string }
                  value: { type: number }
        '403':
          description: Forbidden - missing products.update permission
        '422':
          description: Validation error

  /tenants/{tenantId}/products/{productId}/history:
    get:
      tags: [Products]
      summary: Get complete change history for a product
      description: "Requires authentication and 'products.view' permission. Returns all activity logs for the product including create, update, and delete operations with before/after values. Supports pagination and date range filtering."
      operationId: getProductHistory
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - in: path
          name: productId
          required: true
          schema: { type: string, format: uuid }
          description: Product ID
        - in: query
          name: page
          schema: 
            type: integer
            default: 1
            minimum: 1
          description: Page number for pagination
        - in: query
          name: per_page
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 100
          description: Number of items per page (max 100)
        - in: query
          name: date_from
          schema:
            type: string
            format: date-time
          description: Filter activities from this date (ISO 8601 format)
          example: "2025-09-08T00:00:00Z"
        - in: query
          name: date_to
          schema:
            type: string
            format: date-time
          description: Filter activities up to this date (ISO 8601 format)
          example: "2025-10-08T23:59:59Z"
      responses:
        '200':
          description: Product change history retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id: { type: integer }
                        event: 
                          type: string
                          enum: [created, updated, deleted, restored, archived, price_changed, stock_adjusted, variant_added, variant_updated, variant_deleted]
                          description: Activity event type from Spatie Activity Log
                        description: 
                          type: string
                          nullable: true
                          description: Human-readable description of the activity
                        properties:
                          type: object
                          description: Full properties object from activity log
                        changes:
                          type: object
                          description: Extracted change details
                          properties:
                            old: 
                              type: object
                              nullable: true
                              description: Old values before change
                            attributes: 
                              type: object
                              nullable: true
                              description: New values after change
                        causer:
                          type: object
                          nullable: true
                          description: User who performed the action
                          properties:
                            id: { type: string, format: uuid }
                            name: { type: string }
                            email: { type: string }
                        created_at: { type: string, format: date-time }
                  pagination:
                    type: object
                    properties:
                      current_page: { type: integer }
                      last_page: { type: integer }
                      per_page: { type: integer }
                      total: { type: integer }
                  meta:
                    type: object
                    properties:
                      product_id: { type: string, format: uuid }
                      product_name: { type: string }
        '403':
          description: Forbidden - missing products.view permission
        '404':
          description: Product not found or doesn't belong to tenant

  /tenants/{tenantId}/products/{productId}/history/price:
    get:
      tags: [Products]
      summary: Get price change history for a product
      description: "Requires authentication and 'products.view' permission. Returns detailed price/cost history with change amounts and percentages."
      operationId: getProductPriceHistory
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - in: path
          name: productId
          required: true
          schema: { type: string, format: uuid }
          description: Product ID
      responses:
        '200':
          description: Price history retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id: { type: string, format: uuid }
                        old_price: { type: number, format: float }
                        new_price: { type: number, format: float }
                        price_change: { type: number, format: float }
                        price_change_percentage: { type: number, format: float }
                        old_cost_price: { type: number, format: float, nullable: true }
                        new_cost_price: { type: number, format: float, nullable: true }
                        cost_change: { type: number, format: float, nullable: true }
                        cost_change_percentage: { type: number, format: float, nullable: true }
                        changed_by:
                          type: object
                          nullable: true
                          properties:
                            id: { type: string, format: uuid }
                            name: { type: string }
                            email: { type: string }
                        changed_at: { type: string, format: date-time }
                  pagination:
                    type: object
                    properties:
                      current_page: { type: integer }
                      last_page: { type: integer }
                      per_page: { type: integer }
                      total: { type: integer }
                  meta:
                    type: object
                    properties:
                      product_id: { type: string, format: uuid }
                      product_name: { type: string }
                      current_price: { type: number, format: float }
                      current_cost_price: { type: number, format: float, nullable: true }
        '403':
          description: Forbidden - missing products.view permission
        '404':
          description: Product not found or doesn't belong to tenant

  /tenants/{tenantId}/products/{productId}/history/stock:
    get:
      tags: [Products]
      summary: Get stock movement history for a product
      description: "Requires authentication and 'products.view' permission. Returns inventory movement history with change direction and references."
      operationId: getProductStockHistory
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - in: path
          name: productId
          required: true
          schema: { type: string, format: uuid }
          description: Product ID
      responses:
        '200':
          description: Stock history retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id: { type: string, format: uuid }
                        old_stock: { type: integer }
                        new_stock: { type: integer }
                        stock_change: { type: integer }
                        change_direction: { type: string, enum: [increase, decrease, no_change] }
                        change_type: { type: string, enum: [adjustment, sale, purchase, return], nullable: true }
                        reference_id: { type: string, format: uuid, nullable: true }
                        notes: { type: string, nullable: true }
                        changed_by:
                          type: object
                          nullable: true
                          properties:
                            id: { type: string, format: uuid }
                            name: { type: string }
                            email: { type: string }
                        changed_at: { type: string, format: date-time }
                  pagination:
                    type: object
                    properties:
                      current_page: { type: integer }
                      last_page: { type: integer }
                      per_page: { type: integer }
                      total: { type: integer }
                  meta:
                    type: object
                    properties:
                      product_id: { type: string, format: uuid }
                      product_name: { type: string }
                      current_stock: { type: integer }
        '403':
          description: Forbidden - missing products.view permission
        '404':
          description: Product not found or doesn't belong to tenant

  # Product Analytics Endpoints
  /tenants/{tenantId}/products/{productId}/analytics/sales:
    get:
      tags: [Product Analytics]
      summary: Get sales metrics and trends for a product
      description: "Requires authentication and 'products.view' permission. Returns sales data including total revenue, quantity sold, and time-series trends."
      operationId: getProductSalesMetrics
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - in: path
          name: productId
          required: true
          schema: { type: string, format: uuid }
          description: Product ID
        - in: query
          name: period_start
          schema: { type: string, format: date }
          description: Start date for analytics period (YYYY-MM-DD)
        - in: query
          name: period_end
          schema: { type: string, format: date }
          description: End date for analytics period (YYYY-MM-DD)
      responses:
        '200':
          description: Sales metrics retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data:
                    $ref: '#/components/schemas/ProductSalesMetrics'
        '403':
          description: Forbidden - missing products.view permission
        '404':
          description: Product not found

  /tenants/{tenantId}/products/{productId}/analytics/stock:
    get:
      tags: [Product Analytics]
      summary: Get stock metrics and movements for a product
      description: "Requires authentication and 'products.view' permission. Returns stock level metrics and time-series movement data."
      operationId: getProductStockMetrics
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - in: path
          name: productId
          required: true
          schema: { type: string, format: uuid }
          description: Product ID
        - in: query
          name: period_start
          schema: { type: string, format: date }
          description: Start date for analytics period (YYYY-MM-DD)
        - in: query
          name: period_end
          schema: { type: string, format: date }
          description: End date for analytics period (YYYY-MM-DD)
      responses:
        '200':
          description: Stock metrics retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data:
                    $ref: '#/components/schemas/ProductStockMetrics'
        '403':
          description: Forbidden - missing products.view permission
        '404':
          description: Product not found

  /tenants/{tenantId}/products/{productId}/analytics/profit:
    get:
      tags: [Product Analytics]
      summary: Get profit analysis for a product
      description: "Requires authentication and 'products.view' permission. Returns profit metrics including gross profit, margin, and time-series trends."
      operationId: getProductProfitMetrics
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - in: path
          name: productId
          required: true
          schema: { type: string, format: uuid }
          description: Product ID
        - in: query
          name: period_start
          schema: { type: string, format: date }
          description: Start date for analytics period (YYYY-MM-DD)
        - in: query
          name: period_end
          schema: { type: string, format: date }
          description: End date for analytics period (YYYY-MM-DD)
      responses:
        '200':
          description: Profit metrics retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data:
                    $ref: '#/components/schemas/ProductProfitMetrics'
        '403':
          description: Forbidden - missing products.view permission
        '404':
          description: Product not found

  /tenants/{tenantId}/products/{productId}/analytics/variants:
    get:
      tags: [Product Analytics]
      summary: Get variant performance comparison for a product
      description: "Requires authentication and 'products.view' permission. Returns performance metrics for all variants of the product."
      operationId: getProductVariantPerformance
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - in: path
          name: productId
          required: true
          schema: { type: string, format: uuid }
          description: Product ID
        - in: query
          name: period_start
          schema: { type: string, format: date }
          description: Start date for analytics period (YYYY-MM-DD)
        - in: query
          name: period_end
          schema: { type: string, format: date }
          description: End date for analytics period (YYYY-MM-DD)
        - in: query
          name: limit
          schema: { type: integer, minimum: 1, maximum: 100, default: 10 }
          description: Maximum number of variants to return
      responses:
        '200':
          description: Variant performance retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/VariantPerformance'
        '403':
          description: Forbidden - missing products.view permission
        '404':
          description: Product not found

  /tenants/{tenantId}/products/{productId}/analytics/overview:
    get:
      tags: [Product Analytics]
      summary: Get combined analytics overview for a product
      description: "Requires authentication and 'products.view' permission. Returns all analytics data in a single response (most efficient endpoint)."
      operationId: getProductAnalyticsOverview
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - in: path
          name: productId
          required: true
          schema: { type: string, format: uuid }
          description: Product ID
        - in: query
          name: period_start
          schema: { type: string, format: date }
          description: Start date for analytics period (YYYY-MM-DD)
        - in: query
          name: period_end
          schema: { type: string, format: date }
          description: End date for analytics period (YYYY-MM-DD)
        - in: query
          name: limit
          schema: { type: integer, minimum: 1, maximum: 100, default: 10 }
          description: Maximum number of variants to return in variant performance
      responses:
        '200':
          description: Analytics overview retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data:
                    $ref: '#/components/schemas/ProductAnalyticsOverview'
        '403':
          description: Forbidden - missing products.view permission
        '404':
          description: Product not found

  /tenants/{tenantId}/categories:
    get:
      tags: [Products]
      summary: List all categories for a tenant
      description: "Requires authentication and 'products.view' permission within the tenant scope."
      operationId: listCategories
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - in: query
          name: per_page
          schema: { type: integer, minimum: 1, maximum: 100 }
        - in: query
          name: page
          schema: { type: integer, minimum: 1 }
      responses:
        '200':
          description: A paginated list of categories
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/Category' }
                  current_page: { type: integer }
                  last_page: { type: integer }
                  per_page: { type: integer }
                  total: { type: integer }
    post:
      tags: [Products]
      summary: Create a new category
      operationId: createCategory
      security: [{ bearerAuth: [] }]
      parameters: [ { $ref: '#/components/parameters/TenantId' } ]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/CategoryRequest' }
      responses:
        '201':
          description: Category created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Category' }

  /tenants/{tenantId}/categories/{categoryId}:
    get:
      tags: [Products]
      summary: Get a category by ID
      operationId: getCategoryById
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/CategoryId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Category' }
    put:
      tags: [Products]
      summary: Update a category
      operationId: updateCategory
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/CategoryId'
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/CategoryRequest' }
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Category' }
    delete:
      tags: [Products]
      summary: Delete a category
      operationId: deleteCategory
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/CategoryId'
      responses:
        '204':
          description: Deleted

  /tenants/{tenantId}/roles:
    get:
      tags: [Roles & Permissions]
      summary: List roles for a tenant (including global)
      operationId: listRoles
      security: [{ bearerAuth: [] }]
      parameters: [ { $ref: '#/components/parameters/TenantId' } ]
      responses:
        '200':
          description: A list of roles
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Role' }
    post:
      tags: [Roles & Permissions]
      summary: Create a role
      operationId: createRole
      security: [{ bearerAuth: [] }]
      parameters: [ { $ref: '#/components/parameters/TenantId' } ]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/RoleRequest' }
      responses:
        '201':
          description: Role created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Role' }

  /tenants/{tenantId}/roles/{roleId}:
    get:
      tags: [Roles & Permissions]
      summary: Get role by ID
      operationId: getRoleById
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/RoleId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Role' }
    put:
      tags: [Roles & Permissions]
      summary: Update role
      operationId: updateRole
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/RoleId'
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/RoleRequest' }
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Role' }
    delete:
      tags: [Roles & Permissions]
      summary: Delete role
      operationId: deleteRole
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/RoleId'
      responses:
        '204':
          description: Deleted

  /tenants/{tenantId}/permissions:
    get:
      tags: [Roles & Permissions]
      summary: List available permissions (API guard)
      operationId: listPermissions
      security: [{ bearerAuth: [] }]
      parameters: [ { $ref: '#/components/parameters/TenantId' } ]
      responses:
        '200':
          description: A list of permissions
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Permission' }

  /tenants/{tenantId}/orders:
    get:
      tags: [Sales]
      summary: List orders for a tenant
      description: "Requires authentication and 'orders.view' permission within the tenant scope."
      operationId: listOrders
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - in: query
          name: per_page
          schema: { type: integer, minimum: 1, maximum: 100 }
        - in: query
          name: page
          schema: { type: integer, minimum: 1 }
      responses:
        '200':
          description: A paginated list of orders
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/Order' }
                  current_page: { type: integer }
                  last_page: { type: integer }
                  per_page: { type: integer }
                  total: { type: integer }
    post:
      tags: [Sales]
      summary: Create an order
      description: "Requires authentication and 'orders.create' permission within the tenant scope. Validates stock availability before order creation."
      operationId: createOrder
      security: [{ bearerAuth: [] }]
      parameters: [ { $ref: '#/components/parameters/TenantId' } ]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/OrderRequest' }
      responses:
        '201':
          description: Order created successfully
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Order' }

  /tenants/{tenantId}/orders/{orderId}:
    get:
      tags: [Sales]
      summary: Get order by ID
      operationId: getOrderById
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/OrderId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Order' }
    put:
      tags: [Sales]
      summary: Update order
      operationId: updateOrder
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/OrderId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                payment_method:
                  type: string
                  enum: [cash, card, qris]
                amount_paid:
                  type: number
                  format: float
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Order' }
    delete:
      tags: [Sales]
      summary: Delete order
      operationId: deleteOrder
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/OrderId'
      responses:
        '204':
          description: Deleted

  /tenants/{tenantId}/customers:
    get:
      tags: [Customers]
      summary: List customers for a tenant
      description: "Requires authentication and 'customers.view' permission within the tenant scope. Supports search with 'q' parameter."
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - in: query
          name: q
          schema: { type: string }
          description: Search by name, email, or phone
        - in: query
          name: page
          schema: { type: integer, minimum: 1 }
        - in: query
          name: per_page
          schema: { type: integer, minimum: 1, maximum: 100 }
      responses:
        '200':
          description: A paginated list of customers
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/Customer' }
                  current_page: { type: integer }
                  last_page: { type: integer }
                  per_page: { type: integer }
                  total: { type: integer }
    post:
      tags: [Customers]
      summary: Create a customer
      security: [{ bearerAuth: [] }]
      parameters: [ { $ref: '#/components/parameters/TenantId' } ]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/CustomerRequest' }
      responses:
        '201':
          description: Customer created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Customer' }

  /tenants/{tenantId}/customers/search:
    post:
      tags: [Customers]
      summary: Search customers with POST (avoids URL query exposure)
      security: [{ bearerAuth: [] }]
      parameters: [ { $ref: '#/components/parameters/TenantId' } ]
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                q: { type: string }
                page: { type: integer, minimum: 1 }
                per_page: { type: integer, minimum: 1, maximum: 100 }
      responses:
        '200':
          description: A paginated list of customers
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/Customer' }
                  current_page: { type: integer }
                  last_page: { type: integer }
                  per_page: { type: integer }
                  total: { type: integer }

  /tenants/{tenantId}/customers/{id}:
    get:
      tags: [Customers]
      summary: Get customer by ID
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Customer' }
    patch:
      tags: [Customers]
      summary: Update customer
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/CustomerRequest' }
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Customer' }
    delete:
      tags: [Customers]
      summary: Delete customer
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      responses:
        '204':
          description: Deleted

  /tenants/{tenantId}/users:
    get:
      tags: [Users]
      summary: List users within a tenant
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - in: query
          name: q
          schema: { type: string }
          description: Search by name or email
        - in: query
          name: per_page
          schema: { type: integer }
      responses:
        '200':
          description: Paginated users
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/User' }
                  current_page: { type: integer }
                  last_page: { type: integer }
                  per_page: { type: integer }
                  total: { type: integer }
    post:
      tags: [Users]
      summary: Create a user in tenant
      security: [{ bearerAuth: [] }]
      parameters: [ { $ref: '#/components/parameters/TenantId' } ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name, email, password]
              properties:
                name: { type: string }
                email: { type: string, format: email }
                password: { type: string, format: password }
                display_name: { type: string, nullable: true }
                status: { type: string, enum: [active, inactive, pending, banned], nullable: true }
                photo: { type: string, nullable: true }
                phone_number: { type: string, nullable: true }
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/User' }

  /tenants/{tenantId}/users/{userId}:
    get:
      tags: [Users]
      summary: Get user by ID
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/UserId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/User' }
    patch:
      tags: [Users]
      summary: Update user
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/UserId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name: { type: string }
                display_name: { type: string, nullable: true }
                email: { type: string, format: email }
                status: { type: string, enum: [active, inactive, pending, banned], nullable: true }
                photo: { type: string, nullable: true }
                phone_number: { type: string, nullable: true }
                password: { type: string, format: password, nullable: true }
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema: { $ref: '#/components/schemas/User' }
    delete:
      tags: [Users]
      summary: Delete user
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/UserId'
      responses:
        '200':
          description: Deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }

  /tenants/{tenantId}/uploads/user-photo:
    post:
      tags: [Users]
      summary: Upload a user photo (creates a thumbnail)
      security: [{ bearerAuth: [] }]
      parameters: [ { $ref: '#/components/parameters/TenantId' } ]
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required: [file]
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '201':
          description: Uploaded
          content:
            application/json:
              schema:
                type: object
                properties:
                  url: { type: string }
                  thumb_url: { type: string, nullable: true }
                  path: { type: string }

  /tenants/{tenantId}/users/{userId}/roles:
    post:
      tags: [Users]
      summary: Update user roles within tenant scope
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/UserId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                roles:
                  type: array
                  items: { type: string }
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }

  /tenants/{tenantId}/settings:
    get:
      tags: [Settings]
      summary: Get tenant settings
      security: [{ bearerAuth: [] }]
      parameters: [ { $ref: '#/components/parameters/TenantId' } ]
      responses:
        '200':
          description: Settings
          content:
            application/json:
              schema: { $ref: '#/components/schemas/TenantSettings' }
    patch:
      tags: [Settings]
      summary: Update tenant settings
      security: [{ bearerAuth: [] }]
      parameters: [ { $ref: '#/components/parameters/TenantId' } ]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/TenantSettingsUpdate' }
      responses:
        '200':
          description: Updated settings
          content:
            application/json:
              schema: { $ref: '#/components/schemas/TenantSettings' }

  /tenants/{tenantId}/stock-adjustments:
    post:
      tags: [Inventory]
      summary: Create a new stock adjustment
      operationId: createStockAdjustment
      security: [{ bearerAuth: [] }]
      parameters: [ { $ref: '#/components/parameters/TenantId' } ]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/StockAdjustmentRequest' }
      responses:
        '201':
          description: Stock adjustment recorded
          content:
            application/json:
              schema: { $ref: '#/components/schemas/StockAdjustment' }

  /tenants/{tenantId}/stock-adjustments/reasons:
    get:
      tags: [Inventory]
      summary: Get predefined stock adjustment reasons
      description: "Returns list of standard reasons for stock adjustments. Requires products.view permission."
      operationId: getAdjustmentReasons
      security: [{ bearerAuth: [] }]
      parameters: [ { $ref: '#/components/parameters/TenantId' } ]
      responses:
        '200':
          description: List of adjustment reasons
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/AdjustmentReason' }
                  meta:
                    type: object
                    properties:
                      total: { type: integer }
                      types: { type: array, items: { type: string } }

  /tenants/{tenantId}/stock-alerts:
    get:
      tags: [Inventory]
      summary: List all stock alerts for tenant
      description: "Returns paginated list of stock alerts with filtering options. Requires products.view permission."
      operationId: listStockAlerts
      security: [{ bearerAuth: [] }]
      parameters:
        - { $ref: '#/components/parameters/TenantId' }
        - name: status
          in: query
          schema:
            type: string
            enum: [pending, acknowledged, resolved, dismissed]
          description: Filter by alert status
        - name: severity
          in: query
          schema:
            type: string
            enum: [low, critical, out_of_stock]
          description: Filter by severity level
        - name: product_id
          in: query
          schema:
            type: string
            format: uuid
          description: Filter by specific product
        - name: actionable_only
          in: query
          schema:
            type: boolean
          description: Show only actionable alerts (pending + acknowledged)
        - name: per_page
          in: query
          schema:
            type: integer
            default: 20
            maximum: 100
        - name: sort_by
          in: query
          schema:
            type: string
            enum: [created_at, current_stock, severity, status]
            default: created_at
        - name: sort_order
          in: query
          schema:
            type: string
            enum: [asc, desc]
            default: desc
      responses:
        '200':
          description: List of stock alerts
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/StockAlert' }
                  pagination: { $ref: '#/components/schemas/Pagination' }

  /tenants/{tenantId}/stock-alerts/stats:
    get:
      tags: [Inventory]
      summary: Get stock alert statistics
      description: "Returns counts and metrics for dashboard display. Requires products.view permission."
      operationId: getStockAlertStats
      security: [{ bearerAuth: [] }]
      parameters: [ { $ref: '#/components/parameters/TenantId' } ]
      responses:
        '200':
          description: Alert statistics
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { $ref: '#/components/schemas/StockAlertStats' }

  /tenants/{tenantId}/stock-alerts/low-stock-products:
    get:
      tags: [Inventory]
      summary: Get products with low stock levels
      description: "Returns paginated list of products with low stock. Requires products.view permission."
      operationId: getLowStockProducts
      security: [{ bearerAuth: [] }]
      parameters:
        - { $ref: '#/components/parameters/TenantId' }
        - name: severity
          in: query
          schema:
            type: string
            enum: [critical, out_of_stock]
          description: Filter by severity level
        - name: per_page
          in: query
          schema:
            type: integer
            default: 20
            maximum: 100
        - name: sort_by
          in: query
          schema:
            type: string
            enum: [stock, name, reorder_point, updated_at]
            default: stock
        - name: sort_order
          in: query
          schema:
            type: string
            enum: [asc, desc]
            default: asc
      responses:
        '200':
          description: List of low stock products
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/LowStockProduct' }
                  pagination: { $ref: '#/components/schemas/Pagination' }
                  summary: { $ref: '#/components/schemas/LowStockSummary' }

  /tenants/{tenantId}/stock-alerts/{alertId}/acknowledge:
    post:
      tags: [Inventory]
      summary: Acknowledge a stock alert
      description: "Marks alert as seen/acknowledged. Requires products.view permission."
      operationId: acknowledgeStockAlert
      security: [{ bearerAuth: [] }]
      parameters:
        - { $ref: '#/components/parameters/TenantId' }
        - { $ref: '#/components/parameters/AlertId' }
      responses:
        '200':
          description: Alert acknowledged successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
                  data: { $ref: '#/components/schemas/StockAlertAction' }

  /tenants/{tenantId}/stock-alerts/{alertId}/resolve:
    post:
      tags: [Inventory]
      summary: Resolve a stock alert
      description: "Marks alert as resolved (stock replenished). Requires inventory.adjust permission."
      operationId: resolveStockAlert
      security: [{ bearerAuth: [] }]
      parameters:
        - { $ref: '#/components/parameters/TenantId' }
        - { $ref: '#/components/parameters/AlertId' }
      responses:
        '200':
          description: Alert resolved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
                  data: { $ref: '#/components/schemas/StockAlertAction' }

  /tenants/{tenantId}/stock-alerts/{alertId}/dismiss:
    post:
      tags: [Inventory]
      summary: Dismiss a stock alert
      description: "Marks alert as dismissed (false positive). Requires products.view permission."
      operationId: dismissStockAlert
      security: [{ bearerAuth: [] }]
      parameters:
        - { $ref: '#/components/parameters/TenantId' }
        - { $ref: '#/components/parameters/AlertId' }
      responses:
        '200':
          description: Alert dismissed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
                  data:
                    type: object
                    properties:
                      id: { type: string, format: uuid }
                      status: { type: string }
                      updated_at: { type: string, format: date-time }

  # ========== PRODUCT VARIANTS ==========
  /tenants/{tenantId}/products/{productId}/variants:
    get:
      tags: [Product Variants]
      summary: List variants for a product
      operationId: listProductVariants
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/ProductId'
        - in: query
          name: per_page
          schema:
            type: integer
            default: 50
            minimum: 1
            maximum: 500
        - in: query
          name: search
          schema:
            type: string
          description: Search in SKU and name
        - in: query
          name: is_active
          schema:
            type: boolean
        - in: query
          name: sort_by
          schema:
            type: string
            default: sort_order
            enum: [sort_order, sku, name, price, stock, created_at]
        - in: query
          name: sort_order
          schema:
            type: string
            default: asc
            enum: [asc, desc]
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ProductVariant'
                  current_page:
                    type: integer
                  last_page:
                    type: integer
                  per_page:
                    type: integer
                  total:
                    type: integer
        '403':
          description: Forbidden - Insufficient permissions
        '404':
          description: Product not found

    post:
      tags: [Product Variants]
      summary: Create a new variant
      operationId: createProductVariant
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/ProductId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductVariantInput'
      responses:
        '201':
          description: Variant created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  data:
                    $ref: '#/components/schemas/ProductVariant'
        '422':
          description: Validation error

  /tenants/{tenantId}/products/{productId}/variants/bulk:
    post:
      tags: [Product Variants]
      summary: Create multiple variants
      description: Create up to 500 variants at once
      operationId: bulkCreateProductVariants
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/ProductId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                variants:
                  type: array
                  minItems: 1
                  maxItems: 500
                  items:
                    $ref: '#/components/schemas/ProductVariantInput'
      responses:
        '201':
          description: Variants created
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  success_count:
                    type: integer
                  error_count:
                    type: integer
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        index:
                          type: integer
                        sku:
                          type: string
                        message:
                          type: string

    patch:
      tags: [Product Variants]
      summary: Update multiple variants
      operationId: bulkUpdateProductVariants
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/ProductId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                variant_ids:
                  type: array
                  items:
                    type: string
                    format: uuid
                updates:
                  type: object
      responses:
        '200':
          description: Variants updated

    delete:
      tags: [Product Variants]
      summary: Delete multiple variants
      operationId: bulkDeleteProductVariants
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/ProductId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                variant_ids:
                  type: array
                  items:
                    type: string
                    format: uuid
      responses:
        '200':
          description: Variants deleted

  /tenants/{tenantId}/products/{productId}/variants/{variantId}:
    get:
      tags: [Product Variants]
      summary: Get a single variant
      operationId: getProductVariant
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/ProductId'
        - $ref: '#/components/parameters/VariantId'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ProductVariant'

    patch:
      tags: [Product Variants]
      summary: Update a variant
      operationId: updateProductVariant
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/ProductId'
        - $ref: '#/components/parameters/VariantId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductVariantInput'
      responses:
        '200':
          description: Variant updated

    delete:
      tags: [Product Variants]
      summary: Delete a variant (soft delete)
      operationId: deleteProductVariant
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/ProductId'
        - $ref: '#/components/parameters/VariantId'
      responses:
        '200':
          description: Variant deleted

  # ========== VARIANT ANALYTICS ==========
  /tenants/{tenantId}/products/{productId}/variants/analytics:
    get:
      tags: [Product Variants, Analytics]
      summary: Get analytics for all variants of a product
      description: |
        Returns aggregated analytics data for all variants of a specific product.
        Supports filtering by period type (daily, weekly, monthly) and date range.
        **Required Permission:** `products.view`
      operationId: getProductVariantsAnalytics
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/ProductId'
        - in: query
          name: period_type
          schema:
            type: string
            enum: [daily, weekly, monthly]
            default: daily
          description: Type of period aggregation
        - in: query
          name: period_start
          schema:
            type: string
            format: date
          description: Start date for analytics range (YYYY-MM-DD)
        - in: query
          name: period_end
          schema:
            type: string
            format: date
          description: End date for analytics range (YYYY-MM-DD)
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  product:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                      name:
                        type: string
                      variant_count:
                        type: integer
                  period_type:
                    type: string
                    enum: [daily, weekly, monthly]
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        variant:
                          $ref: '#/components/schemas/ProductVariant'
                        analytics:
                          type: array
                          items:
                            $ref: '#/components/schemas/VariantAnalytics'
                        summary:
                          type: object
                          properties:
                            total_revenue:
                              type: number
                              format: float
                            total_orders:
                              type: integer
                            total_quantity_sold:
                              type: integer
                            total_profit:
                              type: number
                              format: float
                  overall_summary:
                    type: object
                    properties:
                      total_revenue:
                        type: number
                        format: float
                      total_orders:
                        type: integer
                      total_quantity_sold:
                        type: integer
                      total_profit:
                        type: number
                        format: float
                      avg_conversion_rate:
                        type: number
                        format: float
        '403':
          description: Forbidden - Insufficient permissions
        '404':
          description: Product not found

  /tenants/{tenantId}/products/{productId}/variants/{variantId}/analytics:
    get:
      tags: [Product Variants, Analytics]
      summary: Get analytics for a specific variant
      description: |
        Returns time-series analytics data for a single product variant.
        Includes revenue, orders, stock movements, and performance metrics.
        **Required Permission:** `products.view`
      operationId: getProductVariantAnalytics
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/ProductId'
        - $ref: '#/components/parameters/VariantId'
        - in: query
          name: period_type
          schema:
            type: string
            enum: [daily, weekly, monthly]
            default: daily
          description: Type of period aggregation
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 365
            default: 30
          description: Number of periods to return
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  variant:
                    $ref: '#/components/schemas/ProductVariant'
                  analytics:
                    type: array
                    items:
                      $ref: '#/components/schemas/VariantAnalytics'
                  summary:
                    type: object
                    properties:
                      total_revenue:
                        type: number
                        format: float
                      total_orders:
                        type: integer
                      total_quantity_sold:
                        type: integer
                      total_profit:
                        type: number
                        format: float
                      avg_conversion_rate:
                        type: number
                        format: float
                      avg_turnover_rate:
                        type: number
                        format: float
        '403':
          description: Forbidden - Insufficient permissions
        '404':
          description: Variant not found

  /tenants/{tenantId}/products/{productId}/variants/{variantId}/stock:
    post:
      tags: [Product Variants]
      summary: Update variant stock
      operationId: updateVariantStock
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/ProductId'
        - $ref: '#/components/parameters/VariantId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                quantity:
                  type: integer
                  minimum: 0
                reason:
                  type: string
                  maxLength: 255
      responses:
        '200':
          description: Stock updated

  /tenants/{tenantId}/products/{productId}/variants/{variantId}/reserve:
    post:
      tags: [Product Variants]
      summary: Reserve stock for an order
      operationId: reserveVariantStock
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/ProductId'
        - $ref: '#/components/parameters/VariantId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                quantity:
                  type: integer
                  minimum: 1
                order_id:
                  type: string
                  format: uuid
      responses:
        '200':
          description: Stock reserved

  /tenants/{tenantId}/products/{productId}/variants/{variantId}/release:
    post:
      tags: [Product Variants]
      summary: Release reserved stock
      operationId: releaseVariantStock
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/ProductId'
        - $ref: '#/components/parameters/VariantId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                quantity:
                  type: integer
                  minimum: 1
                order_id:
                  type: string
                  format: uuid
      responses:
        '200':
          description: Stock released

  # ========== VARIANT IMPORT/EXPORT ==========
  /tenants/{tenantId}/variants/export:
    get:
      tags: [Product Variants]
      summary: Export variants to Excel/CSV
      operationId: exportVariants
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - in: query
          name: format
          schema:
            type: string
            enum: [xlsx, csv]
            default: xlsx
        - in: query
          name: product_id
          schema:
            type: string
            format: uuid
          description: Filter by product ID
        - in: query
          name: search
          schema:
            type: string
          description: Search in SKU and name
        - in: query
          name: is_active
          schema:
            type: boolean
          description: Filter by active status
      responses:
        '200':
          description: Successful export
          content:
            application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:
              schema:
                type: string
                format: binary
            text/csv:
              schema:
                type: string
                format: binary
        '403':
          description: Forbidden - Insufficient permissions

  /tenants/{tenantId}/variants/import/template:
    get:
      tags: [Product Variants]
      summary: Download import template
      operationId: downloadVariantsImportTemplate
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
      responses:
        '200':
          description: Template downloaded
          content:
            application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:
              schema:
                type: string
                format: binary
        '403':
          description: Forbidden - Insufficient permissions

  /tenants/{tenantId}/variants/import:
    post:
      tags: [Product Variants]
      summary: Import variants from Excel/CSV
      operationId: importVariants
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - file
              properties:
                file:
                  type: string
                  format: binary
                  description: Excel or CSV file (max 10MB)
                mode:
                  type: string
                  enum: [create, update]
                  default: create
                  description: Create new variants or update existing ones
      responses:
        '200':
          description: Import completed
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      total_rows:
                        type: integer
                      successful:
                        type: integer
                      failed:
                        type: integer
                      errors:
                        type: array
                        items:
                          type: object
                          properties:
                            row:
                              type: integer
                            errors:
                              type: array
                              items:
                                type: string
        '422':
          description: Validation error
        '413':
          description: File too large (max 10MB)

  # ========== VARIANT ANALYTICS ==========
  /tenants/{tenantId}/products/{productId}/variants/analytics:
    get:
      tags: [Product Variants]
      summary: Get analytics for product variants
      operationId: getVariantAnalytics
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/ProductId'
        - in: query
          name: period
          schema:
            type: string
            enum: [daily, weekly, monthly]
            default: daily
        - in: query
          name: days
          schema:
            type: integer
            default: 30
            minimum: 1
            maximum: 365
      responses:
        '200':
          description: Analytics data
          content:
            application/json:
              schema:
                type: object
                properties:
                  top_performers:
                    type: array
                    items:
                      $ref: '#/components/schemas/VariantAnalytics'
                  underperformers:
                    type: array
                    items:
                      $ref: '#/components/schemas/VariantAnalytics'
                  stock_alerts:
                    type: array
                    items:
                      type: object
                      properties:
                        variant_id:
                          type: string
                          format: uuid
                        sku:
                          type: string
                        name:
                          type: string
                        available_stock:
                          type: integer
                        low_stock_threshold:
                          type: integer
                  recommendations:
                    type: array
                    items:
                      type: object
                      properties:
                        variant_id:
                          type: string
                          format: uuid
                        recommendation:
                          type: string
                        reason:
                          type: string
        '403':
          description: Forbidden - Insufficient permissions

  # ========== VARIANT ATTRIBUTES ==========
  /tenants/{tenantId}/variant-attributes:
    get:
      tags: [Variant Attributes]
      summary: List variant attributes
      operationId: listVariantAttributes
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - in: query
          name: search
          schema:
            type: string
        - in: query
          name: is_active
          schema:
            type: boolean
        - in: query
          name: display_type
          schema:
            type: string
            enum: [select, radio, button, swatch, color_swatch]
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/VariantAttribute'

    post:
      tags: [Variant Attributes]
      summary: Create a variant attribute
      operationId: createVariantAttribute
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VariantAttributeInput'
      responses:
        '201':
          description: Attribute created

  /tenants/{tenantId}/variant-attributes/popular:
    get:
      tags: [Variant Attributes]
      summary: Get popular variant attributes
      operationId: getPopularVariantAttributes
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: Successful operation

  /tenants/{tenantId}/variant-attributes/{id}:
    get:
      tags: [Variant Attributes]
      summary: Get a variant attribute
      operationId: getVariantAttribute
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful operation

    patch:
      tags: [Variant Attributes]
      summary: Update a variant attribute
      operationId: updateVariantAttribute
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VariantAttributeInput'
      responses:
        '200':
          description: Attribute updated

    delete:
      tags: [Variant Attributes]
      summary: Delete a variant attribute
      operationId: deleteVariantAttribute
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Attribute deleted

  /tenants/{tenantId}/variant-attributes/{id}/values:
    post:
      tags: [Variant Attributes]
      summary: Add a value to an attribute
      operationId: addAttributeValue
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                value:
                  type: string
                price_modifier:
                  type: number
      responses:
        '200':
          description: Value added

    delete:
      tags: [Variant Attributes]
      summary: Remove a value from an attribute
      operationId: removeAttributeValue
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                value:
                  type: string
      responses:
        '200':
          description: Value removed

  # ========== VARIANT TEMPLATES ==========
  /tenants/{tenantId}/variant-templates:
    get:
      tags: [Variant Templates]
      summary: List variant templates
      description: Returns both system templates and tenant-specific templates
      operationId: listVariantTemplates
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - in: query
          name: include_system
          schema:
            type: boolean
            default: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/VariantTemplate'

    post:
      tags: [Variant Templates]
      summary: Create a variant template
      operationId: createVariantTemplate
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VariantTemplateInput'
      responses:
        '201':
          description: Template created

  /tenants/{tenantId}/variant-templates/{id}:
    get:
      tags: [Variant Templates]
      summary: Get a variant template
      operationId: getVariantTemplate
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful operation

    patch:
      tags: [Variant Templates]
      summary: Update a variant template
      description: System templates cannot be modified
      operationId: updateVariantTemplate
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VariantTemplateInput'
      responses:
        '200':
          description: Template updated

    delete:
      tags: [Variant Templates]
      summary: Delete a variant template
      description: System templates cannot be deleted
      operationId: deleteVariantTemplate
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Template deleted

  /tenants/{tenantId}/variant-templates/{id}/apply:
    post:
      tags: [Variant Templates]
      summary: Apply template to a product
      description: Generates all variant combinations and creates them
      operationId: applyVariantTemplate
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                product_id:
                  type: string
                  format: uuid
                override_existing:
                  type: boolean
                  default: false
      responses:
        '201':
          description: Template applied successfully

  /tenants/{tenantId}/variant-templates/{id}/preview:
    post:
      tags: [Variant Templates]
      summary: Preview variants that would be generated
      description: Shows variant combinations without creating them
      operationId: previewVariantTemplate
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                product_id:
                  type: string
                  format: uuid
      responses:
        '200':
          description: Preview generated

  # ========== VARIANT ANALYTICS ==========
  /tenants/{tenantId}/variants/{variantId}/analytics:
    get:
      tags: [Variant Analytics]
      summary: Get analytics for a variant
      operationId: getVariantAnalytics
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - name: variantId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - in: query
          name: period_type
          schema:
            type: string
            enum: [daily, weekly, monthly]
            default: daily
        - in: query
          name: limit
          schema:
            type: integer
            default: 30
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  variant:
                    $ref: '#/components/schemas/ProductVariant'
                  analytics:
                    type: array
                    items:
                      $ref: '#/components/schemas/VariantAnalytics'
                  summary:
                    type: object

  /tenants/{tenantId}/products/{productId}/analytics:
    get:
      tags: [Variant Analytics]
      summary: Get analytics for all variants of a product
      operationId: getProductVariantAnalytics
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/ProductId'
        - in: query
          name: period_type
          schema:
            type: string
            enum: [daily, weekly, monthly]
        - in: query
          name: period_start
          schema:
            type: string
            format: date
        - in: query
          name: period_end
          schema:
            type: string
            format: date
      responses:
        '200':
          description: Successful operation

  /tenants/{tenantId}/variants/analytics/top-performers:
    get:
      tags: [Variant Analytics]
      summary: Get top performing variants
      operationId: getTopPerformingVariants
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - in: query
          name: metric
          schema:
            type: string
            enum: [revenue, profit, quantity_sold, conversion_rate, turnover_rate]
            default: revenue
        - in: query
          name: period_type
          schema:
            type: string
            enum: [daily, weekly, monthly]
            default: monthly
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: Successful operation

  /tenants/{tenantId}/variants/analytics/compare:
    post:
      tags: [Variant Analytics]
      summary: Compare multiple variants
      operationId: compareVariants
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                variant_ids:
                  type: array
                  minItems: 2
                  maxItems: 10
                  items:
                    type: string
                    format: uuid
                period_type:
                  type: string
                  enum: [daily, weekly, monthly]
      responses:
        '200':
          description: Comparison data returned

  /tenants/{tenantId}/variants/analytics/performance-summary:
    get:
      tags: [Variant Analytics]
      summary: Get performance summary for all variants
      operationId: getVariantPerformanceSummary
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - in: query
          name: period_type
          schema:
            type: string
            enum: [daily, weekly, monthly]
            default: monthly
      responses:
        '200':
          description: Performance summary

tags:
  - name: Authentication
    description: User registration, login, and logout
  - name: Tenants
    description: Tenant management operations
  - name: Products
    description: Product catalog management
  - name: Categories
    description: Product category management
  - name: Orders
    description: Sales order management
  - name: Stock Alerts
    description: Inventory alert management
  - name: Product Variants
    description: Manage product variants (color, size, material combinations)
  - name: Variant Attributes
    description: Manage reusable variant attributes (Size, Color, etc.)
  - name: Variant Templates
    description: Pre-built variant configurations for quick setup
  - name: Variant Analytics
    description: Performance analytics and insights for variants

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    TenantId:
      name: tenantId
      in: path
      required: true
      description: ID of the tenant
      schema: { type: string, format: uuid }
    ProductId:
      name: productId
      in: path
      required: true
      description: ID of the product
      schema: { type: string, format: uuid }
    RoleId:
      name: roleId
      in: path
      required: true
      description: ID of the role
      schema: { type: string, format: uuid }
    CategoryId:
      name: categoryId
      in: path
      required: true
      description: ID of the category
      schema: { type: string, format: uuid }
    OrderId:
      name: orderId
      in: path
      required: true
      description: ID of the order
      schema: { type: string, format: uuid }
    UserId:
      name: userId
      in: path
      required: true
      description: ID of the user
      schema: { type: string, format: uuid }
    AlertId:
      name: alertId
      in: path
      required: true
      description: ID of the stock alert
      schema: { type: string, format: uuid }
    VariantId:
      name: variantId
      in: path
      required: true
      description: ID of the product variant
      schema: { type: string, format: uuid }

  schemas:
    # Authentication
    RegisterRequest:
      type: object
      required: [tenant_name, user_name, email, password]
      properties:
        tenant_name: { type: string, example: 'My Awesome Store' }
        user_name: { type: string, example: 'John Doe' }
        email: { type: string, format: email, example: 'john.doe@example.com' }
        password: { type: string, format: password, example: 'password123' }
    LoginRequest:
      type: object
      required: [email, password]
      properties:
        email: { type: string, format: email }
        password: { type: string, format: password }
    AuthResponse:
      type: object
      properties:
        message: { type: string }
        user: { $ref: '#/components/schemas/User' }
        token: { type: string }

    # Core
    User:
      type: object
      properties:
        id: { type: string, format: uuid }
        name: { type: string }
        email: { type: string, format: email }
        tenant_id: { type: string, format: uuid }
        status: { type: string, enum: [active, inactive, pending, banned] }
        roles:
          type: array
          items: { type: string }
        display_name: { type: string, nullable: true }
        photo: { type: string, nullable: true }
        photo_thumb: { type: string, nullable: true }
        phone_number: { type: string, nullable: true }
        created_at: { type: string, example: '2025-01-01 12:00:00' }

    Product:
      type: object
      properties:
        id: { type: string, format: uuid }
        name: { type: string }
        sku: { type: string }
        price: { type: number, format: float }
        stock: { type: integer }
        status: { type: string, enum: [draft, published, archived] }
        tenant_id: { type: string, format: uuid }
        category_id: { type: string, format: uuid, nullable: true }
        description: { type: string, nullable: true }
        cost_price: { type: number, format: float, nullable: true }
        created_at: { type: string, example: '2025-01-01 12:00:00' }
        updated_at: { type: string, example: '2025-01-01 12:00:00' }

    ProductRequest:
      type: object
      required: [name, sku, price, stock]
      properties:
        name: { type: string, example: 'Laptop Pro' }
        sku: { type: string, example: 'LP-001' }
        price: { type: number, format: float, example: 1500.99 }
        stock: { type: integer, example: 100 }
        status: { type: string, enum: [draft, published, archived], default: draft }
        category_id: { type: string, format: uuid, nullable: true }
        description: { type: string, nullable: true }
        cost_price: { type: number, format: float, nullable: true }
    
    ProductVariant:
      type: object
      properties:
        id:
          type: string
          format: uuid
        product_id:
          type: string
          format: uuid
        tenant_id:
          type: string
          format: uuid
        sku:
          type: string
          maxLength: 255
        barcode:
          type: string
          nullable: true
        name:
          type: string
          maxLength: 255
        display_name:
          type: string
          description: Human-readable name with attributes
        attributes:
          type: object
          description: 'JSONB key-value pairs (e.g., {"color": "Red", "size": "M"})'
          additionalProperties: true
        price:
          type: number
          format: decimal
          minimum: 0
        cost_price:
          type: number
          format: decimal
          minimum: 0
          nullable: true
        price_modifier:
          type: number
          format: decimal
          nullable: true
        profit_margin:
          type: number
          format: decimal
          description: Calculated profit percentage
        stock:
          type: integer
          minimum: 0
        reserved_stock:
          type: integer
          minimum: 0
        available_stock:
          type: integer
          minimum: 0
          description: Computed as stock - reserved_stock
        manage_stock:
          type: boolean
          default: true
        reorder_level:
          type: integer
          nullable: true
        reorder_quantity:
          type: integer
          nullable: true
        is_low_stock:
          type: boolean
        is_critical_stock:
          type: boolean
        images:
          type: array
          items:
            type: string
          description: Array of image paths
        image_url:
          type: string
          nullable: true
        is_active:
          type: boolean
          default: true
        is_default:
          type: boolean
          default: false
        sort_order:
          type: integer
          default: 0
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        product:
          type: object
          properties:
            id:
              type: string
              format: uuid
            name:
              type: string
            sku:
              type: string

    ProductVariantInput:
      type: object
      required:
        - sku
        - name
        - price
        - stock
      properties:
        sku:
          type: string
          maxLength: 255
        barcode:
          type: string
          nullable: true
        name:
          type: string
          maxLength: 255
        attributes:
          type: object
          additionalProperties: true
        price:
          type: number
          minimum: 0
        cost_price:
          type: number
          minimum: 0
          nullable: true
        price_modifier:
          type: number
          nullable: true
        stock:
          type: integer
          minimum: 0
        reserved_stock:
          type: integer
          minimum: 0
          default: 0
        manage_stock:
          type: boolean
          default: true
        reorder_level:
          type: integer
          nullable: true
        reorder_quantity:
          type: integer
          nullable: true
        images:
          type: array
          items:
            type: string
        is_active:
          type: boolean
          default: true
        is_default:
          type: boolean
          default: false
        sort_order:
          type: integer
          default: 0

    VariantAttribute:
      type: object
      properties:
        id:
          type: string
          format: uuid
        tenant_id:
          type: string
          format: uuid
        name:
          type: string
        slug:
          type: string
        display_type:
          type: string
          enum: [select, radio, button, swatch, color_swatch]
        values:
          type: array
          items:
            type: string
        value_count:
          type: integer
        price_modifiers:
          type: object
          additionalProperties:
            type: number
        visual_settings:
          type: object
          additionalProperties: true
        sort_order:
          type: integer
        is_active:
          type: boolean
        usage_count:
          type: integer
        total_combinations:
          type: integer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    VariantAttributeInput:
      type: object
      required:
        - name
        - display_type
        - values
      properties:
        name:
          type: string
          maxLength: 255
        slug:
          type: string
          nullable: true
        display_type:
          type: string
          enum: [select, radio, button, swatch, color_swatch]
        values:
          type: array
          minItems: 1
          items:
            type: string
        price_modifiers:
          type: object
          additionalProperties:
            type: number
        visual_settings:
          type: object
        sort_order:
          type: integer
          default: 0
        is_active:
          type: boolean
          default: true

    VariantTemplate:
      type: object
      properties:
        id:
          type: string
          format: uuid
        tenant_id:
          type: string
          format: uuid
          nullable: true
          description: NULL for system templates
        name:
          type: string
        slug:
          type: string
        description:
          type: string
          nullable: true
        configuration:
          type: object
          properties:
            attributes:
              type: array
              items:
                type: object
            sku_pattern:
              type: string
            price_calculation:
              type: string
              enum: [base, base_plus_modifiers, custom]
            stock_settings:
              type: object
        is_system:
          type: boolean
        is_active:
          type: boolean
        usage_count:
          type: integer
        total_combinations:
          type: integer
        can_delete:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        last_used_at:
          type: string
          format: date-time
          nullable: true

    VariantTemplateInput:
      type: object
      required:
        - name
        - configuration
      properties:
        name:
          type: string
          maxLength: 255
        slug:
          type: string
          nullable: true
        description:
          type: string
        configuration:
          type: object
          required:
            - attributes
          properties:
            attributes:
              type: array
              minItems: 1
            sku_pattern:
              type: string
            price_calculation:
              type: string
              enum: [base, base_plus_modifiers, custom]
            stock_settings:
              type: object
        is_active:
          type: boolean
          default: true

    VariantAnalytics:
      type: object
      properties:
        id:
          type: string
          format: uuid
        variant_id:
          type: string
          format: uuid
        tenant_id:
          type: string
          format: uuid
        period_type:
          type: string
          enum: [daily, weekly, monthly]
        period_start:
          type: string
          format: date-time
        period_end:
          type: string
          format: date-time
        total_orders:
          type: integer
        quantity_sold:
          type: integer
        revenue:
          type: number
          format: decimal
        profit:
          type: number
          format: decimal
        profit_margin_percent:
          type: number
          format: decimal
        stock_start:
          type: integer
        stock_end:
          type: integer
        stock_change:
          type: integer
        turnover_rate:
          type: number
          format: decimal
        days_of_stock:
          type: number
          format: decimal
          nullable: true
        view_count:
          type: integer
        add_to_cart_count:
          type: integer
        conversion_rate:
          type: number
          format: decimal
        cart_abandonment_rate:
          type: number
          format: decimal
        revenue_percentile:
          type: number
          format: decimal
          nullable: true
        profit_percentile:
          type: number
          format: decimal
          nullable: true
        turnover_percentile:
          type: number
          format: decimal
          nullable: true
        performance_status:
          type: string
          enum: [excellent, good, average, poor]
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    Role:
      type: object
      properties:
        id: { type: string, format: uuid }
        name: { type: string }
        permissions:
          type: array
          items: { $ref: '#/components/schemas/Permission' }

    RoleRequest:
      type: object
      required: [name]
      properties:
        name: { type: string, example: 'Store Manager' }
        permissions:
          type: array
          description: Array of permission names
          items: { type: string, example: 'products.view' }
        global:
          type: boolean
          description: Set to true to create/update as global (HQ) role

    Permission:
      type: object
      properties:
        id: { type: string, format: uuid }
        name: { type: string, example: 'products.create' }

    # Sales
    Order:
      type: object
      properties:
        id: { type: string, format: uuid }
        invoice_number: { type: string }
        total_amount: { type: number, format: float }
        payment_method: { type: string, enum: [cash, card, qris] }
        amount_paid: { type: number, format: float }
        change_amount: { type: number, format: float }
        items:
          type: array
          items: { $ref: '#/components/schemas/OrderItem' }
        created_at: { type: string, example: '2025-01-01 12:00:00' }

    OrderItem:
      type: object
      properties:
        product_id: { type: string, format: uuid }
        product_name: { type: string }
        quantity: { type: integer }
        price: { type: number, format: float }
        subtotal: { type: number, format: float }

    OrderRequest:
      type: object
      required: [items, payment_method, amount_paid]
      properties:
        items:
          type: array
          items:
            type: object
            required: [product_id, quantity]
            properties:
              product_id: { type: string, format: uuid }
              quantity: { type: integer }
        payment_method:
          type: string
          enum: [cash, card, qris]
          example: cash
        amount_paid: { type: number, format: float }
        customer_id: { type: string, format: uuid, nullable: true }

    # Inventory
    Category:
      type: object
      properties:
        id: { type: string, format: uuid }
        name: { type: string }
        description: { type: string, nullable: true }
        tenant_id: { type: string, format: uuid }
        created_at: { type: string, example: '2025-01-01 12:00:00' }
        updated_at: { type: string, example: '2025-01-01 12:00:00' }

    CategoryRequest:
      type: object
      required: [name]
      properties:
        name: { type: string, example: 'Elektronik' }
        description: { type: string, nullable: true }

    StockAdjustment:
      type: object
      properties:
        id: { type: string, format: uuid }
        product_id: { type: string, format: uuid }
        quantity: { type: integer, description: 'Positive for stock in, negative for stock out' }
        reason: { type: string }
        notes: { type: string, nullable: true }
        user_id: { type: string, format: uuid }
        created_at: { type: string, example: '2025-01-01 12:00:00' }

    StockAdjustmentRequest:
      type: object
      required: [product_id, quantity, reason]
      properties:
        product_id: { type: string, format: uuid }
        quantity: { type: integer, example: -2 }
        reason: { type: string, example: 'Barang Rusak' }
        notes: { type: string, nullable: true }

    # Stock Alerts (Phase 5)
    AdjustmentReason:
      type: object
      properties:
        key: { type: string, example: 'damage' }
        label: { type: string, example: 'Damage / Defect' }
        type: { type: string, enum: [addition, deduction, audit, transfer, other] }
        description: { type: string, example: 'Product damaged or defective' }

    StockAlert:
      type: object
      properties:
        id: { type: string, format: uuid }
        product_id: { type: string, format: uuid }
        product:
          type: object
          nullable: true
          properties:
            id: { type: string, format: uuid }
            name: { type: string }
            sku: { type: string }
            current_stock: { type: integer }
        current_stock: { type: integer }
        reorder_point: { type: integer }
        severity: { type: string, enum: [low, critical, out_of_stock] }
        severity_color: { type: string, example: 'yellow' }
        status: { type: string, enum: [pending, acknowledged, resolved, dismissed] }
        status_color: { type: string, example: 'gray' }
        notified: { type: boolean }
        notified_at: { type: string, format: date-time, nullable: true }
        acknowledged_by:
          type: object
          nullable: true
          properties:
            id: { type: string, format: uuid }
            name: { type: string }
        acknowledged_at: { type: string, format: date-time, nullable: true }
        resolved_by:
          type: object
          nullable: true
          properties:
            id: { type: string, format: uuid }
            name: { type: string }
        resolved_at: { type: string, format: date-time, nullable: true }
        is_actionable: { type: boolean }
        is_closed: { type: boolean }
        created_at: { type: string, format: date-time }
        updated_at: { type: string, format: date-time }

    StockAlertStats:
      type: object
      properties:
        total_alerts: { type: integer }
        pending_alerts: { type: integer }
        acknowledged_alerts: { type: integer }
        resolved_alerts: { type: integer }
        dismissed_alerts: { type: integer }
        by_severity:
          type: object
          properties:
            low: { type: integer }
            critical: { type: integer }
            out_of_stock: { type: integer }
        actionable_alerts: { type: integer }
        not_notified: { type: integer }

    StockAlertAction:
      type: object
      properties:
        id: { type: string, format: uuid }
        status: { type: string }
        acknowledged_by:
          type: object
          nullable: true
          properties:
            id: { type: string, format: uuid }
            name: { type: string }
        acknowledged_at: { type: string, format: date-time, nullable: true }
        resolved_by:
          type: object
          nullable: true
          properties:
            id: { type: string, format: uuid }
            name: { type: string }
        resolved_at: { type: string, format: date-time, nullable: true }

    LowStockProduct:
      type: object
      properties:
        id: { type: string, format: uuid }
        name: { type: string }
        sku: { type: string }
        stock: { type: integer }
        reorder_point: { type: integer }
        reorder_quantity: { type: integer }
        stock_status: { type: string, enum: [normal, low, critical, out_of_stock] }
        stock_status_color: { type: string, example: 'yellow' }
        stock_percentage: { type: number, format: float, nullable: true }
        recommended_order_quantity: { type: integer }
        category:
          type: object
          nullable: true
          properties:
            id: { type: string, format: uuid }
            name: { type: string }
        price: { type: number, format: float }
        needs_reorder: { type: boolean }
        has_active_alert: { type: boolean }
        updated_at: { type: string, format: date-time }

    LowStockSummary:
      type: object
      properties:
        total_low_stock_products: { type: integer }
        critical_products: { type: integer }
        out_of_stock_products: { type: integer }

    Pagination:
      type: object
      properties:
        current_page: { type: integer }
        last_page: { type: integer }
        per_page: { type: integer }
        total: { type: integer }

    # Customers
    Customer:
      type: object
      required: [id, name]
      properties:
        id: { type: string, format: uuid }
        name: { type: string }
        email: { type: string, nullable: true }
        phone: { type: string, nullable: true }
        address: { type: string, nullable: true }
        tags:
          type: array
          items: { type: string }
        created_at: { type: string, format: date-time }
        updated_at: { type: string, format: date-time }

    CustomerRequest:
      type: object
      properties:
        name: { type: string }
        email: { type: string, nullable: true }
        phone: { type: string, nullable: true }
        address: { type: string, nullable: true }
        tags:
          type: array
          items: { type: string }

    # Tenants schemas
    Tenant:
      type: object
      properties:
        id: { type: string, format: uuid }
        name: { type: string }
        address: { type: string, nullable: true }
        phone: { type: string, nullable: true }
        logo: { type: string, nullable: true }
        status: { type: string, enum: [active, inactive, pending, banned] }
        can_auto_activate_users: { type: boolean }
        auto_activate_request_pending: { type: boolean }
        auto_activate_requested_at: { type: string, nullable: true, example: '2025-01-01 12:00:00' }
        customers_count: { type: integer, nullable: true }
        created_at: { type: string, example: '2025-01-01 12:00:00' }
        updated_at: { type: string, example: '2025-01-01 12:00:00' }

    TenantCreateRequest:
      type: object
      required: [name]
      properties:
        name: { type: string }
        address: { type: string, nullable: true }
        phone: { type: string, nullable: true }
        logo: { type: string, nullable: true }
        status: { type: string, enum: [active, inactive, pending, banned] }

    TenantUpdateRequest:
      type: object
      properties:
        name: { type: string }
        address: { type: string, nullable: true }
        phone: { type: string, nullable: true }
        logo: { type: string, nullable: true }
        status: { type: string, enum: [active, inactive, pending, banned] }
        can_auto_activate_users: { type: boolean }

    # Settings
    TenantSettings:
      type: object
      properties:
        payments:
          type: object
          properties:
            default_method:
              type: string
              enum: [cash, card, ewallet]
              description: Default payment method for POS

    PublicSettings:
      description: Read-only subset used by public site (tenant.settings.public)
      type: object
      additionalProperties: true

    PublicProduct:
      type: object
      description: Public product projection exposed by public endpoints
      properties:
        id: { type: string, format: uuid }
        name: { type: string }
        description: { type: string, nullable: true }
        price: { type: number, format: float }
        stock: { type: integer }
        category_id: { type: string, format: uuid, nullable: true }

  