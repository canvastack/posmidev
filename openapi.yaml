openapi: 3.0.3
info:
  title: Canvastack POSMID API
  description: |-
    API Specification for the Canvastack Point of Sale Multi-tenant ID (POSMID) system.
    This API is designed to be backend-agnostic, following a decoupled, API-First approach.
  version: 1.0.0

servers:
  - url: http://localhost:9000/api/v1
    description: Local Development Server

paths:
  /register:
    post:
      tags: [Authentication]
      summary: Register a new Tenant and User
      description: "Public endpoint - no authentication required. Creates new tenant and admin user."
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: Registration successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '422':
          description: Validation error

  /login:
    post:
      tags: [Authentication]
      summary: Log in a user
      description: "Public endpoint - no authentication required. Returns Bearer token for authenticated requests."
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Unauthorized

  /logout:
    post:
      tags: [Authentication]
      summary: Log out the current user
      operationId: logoutUser
      security: [{ bearerAuth: [] }]
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Logged out successfully

  /user:
    get:
      tags: [Authentication]
      summary: Get current authenticated user's information
      description: "Requires valid Bearer token authentication."
      operationId: getCurrentUser
      security: [{ bearerAuth: [] }]
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  # Tenants management (HQ/Admin scope)
  /tenants:
    get:
      tags: [Tenants]
      summary: List tenants (visibility per policy)
      description: "Requires authentication. Visibility: Super Admin/HQ users with 'tenants.view' can see all tenants, others see only their own tenant."
      operationId: listTenants
      security: [{ bearerAuth: [] }]
      parameters:
        - in: query
          name: per_page
          schema: { type: integer }
        - in: query
          name: page
          schema: { type: integer }
      responses:
        '200':
          description: Paginated tenants
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/Tenant' }
                  current_page: { type: integer }
                  last_page: { type: integer }
                  per_page: { type: integer }
                  total: { type: integer }
    post:
      tags: [Tenants]
      summary: Create a tenant
      operationId: createTenant
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TenantCreateRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tenant'

  /tenants/{tenantId}:
    get:
      tags: [Tenants]
      summary: Get tenant by ID
      operationId: getTenant
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Tenant' }
    patch:
      tags: [Tenants]
      summary: Update tenant
      operationId: updateTenant
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TenantUpdateRequest'
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Tenant' }
    delete:
      tags: [Tenants]
      summary: Delete tenant
      operationId: deleteTenant
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
      responses:
        '200':
          description: Deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }

  /tenants/{tenantId}/status:
    post:
      tags: [Tenants]
      summary: Set tenant status
      operationId: setTenantStatus
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [status]
              properties:
                status:
                  type: string
                  enum: [active, inactive, pending, banned]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Tenant' }

  /tenants/{tenantId}/auto-activation/request:
    post:
      tags: [Tenants]
      summary: Request auto-activation for tenant users
      security: [{ bearerAuth: [] }]
      parameters: [ { $ref: '#/components/parameters/TenantId' } ]
      responses:
        '200':
          description: Submitted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }

  /tenants/{tenantId}/auto-activation/approve:
    post:
      tags: [Tenants]
      summary: Approve auto-activation
      security: [{ bearerAuth: [] }]
      parameters: [ { $ref: '#/components/parameters/TenantId' } ]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Tenant' }

  /tenants/{tenantId}/auto-activation/reject:
    post:
      tags: [Tenants]
      summary: Reject auto-activation
      security: [{ bearerAuth: [] }]
      parameters: [ { $ref: '#/components/parameters/TenantId' } ]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Tenant' }

  /tenants/{tenantId}/users/{userId}/status:
    post:
      tags: [Tenants]
      summary: Set status of a tenant user
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/UserId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [status]
              properties:
                status:
                  type: string
                  enum: [active, inactive, pending, banned]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }

  # Tenant-scoped routes (team context)
  /tenants/{tenantId}/dashboard:
    get:
      tags: [Dashboard]
      summary: Get dashboard summary for a tenant
      operationId: getDashboard
      security: [{ bearerAuth: [] }]
      parameters: [ { $ref: '#/components/parameters/TenantId' } ]
      responses:
        '200':
          description: Dashboard summary
          content:
            application/json:
              schema:
                type: object
                properties:
                  today_revenue: { type: number, format: double }
                  today_transactions: { type: integer }
                  low_stock_products: { type: integer }
                  low_stock_alerts:
                    type: array
                    items:
                      type: object
                      properties:
                        id: { type: string, format: uuid }
                        name: { type: string }
                        stock: { type: integer }
                        sku: { type: string }

  /tenants/{tenantId}/public/settings:
    get:
      tags: [Public]
      summary: Get public tenant settings
      description: Public endpoint - returns tenant.settings.public as-is.
      operationId: getPublicSettings
      parameters:
        - $ref: '#/components/parameters/TenantId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/PublicSettings' }

  /tenants/{tenantId}/public/products:
    get:
      tags: [Public]
      summary: List published products (public)
      description: Returns only published products; default minStock=1; optional search by q.
      operationId: listPublicProducts
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - in: query
          name: q
          schema: { type: string }
        - in: query
          name: minStock
          schema: { type: integer, minimum: 0 }
          description: Minimum stock to include (default 1)
        - in: query
          name: limit
          schema: { type: integer, minimum: 1, maximum: 100 }
        - in: query
          name: page
          schema: { type: integer, minimum: 1 }
      responses:
        '200':
          description: Paginated published products
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/PublicProduct' }
                  current_page: { type: integer }
                  last_page: { type: integer }
                  per_page: { type: integer }
                  total: { type: integer }

  /tenants/{tenantId}/public/products/{productId}:
    get:
      tags: [Public]
      summary: Get a published product by ID (public)
      operationId: getPublicProduct
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/ProductId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/PublicProduct' }
        '404':
          description: Not found

  /tenants/{tenantId}/products:
    get:
      tags: [Products]
      summary: List all products for a tenant
      description: "Requires authentication and 'products.view' permission within the tenant scope. Supports advanced filtering by date ranges, status, category, price range, and stock level."
      operationId: listProducts
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - in: query
          name: per_page
          schema: { type: integer, minimum: 1, maximum: 100 }
        - in: query
          name: page
          schema: { type: integer, minimum: 1 }
        - in: query
          name: search
          description: "Search in product name, SKU, or description"
          schema: { type: string }
        - in: query
          name: category_id
          description: "Filter by category UUID"
          schema: { type: string, format: uuid }
        - in: query
          name: sort_by
          description: "Sort field"
          schema: { type: string, enum: [name, sku, price, stock, created_at, updated_at] }
        - in: query
          name: sort_order
          description: "Sort direction"
          schema: { type: string, enum: [asc, desc], default: desc }
        - in: query
          name: stock_filter
          description: "Filter by stock level"
          schema: { type: string, enum: [all, in_stock, low_stock, out_of_stock], default: all }
        - in: query
          name: min_price
          description: "Minimum price filter"
          schema: { type: number, format: float }
        - in: query
          name: max_price
          description: "Maximum price filter"
          schema: { type: number, format: float }
        - in: query
          name: created_from
          description: "Filter products created from this date (YYYY-MM-DD)"
          schema: { type: string, format: date }
        - in: query
          name: created_to
          description: "Filter products created until this date (YYYY-MM-DD)"
          schema: { type: string, format: date }
        - in: query
          name: updated_from
          description: "Filter products updated from this date (YYYY-MM-DD)"
          schema: { type: string, format: date }
        - in: query
          name: updated_to
          description: "Filter products updated until this date (YYYY-MM-DD)"
          schema: { type: string, format: date }
        - in: query
          name: statuses
          description: "Filter by multiple statuses (comma-separated: active,draft,discontinued)"
          schema: { type: string }
        - in: query
          name: include_archived
          description: "Phase 11: Include archived (soft-deleted) products in results"
          schema: { type: boolean, default: false }
        - in: query
          name: only_archived
          description: "Phase 11: Show only archived (soft-deleted) products"
          schema: { type: boolean, default: false }
      responses:
        '200':
          description: A paginated list of products
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/Product' }
                  current_page: { type: integer }
                  last_page: { type: integer }
                  per_page: { type: integer }
                  total: { type: integer }
    post:
      tags: [Products]
      summary: Create a new product
      description: "Requires authentication and 'products.create' permission within the tenant scope."
      operationId: createProduct
      security: [{ bearerAuth: [] }]
      parameters: [ { $ref: '#/components/parameters/TenantId' } ]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/ProductRequest' }
      responses:
        '201':
          description: Product created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Product' }

  /tenants/{tenantId}/products/{productId}:
    get:
      tags: [Products]
      summary: Get a single product by ID
      operationId: getProductById
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/ProductId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Product' }
    put:
      tags: [Products]
      summary: Update an existing product
      operationId: updateProduct
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/ProductId'
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/ProductRequest' }
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Product' }
    delete:
      tags: [Products]
      summary: Delete a product
      operationId: deleteProduct
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/ProductId'
      responses:
        '204':
          description: Deleted

  # Phase 11: Archive & Soft Delete
  /tenants/{tenantId}/products/{productId}/archive:
    patch:
      tags: [Products]
      summary: Archive a product (soft delete)
      description: "Phase 11: Requires authentication and 'products.delete' permission. Soft deletes the product by setting deleted_at timestamp. Product will be excluded from default queries but can be restored."
      operationId: archiveProduct
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/ProductId'
      responses:
        '200':
          description: Product archived successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string, example: 'Product archived successfully' }
                  data: { $ref: '#/components/schemas/Product' }
        '403':
          description: Forbidden - missing products.delete permission
        '404':
          description: Product not found or not in tenant scope

  /tenants/{tenantId}/products/{productId}/restore:
    patch:
      tags: [Products]
      summary: Restore an archived product
      description: "Phase 11: Requires authentication and 'products.restore' permission. Restores a soft-deleted product by clearing deleted_at timestamp. Product will be visible in default queries again."
      operationId: restoreProduct
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/ProductId'
      responses:
        '200':
          description: Product restored successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string, example: 'Product restored successfully' }
                  data: { $ref: '#/components/schemas/Product' }
        '403':
          description: Forbidden - missing products.restore permission
        '404':
          description: Product not found in archived products or not in tenant scope

  /tenants/{tenantId}/products/{productId}/permanent:
    delete:
      tags: [Products]
      summary: Permanently delete an archived product
      description: "Phase 11: Requires authentication and 'products.delete.permanent' permission (admin-only). Permanently removes an archived product from the database. This action cannot be undone. Only archived products can be permanently deleted."
      operationId: forceDeleteProduct
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/ProductId'
      responses:
        '200':
          description: Product permanently deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string, example: 'Product permanently deleted' }
        '403':
          description: Forbidden - missing products.delete.permanent permission
        '404':
          description: Product not found in archived products or not in tenant scope

  /tenants/{tenantId}/products/bulk:
    delete:
      tags: [Products]
      summary: Bulk delete products
      description: "Requires authentication and 'products.delete' permission within the tenant scope. Deletes multiple products in one operation."
      operationId: bulkDeleteProducts
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [ids]
              properties:
                ids:
                  type: array
                  items: { type: string, format: uuid }
                  minItems: 1
                  description: Array of product IDs to delete
      responses:
        '200':
          description: Bulk delete completed
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  deleted_count: { type: integer }
                  requested_count: { type: integer }
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        id: { type: string, format: uuid }
                        message: { type: string }
        '403':
          description: Forbidden - missing products.delete permission
        '422':
          description: Validation error

  /tenants/{tenantId}/products/bulk/status:
    patch:
      tags: [Products]
      summary: Bulk update product status
      description: "Requires authentication and 'products.update' permission within the tenant scope. Updates status for multiple products."
      operationId: bulkUpdateProductStatus
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [ids, status]
              properties:
                ids:
                  type: array
                  items: { type: string, format: uuid }
                  minItems: 1
                  description: Array of product IDs to update
                status:
                  type: string
                  enum: [active, inactive, discontinued]
                  description: New status for all selected products
      responses:
        '200':
          description: Bulk status update completed
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  updated_count: { type: integer }
                  requested_count: { type: integer }
                  status: { type: string }
        '403':
          description: Forbidden - missing products.update permission
        '422':
          description: Validation error

  /tenants/{tenantId}/products/bulk/category:
    patch:
      tags: [Products]
      summary: Bulk update product category
      description: "Requires authentication and 'products.update' permission within the tenant scope. Assigns category to multiple products."
      operationId: bulkUpdateProductCategory
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [ids, category_id]
              properties:
                ids:
                  type: array
                  items: { type: string, format: uuid }
                  minItems: 1
                  description: Array of product IDs to update
                category_id:
                  type: string
                  format: uuid
                  description: Category ID to assign (must belong to the same tenant)
      responses:
        '200':
          description: Bulk category update completed
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  updated_count: { type: integer }
                  requested_count: { type: integer }
                  category_id: { type: string, format: uuid }
        '403':
          description: Forbidden - missing products.update permission
        '404':
          description: Category not found or does not belong to this tenant
        '422':
          description: Validation error

  /tenants/{tenantId}/products/bulk/price:
    patch:
      tags: [Products]
      summary: Bulk update product prices
      description: "Requires authentication and 'products.update' permission within the tenant scope. Updates prices for multiple products using percentage or fixed adjustments."
      operationId: bulkUpdateProductPrice
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [ids, type, operation, value]
              properties:
                ids:
                  type: array
                  items: { type: string, format: uuid }
                  minItems: 1
                  description: Array of product IDs to update
                type:
                  type: string
                  enum: [percentage, fixed]
                  description: Type of price adjustment
                operation:
                  type: string
                  enum: [increase, decrease, set]
                  description: Operation to perform (increase/decrease/set price)
                value:
                  type: number
                  format: float
                  minimum: 0
                  description: Amount or percentage value for the adjustment
      responses:
        '200':
          description: Bulk price update completed
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  updated_count: { type: integer }
                  requested_count: { type: integer }
                  type: { type: string }
                  operation: { type: string }
                  value: { type: number }
        '403':
          description: Forbidden - missing products.update permission
        '422':
          description: Validation error

  /tenants/{tenantId}/products/{productId}/history:
    get:
      tags: [Products]
      summary: Get complete change history for a product
      description: "Requires authentication and 'products.view' permission. Returns all activity logs for the product including create, update, and delete operations with before/after values. Supports pagination and date range filtering."
      operationId: getProductHistory
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - in: path
          name: productId
          required: true
          schema: { type: string, format: uuid }
          description: Product ID
        - in: query
          name: page
          schema: 
            type: integer
            default: 1
            minimum: 1
          description: Page number for pagination
        - in: query
          name: per_page
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 100
          description: Number of items per page (max 100)
        - in: query
          name: event
          schema:
            type: string
            enum: [created, updated, deleted, restored, archived, price_changed, stock_adjusted, variant_added, variant_updated, variant_deleted]
          description: Filter activities by event type
          example: "updated"
        - in: query
          name: date_from
          schema:
            type: string
            format: date-time
          description: Filter activities from this date (ISO 8601 format)
          example: "2025-09-08T00:00:00Z"
        - in: query
          name: date_to
          schema:
            type: string
            format: date-time
          description: Filter activities up to this date (ISO 8601 format)
          example: "2025-10-08T23:59:59Z"
      responses:
        '200':
          description: Product change history retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id: { type: integer }
                        event: 
                          type: string
                          enum: [created, updated, deleted, restored, archived, price_changed, stock_adjusted, variant_added, variant_updated, variant_deleted]
                          description: Activity event type from Spatie Activity Log
                        description: 
                          type: string
                          nullable: true
                          description: Human-readable description of the activity
                        properties:
                          type: object
                          description: Full properties object from activity log
                        changes:
                          type: object
                          description: Extracted change details
                          properties:
                            old: 
                              type: object
                              nullable: true
                              description: Old values before change
                            attributes: 
                              type: object
                              nullable: true
                              description: New values after change
                        causer:
                          type: object
                          nullable: true
                          description: User who performed the action
                          properties:
                            id: { type: string, format: uuid }
                            name: { type: string }
                            email: { type: string }
                        created_at: { type: string, format: date-time }
                  pagination:
                    type: object
                    properties:
                      current_page: { type: integer }
                      last_page: { type: integer }
                      per_page: { type: integer }
                      total: { type: integer }
                  meta:
                    type: object
                    properties:
                      product_id: { type: string, format: uuid }
                      product_name: { type: string }
        '403':
          description: Forbidden - missing products.view permission
        '404':
          description: Product not found or doesn't belong to tenant

  /tenants/{tenantId}/products/{productId}/history/price:
    get:
      tags: [Products]
      summary: Get price change history for a product
      description: "Requires authentication and 'products.view' permission. Returns detailed price/cost history with change amounts and percentages."
      operationId: getProductPriceHistory
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - in: path
          name: productId
          required: true
          schema: { type: string, format: uuid }
          description: Product ID
      responses:
        '200':
          description: Price history retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id: { type: string, format: uuid }
                        old_price: { type: number, format: float }
                        new_price: { type: number, format: float }
                        price_change: { type: number, format: float }
                        price_change_percentage: { type: number, format: float }
                        old_cost_price: { type: number, format: float, nullable: true }
                        new_cost_price: { type: number, format: float, nullable: true }
                        cost_change: { type: number, format: float, nullable: true }
                        cost_change_percentage: { type: number, format: float, nullable: true }
                        changed_by:
                          type: object
                          nullable: true
                          properties:
                            id: { type: string, format: uuid }
                            name: { type: string }
                            email: { type: string }
                        changed_at: { type: string, format: date-time }
                  pagination:
                    type: object
                    properties:
                      current_page: { type: integer }
                      last_page: { type: integer }
                      per_page: { type: integer }
                      total: { type: integer }
                  meta:
                    type: object
                    properties:
                      product_id: { type: string, format: uuid }
                      product_name: { type: string }
                      current_price: { type: number, format: float }
                      current_cost_price: { type: number, format: float, nullable: true }
        '403':
          description: Forbidden - missing products.view permission
        '404':
          description: Product not found or doesn't belong to tenant

  /tenants/{tenantId}/products/{productId}/history/stock:
    get:
      tags: [Products]
      summary: Get stock movement history for a product
      description: "Requires authentication and 'products.view' permission. Returns inventory movement history with change direction and references."
      operationId: getProductStockHistory
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - in: path
          name: productId
          required: true
          schema: { type: string, format: uuid }
          description: Product ID
      responses:
        '200':
          description: Stock history retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id: { type: string, format: uuid }
                        old_stock: { type: integer }
                        new_stock: { type: integer }
                        stock_change: { type: integer }
                        change_direction: { type: string, enum: [increase, decrease, no_change] }
                        change_type: { type: string, enum: [adjustment, sale, purchase, return], nullable: true }
                        reference_id: { type: string, format: uuid, nullable: true }
                        notes: { type: string, nullable: true }
                        changed_by:
                          type: object
                          nullable: true
                          properties:
                            id: { type: string, format: uuid }
                            name: { type: string }
                            email: { type: string }
                        changed_at: { type: string, format: date-time }
                  pagination:
                    type: object
                    properties:
                      current_page: { type: integer }
                      last_page: { type: integer }
                      per_page: { type: integer }
                      total: { type: integer }
                  meta:
                    type: object
                    properties:
                      product_id: { type: string, format: uuid }
                      product_name: { type: string }
                      current_stock: { type: integer }
        '403':
          description: Forbidden - missing products.view permission
        '404':
          description: Product not found or doesn't belong to tenant

  # Product Analytics Endpoints
  /tenants/{tenantId}/products/{productId}/analytics/sales:
    get:
      tags: [Product Analytics]
      summary: Get sales metrics and trends for a product
      description: "Requires authentication and 'products.view' permission. Returns sales data including total revenue, quantity sold, and time-series trends."
      operationId: getProductSalesMetrics
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - in: path
          name: productId
          required: true
          schema: { type: string, format: uuid }
          description: Product ID
        - in: query
          name: period_start
          schema: { type: string, format: date }
          description: Start date for analytics period (YYYY-MM-DD)
        - in: query
          name: period_end
          schema: { type: string, format: date }
          description: End date for analytics period (YYYY-MM-DD)
      responses:
        '200':
          description: Sales metrics retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data:
                    $ref: '#/components/schemas/ProductSalesMetrics'
        '403':
          description: Forbidden - missing products.view permission
        '404':
          description: Product not found

  /tenants/{tenantId}/products/{productId}/analytics/stock:
    get:
      tags: [Product Analytics]
      summary: Get stock metrics and movements for a product
      description: "Requires authentication and 'products.view' permission. Returns stock level metrics and time-series movement data."
      operationId: getProductStockMetrics
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - in: path
          name: productId
          required: true
          schema: { type: string, format: uuid }
          description: Product ID
        - in: query
          name: period_start
          schema: { type: string, format: date }
          description: Start date for analytics period (YYYY-MM-DD)
        - in: query
          name: period_end
          schema: { type: string, format: date }
          description: End date for analytics period (YYYY-MM-DD)
      responses:
        '200':
          description: Stock metrics retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data:
                    $ref: '#/components/schemas/ProductStockMetrics'
        '403':
          description: Forbidden - missing products.view permission
        '404':
          description: Product not found

  /tenants/{tenantId}/products/{productId}/analytics/profit:
    get:
      tags: [Product Analytics]
      summary: Get profit analysis for a product
      description: "Requires authentication and 'products.view' permission. Returns profit metrics including gross profit, margin, and time-series trends."
      operationId: getProductProfitMetrics
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - in: path
          name: productId
          required: true
          schema: { type: string, format: uuid }
          description: Product ID
        - in: query
          name: period_start
          schema: { type: string, format: date }
          description: Start date for analytics period (YYYY-MM-DD)
        - in: query
          name: period_end
          schema: { type: string, format: date }
          description: End date for analytics period (YYYY-MM-DD)
      responses:
        '200':
          description: Profit metrics retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data:
                    $ref: '#/components/schemas/ProductProfitMetrics'
        '403':
          description: Forbidden - missing products.view permission
        '404':
          description: Product not found

  /tenants/{tenantId}/products/{productId}/analytics/variants:
    get:
      tags: [Product Analytics]
      summary: Get variant performance comparison for a product
      description: "Requires authentication and 'products.view' permission. Returns performance metrics for all variants of the product."
      operationId: getProductVariantPerformance
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - in: path
          name: productId
          required: true
          schema: { type: string, format: uuid }
          description: Product ID
        - in: query
          name: period_start
          schema: { type: string, format: date }
          description: Start date for analytics period (YYYY-MM-DD)
        - in: query
          name: period_end
          schema: { type: string, format: date }
          description: End date for analytics period (YYYY-MM-DD)
        - in: query
          name: limit
          schema: { type: integer, minimum: 1, maximum: 100, default: 10 }
          description: Maximum number of variants to return
      responses:
        '200':
          description: Variant performance retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/VariantPerformance'
        '403':
          description: Forbidden - missing products.view permission
        '404':
          description: Product not found

  /tenants/{tenantId}/products/{productId}/analytics/overview:
    get:
      tags: [Product Analytics]
      summary: Get combined analytics overview for a product
      description: "Requires authentication and 'products.view' permission. Returns all analytics data in a single response (most efficient endpoint)."
      operationId: getProductAnalyticsOverview
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - in: path
          name: productId
          required: true
          schema: { type: string, format: uuid }
          description: Product ID
        - in: query
          name: period_start
          schema: { type: string, format: date }
          description: Start date for analytics period (YYYY-MM-DD)
        - in: query
          name: period_end
          schema: { type: string, format: date }
          description: End date for analytics period (YYYY-MM-DD)
        - in: query
          name: limit
          schema: { type: integer, minimum: 1, maximum: 100, default: 10 }
          description: Maximum number of variants to return in variant performance
      responses:
        '200':
          description: Analytics overview retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data:
                    $ref: '#/components/schemas/ProductAnalyticsOverview'
        '403':
          description: Forbidden - missing products.view permission
        '404':
          description: Product not found

  /tenants/{tenantId}/products/{productId}/analytics/export/csv:
    get:
      tags: [Product Analytics]
      summary: Export product analytics to CSV
      description: "Requires authentication and 'products.view' permission. Downloads analytics data as CSV file."
      operationId: exportProductAnalyticsCsv
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - in: path
          name: productId
          required: true
          schema: { type: string, format: uuid }
          description: Product ID
        - in: query
          name: period_start
          schema: { type: string, format: date }
          description: Start date for analytics period (YYYY-MM-DD)
        - in: query
          name: period_end
          schema: { type: string, format: date }
          description: End date for analytics period (YYYY-MM-DD)
      responses:
        '200':
          description: CSV file download
          content:
            text/csv:
              schema:
                type: string
                format: binary
        '403':
          description: Forbidden - missing products.view permission
        '404':
          description: Product not found

  /tenants/{tenantId}/products/{productId}/analytics/export/pdf:
    get:
      tags: [Product Analytics]
      summary: Export product analytics to PDF
      description: "Requires authentication and 'products.view' permission. Downloads analytics report as PDF file."
      operationId: exportProductAnalyticsPdf
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - in: path
          name: productId
          required: true
          schema: { type: string, format: uuid }
          description: Product ID
        - in: query
          name: period_start
          schema: { type: string, format: date }
          description: Start date for analytics period (YYYY-MM-DD)
        - in: query
          name: period_end
          schema: { type: string, format: date }
          description: End date for analytics period (YYYY-MM-DD)
      responses:
        '200':
          description: PDF file download
          content:
            application/pdf:
              schema:
                type: string
                format: binary
        '403':
          description: Forbidden - missing products.view permission
        '404':
          description: Product not found

  # Phase 8E: Product Duplication
  /tenants/{tenantId}/products/{productId}/duplicate:
    post:
      tags: [Products]
      summary: Duplicate a product
      description: "Requires authentication and 'products.create' permission. Creates a copy of an existing product with new UUID, modified SKU (adds -COPY suffix with counter), name with ' (Copy)' suffix, and draft status. All images are also duplicated with new UUIDs."
      operationId: duplicateProduct
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/ProductId'
      responses:
        '201':
          description: Product duplicated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Product duplicated successfully"
                  data:
                    $ref: '#/components/schemas/Product'
        '403':
          description: Forbidden - missing products.create permission
        '404':
          description: Product not found or not in tenant scope

  # Phase 7: Multi-Image Gallery
  /tenants/{tenantId}/products/{productId}/images:
    get:
      tags: [Products]
      summary: List all images for a product
      description: "Requires authentication and 'products.view' permission. Returns all images ordered by sort_order."
      operationId: listProductImages
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/ProductId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/ProductImage' }
                  total: { type: integer }
                  max_images: { type: integer, default: 10 }
        '403':
          description: Forbidden - missing products.view permission
        '404':
          description: Product not found
    post:
      tags: [Products]
      summary: Upload multiple images for a product
      description: "Requires authentication and 'products.update' permission. Supports up to 10 images per product. Auto-generates thumbnails."
      operationId: uploadProductImages
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/ProductId'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required: [images]
              properties:
                images:
                  type: array
                  items:
                    type: string
                    format: binary
                  description: Array of image files (max 10 total per product, 2MB each)
      responses:
        '201':
          description: Images uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/ProductImage' }
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        file: { type: string }
                        error: { type: string }
                  total_images: { type: integer }
        '403':
          description: Forbidden - missing products.update permission
        '422':
          description: Validation error or max image limit reached

  /tenants/{tenantId}/products/{productId}/images/{imageId}:
    delete:
      tags: [Products]
      summary: Delete a product image
      description: "Requires authentication and 'products.update' permission. If deleted image was primary, first remaining image becomes primary."
      operationId: deleteProductImage
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/ProductId'
        - in: path
          name: imageId
          required: true
          schema: { type: string, format: uuid }
          description: Image ID
      responses:
        '200':
          description: Image deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
        '403':
          description: Forbidden - missing products.update permission
        '404':
          description: Image not found

  /tenants/{tenantId}/products/{productId}/images/{imageId}/primary:
    patch:
      tags: [Products]
      summary: Set an image as primary
      description: "Requires authentication and 'products.update' permission. Unsets all other images as primary."
      operationId: setProductImagePrimary
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/ProductId'
        - in: path
          name: imageId
          required: true
          schema: { type: string, format: uuid }
          description: Image ID
      responses:
        '200':
          description: Primary image updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
                  data: { $ref: '#/components/schemas/ProductImage' }
        '403':
          description: Forbidden - missing products.update permission
        '404':
          description: Image not found

  /tenants/{tenantId}/products/{productId}/images/reorder:
    patch:
      tags: [Products]
      summary: Reorder product images
      description: "Requires authentication and 'products.update' permission. Updates sort_order for all images."
      operationId: reorderProductImages
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/ProductId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [order]
              properties:
                order:
                  type: array
                  items: { type: string, format: uuid }
                  description: Array of image IDs in desired order
      responses:
        '200':
          description: Images reordered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/ProductImage' }
        '403':
          description: Forbidden - missing products.update permission
        '422':
          description: Validation error

  /tenants/{tenantId}/categories:
    get:
      tags: [Products]
      summary: List all categories for a tenant
      description: "Requires authentication and 'products.view' permission within the tenant scope."
      operationId: listCategories
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - in: query
          name: per_page
          schema: { type: integer, minimum: 1, maximum: 100 }
        - in: query
          name: page
          schema: { type: integer, minimum: 1 }
      responses:
        '200':
          description: A paginated list of categories
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/Category' }
                  current_page: { type: integer }
                  last_page: { type: integer }
                  per_page: { type: integer }
                  total: { type: integer }
    post:
      tags: [Products]
      summary: Create a new category
      operationId: createCategory
      security: [{ bearerAuth: [] }]
      parameters: [ { $ref: '#/components/parameters/TenantId' } ]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/CategoryRequest' }
      responses:
        '201':
          description: Category created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Category' }

  /tenants/{tenantId}/categories/{categoryId}:
    get:
      tags: [Products]
      summary: Get a category by ID
      operationId: getCategoryById
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/CategoryId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Category' }
    put:
      tags: [Products]
      summary: Update a category
      operationId: updateCategory
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/CategoryId'
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/CategoryRequest' }
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Category' }
    delete:
      tags: [Products]
      summary: Delete a category
      operationId: deleteCategory
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/CategoryId'
      responses:
        '204':
          description: Deleted

  # Phase 9: Supplier Management
  /tenants/{tenantId}/suppliers:
    get:
      tags: [Suppliers]
      summary: List all suppliers for a tenant
      description: "Requires authentication and 'products.view' permission. Supports search and filtering."
      operationId: listSuppliers
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - in: query
          name: per_page
          schema: { type: integer, minimum: 1, maximum: 100, default: 15 }
        - in: query
          name: page
          schema: { type: integer, minimum: 1 }
        - in: query
          name: search
          description: "Search in supplier name, contact person, email"
          schema: { type: string }
        - in: query
          name: status
          description: "Filter by status"
          schema: { type: string, enum: [active, inactive] }
      responses:
        '200':
          description: A paginated list of suppliers
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/Supplier' }
                  current_page: { type: integer }
                  last_page: { type: integer }
                  per_page: { type: integer }
                  total: { type: integer }
    post:
      tags: [Suppliers]
      summary: Create a new supplier
      description: "Requires authentication and 'products.update' permission."
      operationId: createSupplier
      security: [{ bearerAuth: [] }]
      parameters: [ { $ref: '#/components/parameters/TenantId' } ]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/SupplierRequest' }
      responses:
        '201':
          description: Supplier created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Supplier' }

  /tenants/{tenantId}/suppliers/{supplierId}:
    get:
      tags: [Suppliers]
      summary: Get a supplier by ID
      operationId: getSupplierById
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/SupplierId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Supplier' }
    patch:
      tags: [Suppliers]
      summary: Update a supplier
      operationId: updateSupplier
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/SupplierId'
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/SupplierRequest' }
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Supplier' }
    delete:
      tags: [Suppliers]
      summary: Delete a supplier
      description: "Cannot delete if supplier has associated products."
      operationId: deleteSupplier
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/SupplierId'
      responses:
        '204':
          description: Deleted
        '422':
          description: Cannot delete - has associated products

  /tenants/{tenantId}/suppliers/{supplierId}/products:
    get:
      tags: [Suppliers]
      summary: List products by supplier
      operationId: listProductsBySupplier
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/SupplierId'
        - in: query
          name: per_page
          schema: { type: integer, minimum: 1, maximum: 100, default: 15 }
        - in: query
          name: page
          schema: { type: integer, minimum: 1 }
      responses:
        '200':
          description: A paginated list of products
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/Product' }
                  current_page: { type: integer }
                  last_page: { type: integer }
                  per_page: { type: integer }
                  total: { type: integer }

  # Phase 9: Product Tags Management
  /tenants/{tenantId}/tags:
    get:
      tags: [Product Tags]
      summary: List all product tags for a tenant
      description: "Requires authentication and 'products.view' permission. Supports search."
      operationId: listProductTags
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - in: query
          name: per_page
          schema: { type: integer, minimum: 1, maximum: 100, default: 15 }
        - in: query
          name: page
          schema: { type: integer, minimum: 1 }
        - in: query
          name: search
          description: "Search in tag name"
          schema: { type: string }
      responses:
        '200':
          description: A paginated list of tags
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/ProductTag' }
                  current_page: { type: integer }
                  last_page: { type: integer }
                  per_page: { type: integer }
                  total: { type: integer }
    post:
      tags: [Product Tags]
      summary: Create a new product tag
      description: "Requires authentication and 'products.update' permission."
      operationId: createProductTag
      security: [{ bearerAuth: [] }]
      parameters: [ { $ref: '#/components/parameters/TenantId' } ]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/ProductTagRequest' }
      responses:
        '201':
          description: Tag created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ProductTag' }

  /tenants/{tenantId}/tags/popular:
    get:
      tags: [Product Tags]
      summary: Get most popular tags
      description: "Returns tags ordered by usage count."
      operationId: getPopularTags
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - in: query
          name: limit
          schema: { type: integer, minimum: 1, maximum: 50, default: 10 }
      responses:
        '200':
          description: List of popular tags
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/ProductTag' }

  /tenants/{tenantId}/tags/{tagId}:
    get:
      tags: [Product Tags]
      summary: Get a tag by ID
      operationId: getProductTagById
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/TagId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ProductTag' }
    patch:
      tags: [Product Tags]
      summary: Update a tag
      operationId: updateProductTag
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/TagId'
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/ProductTagRequest' }
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ProductTag' }
    delete:
      tags: [Product Tags]
      summary: Delete a tag
      description: "Removes tag and detaches from all products."
      operationId: deleteProductTag
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/TagId'
      responses:
        '204':
          description: Deleted

  /tenants/{tenantId}/tags/bulk-attach:
    post:
      tags: [Product Tags]
      summary: Attach tags to multiple products
      description: "Bulk operation to attach tags to products."
      operationId: bulkAttachTags
      security: [{ bearerAuth: [] }]
      parameters: [ { $ref: '#/components/parameters/TenantId' } ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [product_ids, tag_ids]
              properties:
                product_ids:
                  type: array
                  items: { type: string, format: uuid }
                  minItems: 1
                tag_ids:
                  type: array
                  items: { type: string, format: uuid }
                  minItems: 1
      responses:
        '200':
          description: Tags attached
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
                  attached_count: { type: integer }

  /tenants/{tenantId}/tags/bulk-detach:
    post:
      tags: [Product Tags]
      summary: Detach tags from multiple products
      description: "Bulk operation to detach tags from products."
      operationId: bulkDetachTags
      security: [{ bearerAuth: [] }]
      parameters: [ { $ref: '#/components/parameters/TenantId' } ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [product_ids, tag_ids]
              properties:
                product_ids:
                  type: array
                  items: { type: string, format: uuid }
                  minItems: 1
                tag_ids:
                  type: array
                  items: { type: string, format: uuid }
                  minItems: 1
      responses:
        '200':
          description: Tags detached
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
                  detached_count: { type: integer }

  # Phase 9: SKU Generation
  /tenants/{tenantId}/sku-patterns:
    get:
      tags: [SKU Generation]
      summary: List predefined SKU patterns
      description: "Returns available SKU generation patterns with placeholders."
      operationId: listSkuPatterns
      security: [{ bearerAuth: [] }]
      parameters: [ { $ref: '#/components/parameters/TenantId' } ]
      responses:
        '200':
          description: List of SKU patterns
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/SkuPattern' }

  /tenants/{tenantId}/generate-sku:
    post:
      tags: [SKU Generation]
      summary: Generate a new SKU
      description: "Generates and saves SKU using pattern. Increments sequence."
      operationId: generateSku
      security: [{ bearerAuth: [] }]
      parameters: [ { $ref: '#/components/parameters/TenantId' } ]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/SkuGenerateRequest' }
      responses:
        '200':
          description: SKU generated
          content:
            application/json:
              schema:
                type: object
                properties:
                  sku: { type: string, example: 'ELEC-0001' }
                  pattern: { type: string }
                  sequence_number: { type: integer }

  /tenants/{tenantId}/preview-sku:
    post:
      tags: [SKU Generation]
      summary: Preview SKU without saving
      description: "Generates SKU preview without incrementing sequence."
      operationId: previewSku
      security: [{ bearerAuth: [] }]
      parameters: [ { $ref: '#/components/parameters/TenantId' } ]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/SkuGenerateRequest' }
      responses:
        '200':
          description: SKU preview
          content:
            application/json:
              schema:
                type: object
                properties:
                  sku: { type: string, example: 'ELEC-0001' }
                  pattern: { type: string }
                  next_sequence_number: { type: integer }

  /tenants/{tenantId}/validate-sku:
    get:
      tags: [SKU Generation]
      summary: Validate SKU availability
      description: "Check if SKU is unique and available."
      operationId: validateSku
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - in: query
          name: sku
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Validation result
          content:
            application/json:
              schema:
                type: object
                properties:
                  is_available: { type: boolean }
                  sku: { type: string }

  # Phase 10: Tenant-Wide Analytics & Reporting
  # Provides business intelligence and insights across all products
  # All endpoints require 'products.view' permission and enforce tenant isolation
  
  /tenants/{tenantId}/analytics/overview:
    get:
      tags: [Tenant Analytics]
      summary: Get tenant-wide analytics overview
      description: "Requires authentication and 'products.view' permission. Returns comprehensive dashboard data including total revenue, products count, average profit margin, and total views."
      operationId: getTenantAnalyticsOverview
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - in: query
          name: period_start
          schema: { type: string, format: date }
          description: "Start date for analytics period (YYYY-MM-DD)"
        - in: query
          name: period_end
          schema: { type: string, format: date }
          description: "End date for analytics period (YYYY-MM-DD)"
      responses:
        '200':
          description: Analytics overview retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data:
                    type: object
                    properties:
                      total_revenue:
                        type: number
                        format: float
                        description: "Total revenue from all products"
                      products_count:
                        type: integer
                        description: "Total number of active products"
                      average_profit_margin:
                        type: number
                        format: float
                        description: "Average profit margin percentage"
                      total_views:
                        type: integer
                        description: "Total product page views"
                      period_start: { type: string, format: date }
                      period_end: { type: string, format: date }
        '403':
          description: Forbidden - missing products.view permission

  /tenants/{tenantId}/analytics/top-products:
    get:
      tags: [Tenant Analytics]
      summary: Get top performing products
      description: "Requires authentication and 'products.view' permission. Returns top products by selected metric (revenue, quantity, profit, or views)."
      operationId: getTenantTopProducts
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - in: query
          name: metric
          schema:
            type: string
            enum: [revenue, quantity, profit, views]
            default: revenue
          description: "Metric to rank products by"
        - in: query
          name: limit
          schema: { type: integer, minimum: 1, maximum: 50, default: 10 }
          description: "Number of top products to return"
        - in: query
          name: period_start
          schema: { type: string, format: date }
        - in: query
          name: period_end
          schema: { type: string, format: date }
      responses:
        '200':
          description: Top products retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        product_id: { type: string, format: uuid }
                        product_name: { type: string }
                        sku: { type: string }
                        metric_value: { type: number, format: float }
                        revenue: { type: number, format: float }
                        quantity_sold: { type: integer }
                        profit: { type: number, format: float }
                        profit_margin: { type: number, format: float }
                        views: { type: integer }
        '403':
          description: Forbidden - missing products.view permission

  /tenants/{tenantId}/analytics/revenue-breakdown:
    get:
      tags: [Tenant Analytics]
      summary: Get revenue breakdown by product
      description: "Requires authentication and 'products.view' permission. Returns revenue distribution across products for pie/donut charts."
      operationId: getTenantRevenueBreakdown
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - in: query
          name: limit
          schema: { type: integer, minimum: 1, maximum: 50, default: 10 }
        - in: query
          name: period_start
          schema: { type: string, format: date }
        - in: query
          name: period_end
          schema: { type: string, format: date }
      responses:
        '200':
          description: Revenue breakdown retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        product_id: { type: string, format: uuid }
                        product_name: { type: string }
                        revenue: { type: number, format: float }
                        percentage: { type: number, format: float }
        '403':
          description: Forbidden - missing products.view permission

  /tenants/{tenantId}/analytics/profit-analysis:
    get:
      tags: [Tenant Analytics]
      summary: Get profit analysis by product
      description: "Requires authentication and 'products.view' permission. Returns profit margins and analysis for products."
      operationId: getTenantProfitAnalysis
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - in: query
          name: limit
          schema: { type: integer, minimum: 1, maximum: 50, default: 10 }
        - in: query
          name: period_start
          schema: { type: string, format: date }
        - in: query
          name: period_end
          schema: { type: string, format: date }
      responses:
        '200':
          description: Profit analysis retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        product_id: { type: string, format: uuid }
                        product_name: { type: string }
                        revenue: { type: number, format: float }
                        cost: { type: number, format: float }
                        profit: { type: number, format: float }
                        profit_margin: { type: number, format: float }
                        quantity_sold: { type: integer }
        '403':
          description: Forbidden - missing products.view permission

  /tenants/{tenantId}/analytics/category-performance:
    get:
      tags: [Tenant Analytics]
      summary: Get performance breakdown by category
      description: "Requires authentication and 'products.view' permission. Returns aggregated metrics per product category."
      operationId: getTenantCategoryPerformance
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - in: query
          name: period_start
          schema: { type: string, format: date }
        - in: query
          name: period_end
          schema: { type: string, format: date }
      responses:
        '200':
          description: Category performance retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        category_id: { type: string, format: uuid }
                        category_name: { type: string }
                        products_count: { type: integer }
                        total_revenue: { type: number, format: float }
                        total_profit: { type: number, format: float }
                        average_profit_margin: { type: number, format: float }
                        total_quantity_sold: { type: integer }
        '403':
          description: Forbidden - missing products.view permission

  /tenants/{tenantId}/analytics/most-viewed:
    get:
      tags: [Tenant Analytics]
      summary: Get most viewed products
      description: "Requires authentication and 'products.view' permission. Returns products sorted by view count."
      operationId: getTenantMostViewedProducts
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - in: query
          name: limit
          schema: { type: integer, minimum: 1, maximum: 50, default: 10 }
        - in: query
          name: period_start
          schema: { type: string, format: date }
        - in: query
          name: period_end
          schema: { type: string, format: date }
      responses:
        '200':
          description: Most viewed products retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        product_id: { type: string, format: uuid }
                        product_name: { type: string }
                        sku: { type: string }
                        view_count: { type: integer }
                        unique_viewers: { type: integer }
                        last_viewed_at: { type: string, format: date-time }
        '403':
          description: Forbidden - missing products.view permission

  /tenants/{tenantId}/analytics/search-terms:
    get:
      tags: [Tenant Analytics]
      summary: Get popular search terms
      description: "Requires authentication and 'products.view' permission. Returns most frequently searched terms."
      operationId: getTenantSearchTerms
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - in: query
          name: limit
          schema: { type: integer, minimum: 1, maximum: 50, default: 10 }
        - in: query
          name: period_start
          schema: { type: string, format: date }
        - in: query
          name: period_end
          schema: { type: string, format: date }
      responses:
        '200':
          description: Search terms retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        search_term: { type: string }
                        search_count: { type: integer }
                        average_results: { type: number, format: float }
                        zero_results_count: { type: integer }
        '403':
          description: Forbidden - missing products.view permission

  /tenants/{tenantId}/analytics/search-trends:
    get:
      tags: [Tenant Analytics]
      summary: Get search trends over time
      description: "Requires authentication and 'products.view' permission. Returns search activity aggregated by time period."
      operationId: getTenantSearchTrends
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - in: query
          name: group_by
          schema:
            type: string
            enum: [hour, day, week, month]
            default: day
        - in: query
          name: period_start
          schema: { type: string, format: date }
        - in: query
          name: period_end
          schema: { type: string, format: date }
      responses:
        '200':
          description: Search trends retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        period: { type: string }
                        search_count: { type: integer }
                        unique_terms: { type: integer }
                        zero_results_percentage: { type: number, format: float }
        '403':
          description: Forbidden - missing products.view permission

  /tenants/{tenantId}/analytics/search-stats:
    get:
      tags: [Tenant Analytics]
      summary: Get search statistics summary
      description: "Requires authentication and 'products.view' permission. Returns aggregated search metrics."
      operationId: getTenantSearchStats
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - in: query
          name: period_start
          schema: { type: string, format: date }
        - in: query
          name: period_end
          schema: { type: string, format: date }
      responses:
        '200':
          description: Search stats retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data:
                    type: object
                    properties:
                      total_searches: { type: integer }
                      unique_terms: { type: integer }
                      average_results_per_search: { type: number, format: float }
                      zero_results_count: { type: integer }
                      zero_results_percentage: { type: number, format: float }
        '403':
          description: Forbidden - missing products.view permission

  /tenants/{tenantId}/analytics/zero-result-searches:
    get:
      tags: [Tenant Analytics]
      summary: Get searches with zero results
      description: "Requires authentication and 'products.view' permission. Returns search terms that returned no products (useful for product gap analysis)."
      operationId: getTenantZeroResultSearches
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - in: query
          name: limit
          schema: { type: integer, minimum: 1, maximum: 50, default: 10 }
        - in: query
          name: period_start
          schema: { type: string, format: date }
        - in: query
          name: period_end
          schema: { type: string, format: date }
      responses:
        '200':
          description: Zero result searches retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        search_term: { type: string }
                        search_count: { type: integer }
                        last_searched_at: { type: string, format: date-time }
        '403':
          description: Forbidden - missing products.view permission

  /tenants/{tenantId}/analytics/track-search:
    post:
      tags: [Tenant Analytics]
      summary: Track a product search query
      description: "Public/authenticated endpoint. Logs search queries for analytics. Can be called without authentication for anonymous tracking."
      operationId: trackProductSearch
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [search_term, results_count]
              properties:
                search_term:
                  type: string
                  maxLength: 255
                  description: "The search query entered by user"
                results_count:
                  type: integer
                  minimum: 0
                  description: "Number of products returned"
      responses:
        '201':
          description: Search tracked successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  message: { type: string }
        '422':
          description: Validation error

  # Product View Tracking Endpoints
  /tenants/{tenantId}/products/{productId}/track-view:
    post:
      tags: [Tenant Analytics]
      summary: Track a product page view
      description: "Public/authenticated endpoint. Logs product views for analytics. Can be called without authentication for anonymous tracking."
      operationId: trackProductView
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/ProductId'
      responses:
        '201':
          description: View tracked successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  message: { type: string }
        '404':
          description: Product not found

  /tenants/{tenantId}/products/{productId}/view-stats:
    get:
      tags: [Tenant Analytics]
      summary: Get view statistics for a product
      description: "Requires authentication and 'products.view' permission. Returns view metrics for a specific product."
      operationId: getProductViewStats
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/ProductId'
        - in: query
          name: period_start
          schema: { type: string, format: date }
        - in: query
          name: period_end
          schema: { type: string, format: date }
      responses:
        '200':
          description: View stats retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data:
                    type: object
                    properties:
                      total_views: { type: integer }
                      unique_viewers: { type: integer }
                      authenticated_views: { type: integer }
                      anonymous_views: { type: integer }
                      average_views_per_day: { type: number, format: float }
        '403':
          description: Forbidden - missing products.view permission
        '404':
          description: Product not found

  /tenants/{tenantId}/products/{productId}/view-trends:
    get:
      tags: [Tenant Analytics]
      summary: Get view trends over time for a product
      description: "Requires authentication and 'products.view' permission. Returns view activity aggregated by time period."
      operationId: getProductViewTrends
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/ProductId'
        - in: query
          name: group_by
          schema:
            type: string
            enum: [hour, day, week, month]
            default: day
        - in: query
          name: period_start
          schema: { type: string, format: date }
        - in: query
          name: period_end
          schema: { type: string, format: date }
      responses:
        '200':
          description: View trends retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        period: { type: string }
                        view_count: { type: integer }
                        unique_viewers: { type: integer }
        '403':
          description: Forbidden - missing products.view permission
        '404':
          description: Product not found

  /tenants/{tenantId}/roles:
    get:
      tags: [Roles & Permissions]
      summary: List roles for a tenant (including global)
      operationId: listRoles
      security: [{ bearerAuth: [] }]
      parameters: [ { $ref: '#/components/parameters/TenantId' } ]
      responses:
        '200':
          description: A list of roles
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Role' }
    post:
      tags: [Roles & Permissions]
      summary: Create a role
      operationId: createRole
      security: [{ bearerAuth: [] }]
      parameters: [ { $ref: '#/components/parameters/TenantId' } ]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/RoleRequest' }
      responses:
        '201':
          description: Role created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Role' }

  /tenants/{tenantId}/roles/{roleId}:
    get:
      tags: [Roles & Permissions]
      summary: Get role by ID
      operationId: getRoleById
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/RoleId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Role' }
    put:
      tags: [Roles & Permissions]
      summary: Update role
      operationId: updateRole
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/RoleId'
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/RoleRequest' }
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Role' }
    delete:
      tags: [Roles & Permissions]
      summary: Delete role
      operationId: deleteRole
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/RoleId'
      responses:
        '204':
          description: Deleted

  /tenants/{tenantId}/permissions:
    get:
      tags: [Roles & Permissions]
      summary: List available permissions (API guard)
      operationId: listPermissions
      security: [{ bearerAuth: [] }]
      parameters: [ { $ref: '#/components/parameters/TenantId' } ]
      responses:
        '200':
          description: A list of permissions
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Permission' }

  /tenants/{tenantId}/orders:
    get:
      tags: [Sales]
      summary: List orders for a tenant
      description: "Requires authentication and 'orders.view' permission within the tenant scope."
      operationId: listOrders
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - in: query
          name: per_page
          schema: { type: integer, minimum: 1, maximum: 100 }
        - in: query
          name: page
          schema: { type: integer, minimum: 1 }
      responses:
        '200':
          description: A paginated list of orders
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/Order' }
                  current_page: { type: integer }
                  last_page: { type: integer }
                  per_page: { type: integer }
                  total: { type: integer }
    post:
      tags: [Sales]
      summary: Create an order
      description: "Requires authentication and 'orders.create' permission within the tenant scope. Validates stock availability before order creation."
      operationId: createOrder
      security: [{ bearerAuth: [] }]
      parameters: [ { $ref: '#/components/parameters/TenantId' } ]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/OrderRequest' }
      responses:
        '201':
          description: Order created successfully
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Order' }

  /tenants/{tenantId}/orders/{orderId}:
    get:
      tags: [Sales]
      summary: Get order by ID
      operationId: getOrderById
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/OrderId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Order' }
    put:
      tags: [Sales]
      summary: Update order
      operationId: updateOrder
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/OrderId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                payment_method:
                  type: string
                  enum: [cash, card, qris]
                amount_paid:
                  type: number
                  format: float
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Order' }
    delete:
      tags: [Sales]
      summary: Delete order
      operationId: deleteOrder
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/OrderId'
      responses:
        '204':
          description: Deleted

  /tenants/{tenantId}/customers:
    get:
      tags: [Customers]
      summary: List customers for a tenant
      description: "Requires authentication and 'customers.view' permission within the tenant scope. Supports search with 'q' parameter."
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - in: query
          name: q
          schema: { type: string }
          description: Search by name, email, or phone
        - in: query
          name: page
          schema: { type: integer, minimum: 1 }
        - in: query
          name: per_page
          schema: { type: integer, minimum: 1, maximum: 100 }
      responses:
        '200':
          description: A paginated list of customers
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/Customer' }
                  current_page: { type: integer }
                  last_page: { type: integer }
                  per_page: { type: integer }
                  total: { type: integer }
    post:
      tags: [Customers]
      summary: Create a customer
      security: [{ bearerAuth: [] }]
      parameters: [ { $ref: '#/components/parameters/TenantId' } ]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/CustomerRequest' }
      responses:
        '201':
          description: Customer created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Customer' }

  /tenants/{tenantId}/customers/search:
    post:
      tags: [Customers]
      summary: Search customers with POST (avoids URL query exposure)
      security: [{ bearerAuth: [] }]
      parameters: [ { $ref: '#/components/parameters/TenantId' } ]
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                q: { type: string }
                page: { type: integer, minimum: 1 }
                per_page: { type: integer, minimum: 1, maximum: 100 }
      responses:
        '200':
          description: A paginated list of customers
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/Customer' }
                  current_page: { type: integer }
                  last_page: { type: integer }
                  per_page: { type: integer }
                  total: { type: integer }

  /tenants/{tenantId}/customers/{id}:
    get:
      tags: [Customers]
      summary: Get customer by ID
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Customer' }
    patch:
      tags: [Customers]
      summary: Update customer
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/CustomerRequest' }
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Customer' }
    delete:
      tags: [Customers]
      summary: Delete customer
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      responses:
        '204':
          description: Deleted

  /tenants/{tenantId}/users:
    get:
      tags: [Users]
      summary: List users within a tenant
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - in: query
          name: q
          schema: { type: string }
          description: Search by name or email
        - in: query
          name: per_page
          schema: { type: integer }
      responses:
        '200':
          description: Paginated users
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/User' }
                  current_page: { type: integer }
                  last_page: { type: integer }
                  per_page: { type: integer }
                  total: { type: integer }
    post:
      tags: [Users]
      summary: Create a user in tenant
      security: [{ bearerAuth: [] }]
      parameters: [ { $ref: '#/components/parameters/TenantId' } ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name, email, password]
              properties:
                name: { type: string }
                email: { type: string, format: email }
                password: { type: string, format: password }
                display_name: { type: string, nullable: true }
                status: { type: string, enum: [active, inactive, pending, banned], nullable: true }
                photo: { type: string, nullable: true }
                phone_number: { type: string, nullable: true }
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/User' }

  /tenants/{tenantId}/users/{userId}:
    get:
      tags: [Users]
      summary: Get user by ID
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/UserId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/User' }
    patch:
      tags: [Users]
      summary: Update user
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/UserId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name: { type: string }
                display_name: { type: string, nullable: true }
                email: { type: string, format: email }
                status: { type: string, enum: [active, inactive, pending, banned], nullable: true }
                photo: { type: string, nullable: true }
                phone_number: { type: string, nullable: true }
                password: { type: string, format: password, nullable: true }
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema: { $ref: '#/components/schemas/User' }
    delete:
      tags: [Users]
      summary: Delete user
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/UserId'
      responses:
        '200':
          description: Deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }

  /tenants/{tenantId}/uploads/user-photo:
    post:
      tags: [Users]
      summary: Upload a user photo (creates a thumbnail)
      security: [{ bearerAuth: [] }]
      parameters: [ { $ref: '#/components/parameters/TenantId' } ]
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required: [file]
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '201':
          description: Uploaded
          content:
            application/json:
              schema:
                type: object
                properties:
                  url: { type: string }
                  thumb_url: { type: string, nullable: true }
                  path: { type: string }

  /tenants/{tenantId}/users/{userId}/roles:
    post:
      tags: [Users]
      summary: Update user roles within tenant scope
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/UserId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                roles:
                  type: array
                  items: { type: string }
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }

  /tenants/{tenantId}/settings:
    get:
      tags: [Settings]
      summary: Get tenant settings
      security: [{ bearerAuth: [] }]
      parameters: [ { $ref: '#/components/parameters/TenantId' } ]
      responses:
        '200':
          description: Settings
          content:
            application/json:
              schema: { $ref: '#/components/schemas/TenantSettings' }
    patch:
      tags: [Settings]
      summary: Update tenant settings
      security: [{ bearerAuth: [] }]
      parameters: [ { $ref: '#/components/parameters/TenantId' } ]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/TenantSettingsUpdate' }
      responses:
        '200':
          description: Updated settings
          content:
            application/json:
              schema: { $ref: '#/components/schemas/TenantSettings' }

  /tenants/{tenantId}/stock-adjustments:
    post:
      tags: [Inventory]
      summary: Create a new stock adjustment
      operationId: createStockAdjustment
      security: [{ bearerAuth: [] }]
      parameters: [ { $ref: '#/components/parameters/TenantId' } ]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/StockAdjustmentRequest' }
      responses:
        '201':
          description: Stock adjustment recorded
          content:
            application/json:
              schema: { $ref: '#/components/schemas/StockAdjustment' }

  /tenants/{tenantId}/stock-adjustments/reasons:
    get:
      tags: [Inventory]
      summary: Get predefined stock adjustment reasons
      description: "Returns list of standard reasons for stock adjustments. Requires products.view permission."
      operationId: getAdjustmentReasons
      security: [{ bearerAuth: [] }]
      parameters: [ { $ref: '#/components/parameters/TenantId' } ]
      responses:
        '200':
          description: List of adjustment reasons
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/AdjustmentReason' }
                  meta:
                    type: object
                    properties:
                      total: { type: integer }
                      types: { type: array, items: { type: string } }

  /tenants/{tenantId}/stock-alerts:
    get:
      tags: [Inventory]
      summary: List all stock alerts for tenant
      description: "Returns paginated list of stock alerts with filtering options. Requires products.view permission."
      operationId: listStockAlerts
      security: [{ bearerAuth: [] }]
      parameters:
        - { $ref: '#/components/parameters/TenantId' }
        - name: status
          in: query
          schema:
            type: string
            enum: [pending, acknowledged, resolved, dismissed]
          description: Filter by alert status
        - name: severity
          in: query
          schema:
            type: string
            enum: [low, critical, out_of_stock]
          description: Filter by severity level
        - name: product_id
          in: query
          schema:
            type: string
            format: uuid
          description: Filter by specific product
        - name: actionable_only
          in: query
          schema:
            type: boolean
          description: Show only actionable alerts (pending + acknowledged)
        - name: per_page
          in: query
          schema:
            type: integer
            default: 20
            maximum: 100
        - name: sort_by
          in: query
          schema:
            type: string
            enum: [created_at, current_stock, severity, status]
            default: created_at
        - name: sort_order
          in: query
          schema:
            type: string
            enum: [asc, desc]
            default: desc
      responses:
        '200':
          description: List of stock alerts
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/StockAlert' }
                  pagination: { $ref: '#/components/schemas/Pagination' }

  /tenants/{tenantId}/stock-alerts/stats:
    get:
      tags: [Inventory]
      summary: Get stock alert statistics
      description: "Returns counts and metrics for dashboard display. Requires products.view permission."
      operationId: getStockAlertStats
      security: [{ bearerAuth: [] }]
      parameters: [ { $ref: '#/components/parameters/TenantId' } ]
      responses:
        '200':
          description: Alert statistics
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { $ref: '#/components/schemas/StockAlertStats' }

  /tenants/{tenantId}/stock-alerts/low-stock-products:
    get:
      tags: [Inventory]
      summary: Get products with low stock levels
      description: "Returns paginated list of products with low stock. Requires products.view permission."
      operationId: getLowStockProducts
      security: [{ bearerAuth: [] }]
      parameters:
        - { $ref: '#/components/parameters/TenantId' }
        - name: severity
          in: query
          schema:
            type: string
            enum: [critical, out_of_stock]
          description: Filter by severity level
        - name: per_page
          in: query
          schema:
            type: integer
            default: 20
            maximum: 100
        - name: sort_by
          in: query
          schema:
            type: string
            enum: [stock, name, reorder_point, updated_at]
            default: stock
        - name: sort_order
          in: query
          schema:
            type: string
            enum: [asc, desc]
            default: asc
      responses:
        '200':
          description: List of low stock products
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/LowStockProduct' }
                  pagination: { $ref: '#/components/schemas/Pagination' }
                  summary: { $ref: '#/components/schemas/LowStockSummary' }

  /tenants/{tenantId}/stock-alerts/{alertId}/acknowledge:
    post:
      tags: [Inventory]
      summary: Acknowledge a stock alert
      description: "Marks alert as seen/acknowledged. Requires products.view permission."
      operationId: acknowledgeStockAlert
      security: [{ bearerAuth: [] }]
      parameters:
        - { $ref: '#/components/parameters/TenantId' }
        - { $ref: '#/components/parameters/AlertId' }
      responses:
        '200':
          description: Alert acknowledged successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
                  data: { $ref: '#/components/schemas/StockAlertAction' }

  /tenants/{tenantId}/stock-alerts/{alertId}/resolve:
    post:
      tags: [Inventory]
      summary: Resolve a stock alert
      description: "Marks alert as resolved (stock replenished). Requires inventory.adjust permission."
      operationId: resolveStockAlert
      security: [{ bearerAuth: [] }]
      parameters:
        - { $ref: '#/components/parameters/TenantId' }
        - { $ref: '#/components/parameters/AlertId' }
      responses:
        '200':
          description: Alert resolved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
                  data: { $ref: '#/components/schemas/StockAlertAction' }

  /tenants/{tenantId}/stock-alerts/{alertId}/dismiss:
    post:
      tags: [Inventory]
      summary: Dismiss a stock alert
      description: "Marks alert as dismissed (false positive). Requires products.view permission."
      operationId: dismissStockAlert
      security: [{ bearerAuth: [] }]
      parameters:
        - { $ref: '#/components/parameters/TenantId' }
        - { $ref: '#/components/parameters/AlertId' }
      responses:
        '200':
          description: Alert dismissed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
                  data:
                    type: object
                    properties:
                      id: { type: string, format: uuid }
                      status: { type: string }
                      updated_at: { type: string, format: date-time }

  # ========== PRODUCT VARIANTS ==========
  /tenants/{tenantId}/products/{productId}/variants:
    get:
      tags: [Product Variants]
      summary: List variants for a product
      operationId: listProductVariants
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/ProductId'
        - in: query
          name: per_page
          schema:
            type: integer
            default: 50
            minimum: 1
            maximum: 500
        - in: query
          name: search
          schema:
            type: string
          description: Search in SKU and name
        - in: query
          name: is_active
          schema:
            type: boolean
        - in: query
          name: sort_by
          schema:
            type: string
            default: sort_order
            enum: [sort_order, sku, name, price, stock, created_at]
        - in: query
          name: sort_order
          schema:
            type: string
            default: asc
            enum: [asc, desc]
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ProductVariant'
                  current_page:
                    type: integer
                  last_page:
                    type: integer
                  per_page:
                    type: integer
                  total:
                    type: integer
        '403':
          description: Forbidden - Insufficient permissions
        '404':
          description: Product not found

    post:
      tags: [Product Variants]
      summary: Create a new variant
      operationId: createProductVariant
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/ProductId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductVariantInput'
      responses:
        '201':
          description: Variant created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  data:
                    $ref: '#/components/schemas/ProductVariant'
        '422':
          description: Validation error

  /tenants/{tenantId}/products/{productId}/variants/bulk:
    post:
      tags: [Product Variants]
      summary: Create multiple variants
      description: Create up to 500 variants at once
      operationId: bulkCreateProductVariants
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/ProductId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                variants:
                  type: array
                  minItems: 1
                  maxItems: 500
                  items:
                    $ref: '#/components/schemas/ProductVariantInput'
      responses:
        '201':
          description: Variants created
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  success_count:
                    type: integer
                  error_count:
                    type: integer
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        index:
                          type: integer
                        sku:
                          type: string
                        message:
                          type: string

    patch:
      tags: [Product Variants]
      summary: Update multiple variants
      operationId: bulkUpdateProductVariants
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/ProductId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                variant_ids:
                  type: array
                  items:
                    type: string
                    format: uuid
                updates:
                  type: object
      responses:
        '200':
          description: Variants updated

    delete:
      tags: [Product Variants]
      summary: Delete multiple variants
      operationId: bulkDeleteProductVariants
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/ProductId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                variant_ids:
                  type: array
                  items:
                    type: string
                    format: uuid
      responses:
        '200':
          description: Variants deleted

  /tenants/{tenantId}/products/{productId}/variants/{variantId}:
    get:
      tags: [Product Variants]
      summary: Get a single variant
      operationId: getProductVariant
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/ProductId'
        - $ref: '#/components/parameters/VariantId'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ProductVariant'

    patch:
      tags: [Product Variants]
      summary: Update a variant
      operationId: updateProductVariant
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/ProductId'
        - $ref: '#/components/parameters/VariantId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductVariantInput'
      responses:
        '200':
          description: Variant updated

    delete:
      tags: [Product Variants]
      summary: Delete a variant (soft delete)
      operationId: deleteProductVariant
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/ProductId'
        - $ref: '#/components/parameters/VariantId'
      responses:
        '200':
          description: Variant deleted

  # ========== VARIANT ANALYTICS ==========
  /tenants/{tenantId}/products/{productId}/variants/analytics:
    get:
      tags: [Product Variants, Analytics]
      summary: Get analytics for all variants of a product
      description: |
        Returns aggregated analytics data for all variants of a specific product.
        Supports filtering by period type (daily, weekly, monthly) and date range.
        **Required Permission:** `products.view`
      operationId: getProductVariantsAnalytics
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/ProductId'
        - in: query
          name: period_type
          schema:
            type: string
            enum: [daily, weekly, monthly]
            default: daily
          description: Type of period aggregation
        - in: query
          name: period_start
          schema:
            type: string
            format: date
          description: Start date for analytics range (YYYY-MM-DD)
        - in: query
          name: period_end
          schema:
            type: string
            format: date
          description: End date for analytics range (YYYY-MM-DD)
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  product:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                      name:
                        type: string
                      variant_count:
                        type: integer
                  period_type:
                    type: string
                    enum: [daily, weekly, monthly]
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        variant:
                          $ref: '#/components/schemas/ProductVariant'
                        analytics:
                          type: array
                          items:
                            $ref: '#/components/schemas/VariantAnalytics'
                        summary:
                          type: object
                          properties:
                            total_revenue:
                              type: number
                              format: float
                            total_orders:
                              type: integer
                            total_quantity_sold:
                              type: integer
                            total_profit:
                              type: number
                              format: float
                  overall_summary:
                    type: object
                    properties:
                      total_revenue:
                        type: number
                        format: float
                      total_orders:
                        type: integer
                      total_quantity_sold:
                        type: integer
                      total_profit:
                        type: number
                        format: float
                      avg_conversion_rate:
                        type: number
                        format: float
        '403':
          description: Forbidden - Insufficient permissions
        '404':
          description: Product not found

  /tenants/{tenantId}/products/{productId}/variants/{variantId}/analytics:
    get:
      tags: [Product Variants, Analytics]
      summary: Get analytics for a specific variant
      description: |
        Returns time-series analytics data for a single product variant.
        Includes revenue, orders, stock movements, and performance metrics.
        **Required Permission:** `products.view`
      operationId: getProductVariantAnalytics
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/ProductId'
        - $ref: '#/components/parameters/VariantId'
        - in: query
          name: period_type
          schema:
            type: string
            enum: [daily, weekly, monthly]
            default: daily
          description: Type of period aggregation
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 365
            default: 30
          description: Number of periods to return
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  variant:
                    $ref: '#/components/schemas/ProductVariant'
                  analytics:
                    type: array
                    items:
                      $ref: '#/components/schemas/VariantAnalytics'
                  summary:
                    type: object
                    properties:
                      total_revenue:
                        type: number
                        format: float
                      total_orders:
                        type: integer
                      total_quantity_sold:
                        type: integer
                      total_profit:
                        type: number
                        format: float
                      avg_conversion_rate:
                        type: number
                        format: float
                      avg_turnover_rate:
                        type: number
                        format: float
        '403':
          description: Forbidden - Insufficient permissions
        '404':
          description: Variant not found

  /tenants/{tenantId}/products/{productId}/variants/{variantId}/stock:
    post:
      tags: [Product Variants]
      summary: Update variant stock
      operationId: updateVariantStock
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/ProductId'
        - $ref: '#/components/parameters/VariantId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                quantity:
                  type: integer
                  minimum: 0
                reason:
                  type: string
                  maxLength: 255
      responses:
        '200':
          description: Stock updated

  /tenants/{tenantId}/products/{productId}/variants/{variantId}/reserve:
    post:
      tags: [Product Variants]
      summary: Reserve stock for an order
      operationId: reserveVariantStock
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/ProductId'
        - $ref: '#/components/parameters/VariantId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                quantity:
                  type: integer
                  minimum: 1
                order_id:
                  type: string
                  format: uuid
      responses:
        '200':
          description: Stock reserved

  /tenants/{tenantId}/products/{productId}/variants/{variantId}/release:
    post:
      tags: [Product Variants]
      summary: Release reserved stock
      operationId: releaseVariantStock
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/ProductId'
        - $ref: '#/components/parameters/VariantId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                quantity:
                  type: integer
                  minimum: 1
                order_id:
                  type: string
                  format: uuid
      responses:
        '200':
          description: Stock released

  # ========== VARIANT IMPORT/EXPORT ==========
  /tenants/{tenantId}/variants/export:
    get:
      tags: [Product Variants]
      summary: Export variants to Excel/CSV
      operationId: exportVariants
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - in: query
          name: format
          schema:
            type: string
            enum: [xlsx, csv]
            default: xlsx
        - in: query
          name: product_id
          schema:
            type: string
            format: uuid
          description: Filter by product ID
        - in: query
          name: search
          schema:
            type: string
          description: Search in SKU and name
        - in: query
          name: is_active
          schema:
            type: boolean
          description: Filter by active status
      responses:
        '200':
          description: Successful export
          content:
            application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:
              schema:
                type: string
                format: binary
            text/csv:
              schema:
                type: string
                format: binary
        '403':
          description: Forbidden - Insufficient permissions

  /tenants/{tenantId}/variants/import/template:
    get:
      tags: [Product Variants]
      summary: Download import template
      operationId: downloadVariantsImportTemplate
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
      responses:
        '200':
          description: Template downloaded
          content:
            application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:
              schema:
                type: string
                format: binary
        '403':
          description: Forbidden - Insufficient permissions

  /tenants/{tenantId}/variants/import:
    post:
      tags: [Product Variants]
      summary: Import variants from Excel/CSV
      operationId: importVariants
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - file
              properties:
                file:
                  type: string
                  format: binary
                  description: Excel or CSV file (max 10MB)
                mode:
                  type: string
                  enum: [create, update]
                  default: create
                  description: Create new variants or update existing ones
      responses:
        '200':
          description: Import completed
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      total_rows:
                        type: integer
                      successful:
                        type: integer
                      failed:
                        type: integer
                      errors:
                        type: array
                        items:
                          type: object
                          properties:
                            row:
                              type: integer
                            errors:
                              type: array
                              items:
                                type: string
        '422':
          description: Validation error
        '413':
          description: File too large (max 10MB)

  # ========== VARIANT ANALYTICS ==========
  /tenants/{tenantId}/products/{productId}/variants/analytics:
    get:
      tags: [Product Variants]
      summary: Get analytics for product variants
      operationId: getVariantAnalytics
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/ProductId'
        - in: query
          name: period
          schema:
            type: string
            enum: [daily, weekly, monthly]
            default: daily
        - in: query
          name: days
          schema:
            type: integer
            default: 30
            minimum: 1
            maximum: 365
      responses:
        '200':
          description: Analytics data
          content:
            application/json:
              schema:
                type: object
                properties:
                  top_performers:
                    type: array
                    items:
                      $ref: '#/components/schemas/VariantAnalytics'
                  underperformers:
                    type: array
                    items:
                      $ref: '#/components/schemas/VariantAnalytics'
                  stock_alerts:
                    type: array
                    items:
                      type: object
                      properties:
                        variant_id:
                          type: string
                          format: uuid
                        sku:
                          type: string
                        name:
                          type: string
                        available_stock:
                          type: integer
                        low_stock_threshold:
                          type: integer
                  recommendations:
                    type: array
                    items:
                      type: object
                      properties:
                        variant_id:
                          type: string
                          format: uuid
                        recommendation:
                          type: string
                        reason:
                          type: string
        '403':
          description: Forbidden - Insufficient permissions

  # ========== VARIANT ATTRIBUTES ==========
  /tenants/{tenantId}/variant-attributes:
    get:
      tags: [Variant Attributes]
      summary: List variant attributes
      operationId: listVariantAttributes
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - in: query
          name: search
          schema:
            type: string
        - in: query
          name: is_active
          schema:
            type: boolean
        - in: query
          name: display_type
          schema:
            type: string
            enum: [select, radio, button, swatch, color_swatch]
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/VariantAttribute'

    post:
      tags: [Variant Attributes]
      summary: Create a variant attribute
      operationId: createVariantAttribute
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VariantAttributeInput'
      responses:
        '201':
          description: Attribute created

  /tenants/{tenantId}/variant-attributes/popular:
    get:
      tags: [Variant Attributes]
      summary: Get popular variant attributes
      operationId: getPopularVariantAttributes
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: Successful operation

  /tenants/{tenantId}/variant-attributes/{id}:
    get:
      tags: [Variant Attributes]
      summary: Get a variant attribute
      operationId: getVariantAttribute
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful operation

    patch:
      tags: [Variant Attributes]
      summary: Update a variant attribute
      operationId: updateVariantAttribute
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VariantAttributeInput'
      responses:
        '200':
          description: Attribute updated

    delete:
      tags: [Variant Attributes]
      summary: Delete a variant attribute
      operationId: deleteVariantAttribute
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Attribute deleted

  /tenants/{tenantId}/variant-attributes/{id}/values:
    post:
      tags: [Variant Attributes]
      summary: Add a value to an attribute
      operationId: addAttributeValue
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                value:
                  type: string
                price_modifier:
                  type: number
      responses:
        '200':
          description: Value added

    delete:
      tags: [Variant Attributes]
      summary: Remove a value from an attribute
      operationId: removeAttributeValue
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                value:
                  type: string
      responses:
        '200':
          description: Value removed

  # ========== VARIANT TEMPLATES ==========
  /tenants/{tenantId}/variant-templates:
    get:
      tags: [Variant Templates]
      summary: List variant templates
      description: Returns both system templates and tenant-specific templates
      operationId: listVariantTemplates
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - in: query
          name: include_system
          schema:
            type: boolean
            default: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/VariantTemplate'

    post:
      tags: [Variant Templates]
      summary: Create a variant template
      operationId: createVariantTemplate
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VariantTemplateInput'
      responses:
        '201':
          description: Template created

  /tenants/{tenantId}/variant-templates/{id}:
    get:
      tags: [Variant Templates]
      summary: Get a variant template
      operationId: getVariantTemplate
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful operation

    patch:
      tags: [Variant Templates]
      summary: Update a variant template
      description: System templates cannot be modified
      operationId: updateVariantTemplate
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VariantTemplateInput'
      responses:
        '200':
          description: Template updated

    delete:
      tags: [Variant Templates]
      summary: Delete a variant template
      description: System templates cannot be deleted
      operationId: deleteVariantTemplate
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Template deleted

  /tenants/{tenantId}/variant-templates/{id}/apply:
    post:
      tags: [Variant Templates]
      summary: Apply template to a product
      description: Generates all variant combinations and creates them
      operationId: applyVariantTemplate
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                product_id:
                  type: string
                  format: uuid
                override_existing:
                  type: boolean
                  default: false
      responses:
        '201':
         