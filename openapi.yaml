openapi: 3.0.3
info:
  title: Canvastack POSMID API
  description: |-
    API Specification for the Canvastack Point of Sale Multi-tenant ID (POSMID) system.
    This API is designed to be backend-agnostic, following a decoupled, API-First approach.
  version: 1.0.0

servers:
  - url: http://localhost:9000/api/v1
    description: Local Development Server

paths:
  /register:
    post:
      tags:
        - Authentication
      summary: Register a new Tenant and User
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: Registration successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '422':
          description: Validation error

  /login:
    post:
      tags:
        - Authentication
      summary: Log in a user
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Unauthorized

  /logout:
    post:
      tags:
        - Authentication
      summary: Log out the current user
      operationId: logoutUser
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Logged out successfully

  /user:
    get:
      tags:
        - Authentication
      summary: Get current authenticated user's information
      operationId: getCurrentUser
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /tenants/{tenantId}/products:
    get:
      tags:
        - Products
      summary: List all products for a tenant
      operationId: listProducts
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantId'
      responses:
        '200':
          description: A paginated list of products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
    post:
      tags:
        - Products
      summary: Create a new product
      operationId: createProduct
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductRequest'
      responses:
        '201':
          description: Product created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'

  /tenants/{tenantId}/products/{productId}:
    get:
      tags:
        - Products
      summary: Get a single product by ID
      operationId: getProductById
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/ProductId'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
    put:
      tags:
        - Products
      summary: Update an existing product
      operationId: updateProduct
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/ProductId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductRequest'
      responses:
        '200':
          description: Product updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
    delete:
      tags:
        - Products
      summary: Delete a product
      operationId: deleteProduct
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/ProductId'
      responses:
        '204':
          description: Product deleted successfully

  /tenants/{tenantId}/roles:
    get:
      tags:
        - Roles & Permissions
      summary: List all roles for a tenant
      operationId: listRoles
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantId'
      responses:
        '200':
          description: A list of roles
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Role'
    post:
      tags:
        - Roles & Permissions
      summary: Create a new role
      operationId: createRole
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleRequest'
      responses:
        '201':
          description: Role created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'

  /tenants/{tenantId}/roles/{roleId}:
    get:
      tags:
        - Roles & Permissions
      summary: Get a single role by ID
      operationId: getRoleById
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/RoleId'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
    put:
      tags:
        - Roles & Permissions
      summary: Update an existing role
      operationId: updateRole
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/RoleId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleRequest'
      responses:
        '200':
          description: Role updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
    delete:
      tags:
        - Roles & Permissions
      summary: Delete a role
      operationId: deleteRole
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/RoleId'
      responses:
        '204':
          description: Role deleted successfully

  /tenants/{tenantId}/permissions:
    get:
      tags:
        - Roles & Permissions
      summary: List all available permissions
      operationId: listPermissions
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantId'
      responses:
        '200':
          description: A list of available permissions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Permission'

  /tenants/{tenantId}/orders:
    post:
      tags:
        - Sales
      summary: Create a new sales transaction (order)
      operationId: createOrder
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderRequest'
      responses:
        '201':
          description: Order created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'

  /tenants/{tenantId}/categories:
    get:
      tags:
        - Products
      summary: List all product categories
      operationId: listCategories
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantId'
      responses:
        '200':
          description: A list of categories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'

  /tenants/{tenantId}/stock-adjustments:
    post:
      tags:
        - Inventory
      summary: Create a new stock adjustment
      operationId: createStockAdjustment
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StockAdjustmentRequest'
      responses:
        '201':
          description: Stock adjustment recorded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StockAdjustment'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    TenantId:
      name: tenantId
      in: path
      required: true
      description: ID of the tenant
      schema:
        type: string
        format: uuid
    ProductId:
      name: productId
      in: path
      required: true
      description: ID of the product
      schema:
        type: string
        format: uuid
    RoleId:
      name: roleId
      in: path
      required: true
      description: ID of the role
      schema:
        type: string
        format: uuid

  schemas:
    # Authentication Schemas
    RegisterRequest:
      type: object
      required: [tenant_name, user_name, email, password]
      properties:
        tenant_name:
          type: string
          example: "My Awesome Store"
        user_name:
          type: string
          example: "John Doe"
        email:
          type: string
          format: email
          example: "john.doe@example.com"
        password:
          type: string
          format: password
          example: "password123"
    LoginRequest:
      type: object
      required: [email, password]
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
    AuthResponse:
      type: object
      properties:
        message:
          type: string
        user:
          $ref: '#/components/schemas/User'
        token:
          type: string

    # Core Schemas
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        email:
          type: string
          format: email
        tenant_id:
          type: string
          format: uuid
        roles:
          type: array
          items:
            type: string
            example: "admin"

    Product:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        sku:
          type: string
        price:
          type: number
          format: float
        stock:
          type: integer
        tenant_id:
          type: string
          format: uuid

    ProductRequest:
      type: object
      required: [name, sku, price, stock]
      properties:
        name:
          type: string
          example: "Laptop Pro"
        sku:
          type: string
          example: "LP-001"
        price:
          type: number
          format: float
          example: 1500.99
        stock:
          type: integer
          example: 100

    Role:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        permissions:
          type: array
          items:
            $ref: '#/components/schemas/Permission'

    RoleRequest:
      type: object
      required: [name, permissions]
      properties:
        name:
          type: string
          example: "Store Manager"
        permissions:
          type: array
          description: "Array of permission names"
          items:
            type: string
            example: "products.view"

    Permission:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: "products.create"
    # Sales Schemas
    Order:
      type: object
      properties:
        id:
          type: string
          format: uuid
        invoice_number:
          type: string
        total_amount:
          type: number
          format: float
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
    OrderItem:
      type: object
      properties:
        product_id:
          type: string
          format: uuid
        product_name:
          type: string
        quantity:
          type: integer
        price:
          type: number
          format: float
    OrderRequest:
      type: object
      required: [items, payment_method, amount_paid]
      properties:
        items:
          type: array
          items:
            type: object
            required: [product_id, quantity]
            properties:
              product_id:
                type: string
                format: uuid
              quantity:
                type: integer
        payment_method:
          type: string
          example: "Cash"
        amount_paid:
          type: number
          format: float
        customer_id:
          type: string
          format: uuid
          nullable: true

    # Inventory Schemas
    Category:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        tenant_id:
          type: string
          format: uuid

    StockAdjustment:
      type: object
      properties:
        id:
          type: string
          format: uuid
        product_id:
          type: string
          format: uuid
        quantity:
          type: integer
          description: "Positive for stock in, negative for stock out"
        reason:
          type: string
        user_id:
          type: string
          format: uuid

    StockAdjustmentRequest:
      type: object
      required: [product_id, quantity, reason]
      properties:
        product_id:
          type: string
          format: uuid
        quantity:
          type: integer
          example: -2
        reason:
          type: string
          example: "Barang Rusak"